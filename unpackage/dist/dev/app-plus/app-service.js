var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};
var __privateWrapper = (obj, member, setter, getter) => ({
  set _(value) {
    __privateSet(obj, member, value, setter);
  },
  get _() {
    return __privateGet(obj, member, getter);
  }
});
var __privateMethod = (obj, member, method2) => {
  __accessCheck(obj, member, "access private method");
  return method2;
};
if (typeof Promise !== "undefined" && !Promise.prototype.finally) {
  Promise.prototype.finally = function(callback) {
    const promise = this.constructor;
    return this.then(
      (value) => promise.resolve(callback()).then(() => value),
      (reason) => promise.resolve(callback()).then(() => {
        throw reason;
      })
    );
  };
}
;
if (typeof uni !== "undefined" && uni && uni.requireGlobal) {
  const global2 = uni.requireGlobal();
  ArrayBuffer = global2.ArrayBuffer;
  Int8Array = global2.Int8Array;
  Uint8Array = global2.Uint8Array;
  Uint8ClampedArray = global2.Uint8ClampedArray;
  Int16Array = global2.Int16Array;
  Uint16Array = global2.Uint16Array;
  Int32Array = global2.Int32Array;
  Uint32Array = global2.Uint32Array;
  Float32Array = global2.Float32Array;
  Float64Array = global2.Float64Array;
  BigInt64Array = global2.BigInt64Array;
  BigUint64Array = global2.BigUint64Array;
}
;
if (uni.restoreGlobal) {
  uni.restoreGlobal(Vue, weex, plus, setTimeout, clearTimeout, setInterval, clearInterval);
}
(function(vue, shared) {
  var _listener, _listeners, _cancelled, _allowInsecure, _gzip, _headers, _method, _timeout, _url, _body, _bodyType, _creds, _preflight, _process, _retry, _signal, _throttle, _send, send_fn, _statusCode, _statusMessage, _headers2, _body2, _request, _error, _format, _val, _tens, _checkFormat, checkFormat_fn, _checkValue, checkValue_fn, _add, add_fn, _sub, sub_fn, _mul, mul_fn, _div, div_fn, _names, _data, _dataLength, _writeData, writeData_fn, _data2, _offset, _peekBytes, peekBytes_fn, _r, _s2, _v, _networkV, _privateKey, _options, _type, _to, _data3, _nonce, _gasLimit, _gasPrice, _maxPriorityFeePerGas, _maxFeePerGas, _value, _chainId, _sig, _accessList, _types, _fullTypes, _encoderCache, _getEncoder, getEncoder_fn, _offset2, _tokens, _subTokenString, subTokenString_fn, _walkAsync, walkAsync_fn, _getCoder, getCoder_fn, _errors, _events, _functions, _abiCoder, _getFunction, getFunction_fn, _getEvent, getEvent_fn, _transactions, _logs, _startBlock, _interface, _interface2, _filter, _supports2544, _resolver, _fetch, fetch_fn, _getResolver, getResolver_fn, _name, _chainId2, _plugins, _provider, _poller, _interval, _blockNumber, _poll, poll_fn, _provider2, _poll2, _running, _filter2, _hash, _provider3, _filter3, _poller2, _running2, _blockNumber2, _poll3, poll_fn2, _subs, _plugins2, _pausedState, _networkPromise, _anyNetwork, _performCache, _lastBlockNumber, _nextTimer, _timers, _disableCcipRead, _perform, perform_fn, _call, call_fn, _checkNetwork, checkNetwork_fn, _getAccountValue, getAccountValue_fn, _getBlock, getBlock_fn, _hasSub, hasSub_fn, _getSub, getSub_fn, _throwUnsupported, throwUnsupported_fn, _provider4, _filterIdPromise, _poller3, _running3, _network, _hault, _poll4, poll_fn3, _teardown, teardown_fn, _event, _options2, _nextId, _payloads, _drainTimer, _notReady, _network2, _scheduleDrain, scheduleDrain_fn, _pollingInterval, _connect, _signingKey, _data4, _checksum, _words, _loadWords, loadWords_fn, _account, account_fn, _fromSeed, fromSeed_fn, _fromAccount, fromAccount_fn;
  "use strict";
  function requireNativePlugin(name) {
    return weex.requireModule(name);
  }
  function formatAppLog(type, filename, ...args) {
    if (uni.__log__) {
      uni.__log__(type, filename, ...args);
    } else {
      console[type].apply(console, [...args, filename]);
    }
  }
  function resolveEasycom(component, easycom) {
    return shared.isString(component) ? easycom : component;
  }
  const CONFIG = {
    "block_chain_net": {
      "eth": {
        "default_net": "Goerli Test Network",
        "net_list": [
          { "network": "Ethereum Main  Network", "url": "https://mainnet.infura.io/v3/8650610ca2224aaaa2fbcf3b7e47b445", "etherscan_api": "https://api.etherscan.io/api", "color": "#1ceba6" },
          { "network": "Goerli Test Network", "url": "https://goerli.infura.io/v3/8650610ca2224aaaa2fbcf3b7e47b445", "etherscan_api": "https://api-goerli.etherscan.io/", "color": "#6f6b73" }
        ]
      }
    },
    "etherscan_api_key": "N1SZFS4PXGRS9QT95USZ4E5VYRWVU9TZS1",
    "pin_code_max_length": 6,
    "pin_keyboard_value": ["1", "2", "3", "4", "5", "6", "7", "8", "9", ".", "0", "{$del}"]
  };
  const _export_sfc = (sfc, props) => {
    const target = sfc.__vccOpts || sfc;
    for (const [key, val] of props) {
      target[key] = val;
    }
    return target;
  };
  const _sfc_main$j = {
    data() {
      return {};
    },
    methods: {},
    onShow() {
      try {
        let global_network_list = CONFIG.block_chain_net.eth.net_list;
        let default_network = uni.getStorageSync("storage_default_network");
        let global_network_index = 0;
        if (!default_network) {
          default_network = CONFIG.block_chain_net.eth.default_net;
        }
        for (var i2 = 0; i2 < global_network_list.length; i2++) {
          if (global_network_list[i2].network == default_network) {
            global_network_index = i2;
            formatAppLog("log", "at pages/start/start-up.vue:37", "\u7F51\u7EDC\u914D\u7F6E\uFF1A" + global_network_list[i2].url);
          }
        }
        getApp().globalData.global_network_list = global_network_list;
        getApp().globalData.global_network_index = global_network_index;
        getApp().globalData.global_is_app_data_init = true;
      } catch (e) {
        formatAppLog("log", "at pages/start/start-up.vue:47", "\u8BFB\u53D6\u914D\u7F6E\u4FE1\u606F\u5F02\u5E38");
        return;
      }
      var page_url = "/pages/setup-wallet/setup";
      try {
        const value = uni.getStorageSync("storage_wallet_list");
        if (value) {
          page_url = "/pages/index/wallet";
        }
      } catch (e) {
        uni.showToast({
          title: "Data exception, please contact admin",
          icon: "error"
        });
        return;
      }
      setTimeout(() => {
        uni.redirectTo({
          url: page_url,
          success: function(res) {
            formatAppLog("log", "at pages/start/start-up.vue:69", res);
          },
          fail: function(res) {
            formatAppLog("log", "at pages/start/start-up.vue:72", res);
          }
        });
      }, 2e3);
    }
  };
  function _sfc_render$i(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "container" }, [
      vue.createElementVNode("view"),
      vue.createElementVNode("view", { class: "icon-area" }, [
        vue.createElementVNode("image", {
          class: "icon",
          mode: "widthFix",
          src: "/static/img/wallet.png"
        }),
        vue.createElementVNode("view", { class: "font-first-title" }, "Turtle Wallet")
      ]),
      vue.createElementVNode("view")
    ]);
  }
  const PagesStartStartUp = /* @__PURE__ */ _export_sfc(_sfc_main$j, [["render", _sfc_render$i], ["__file", "C:/Users/baba/Documents/HBuilderProjects/hello_demo/pages/start/start-up.vue"]]);
  const _sfc_main$i = {
    data() {
      return {
        systemLocale: "",
        applicationLocale: ""
      };
    },
    computed: {
      locales() {
        return [
          {
            text: this.$t("locale.auto"),
            code: "auto"
          },
          {
            text: this.$t("locale.en"),
            code: "en"
          },
          {
            text: this.$t("locale.zh-hans"),
            code: "zh-Hans"
          },
          {
            text: this.$t("locale.zh-hant"),
            code: "zh-Hant"
          },
          {
            text: this.$t("locale.ja"),
            code: "ja"
          }
        ];
      }
    },
    onLoad() {
      let systemInfo = uni.getSystemInfoSync();
      this.systemLocale = systemInfo.language;
      this.applicationLocale = uni.getLocale();
      this.isAndroid = systemInfo.platform.toLowerCase() === "android";
      uni.onLocaleChange((e) => {
        this.applicationLocale = e.locale;
      });
    },
    methods: {
      onLocaleChange(e) {
        if (this.isAndroid) {
          uni.showModal({
            content: this.$t("index.language-change-confirm"),
            success: (res) => {
              if (res.confirm) {
                uni.setLocale(e.code);
              }
            }
          });
        } else {
          uni.setLocale(e.code);
          this.$i18n.locale = e.code;
        }
      }
    }
  };
  function _sfc_render$h(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "container" }, [
      vue.createElementVNode("view", { class: "title" }, vue.toDisplayString(_ctx.$t("index.demo")), 1),
      vue.createElementVNode("view", { class: "description" }, vue.toDisplayString(_ctx.$t("index.demo-description")), 1),
      vue.createElementVNode("view", { class: "detail-link" }, [
        vue.createTextVNode(vue.toDisplayString(_ctx.$t("index.detail")) + ": ", 1),
        vue.createElementVNode("text", { class: "link" }, "https://uniapp.dcloud.net.cn/collocation/i18n")
      ]),
      vue.createElementVNode("view", { class: "locale-setting" }, vue.toDisplayString(_ctx.$t("index.language-info")), 1),
      vue.createElementVNode("view", { class: "list-item" }, [
        vue.createElementVNode("text", { class: "k" }, vue.toDisplayString(_ctx.$t("index.system-language")) + ":", 1),
        vue.createElementVNode("text", { class: "v" }, vue.toDisplayString($data.systemLocale), 1)
      ]),
      vue.createElementVNode("view", { class: "list-item" }, [
        vue.createElementVNode("text", { class: "k" }, vue.toDisplayString(_ctx.$t("index.application-language")) + ":", 1),
        vue.createElementVNode("text", { class: "v" }, vue.toDisplayString($data.applicationLocale), 1)
      ]),
      vue.createElementVNode("view", { class: "locale-setting" }, vue.toDisplayString(_ctx.$t("index.language")), 1),
      vue.createElementVNode("view", { class: "locale-list" }, [
        (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($options.locales, (item, index) => {
          return vue.openBlock(), vue.createElementBlock("view", {
            class: "locale-item",
            key: index,
            onClick: ($event) => $options.onLocaleChange(item)
          }, [
            vue.createElementVNode("text", { class: "text" }, vue.toDisplayString(item.text), 1),
            item.code == $data.applicationLocale ? (vue.openBlock(), vue.createElementBlock("text", {
              key: 0,
              class: "icon-check"
            })) : vue.createCommentVNode("v-if", true)
          ], 8, ["onClick"]);
        }), 128))
      ])
    ]);
  }
  const PagesIndexIndex = /* @__PURE__ */ _export_sfc(_sfc_main$i, [["render", _sfc_render$h], ["__file", "C:/Users/baba/Documents/HBuilderProjects/hello_demo/pages/index/index.vue"]]);
  const isObject$2 = (val) => val !== null && typeof val === "object";
  const defaultDelimiters = ["{", "}"];
  class BaseFormatter {
    constructor() {
      this._caches = /* @__PURE__ */ Object.create(null);
    }
    interpolate(message, values, delimiters = defaultDelimiters) {
      if (!values) {
        return [message];
      }
      let tokens = this._caches[message];
      if (!tokens) {
        tokens = parse$1(message, delimiters);
        this._caches[message] = tokens;
      }
      return compile(tokens, values);
    }
  }
  const RE_TOKEN_LIST_VALUE = /^(?:\d)+/;
  const RE_TOKEN_NAMED_VALUE = /^(?:\w)+/;
  function parse$1(format2, [startDelimiter, endDelimiter]) {
    const tokens = [];
    let position = 0;
    let text = "";
    while (position < format2.length) {
      let char = format2[position++];
      if (char === startDelimiter) {
        if (text) {
          tokens.push({ type: "text", value: text });
        }
        text = "";
        let sub = "";
        char = format2[position++];
        while (char !== void 0 && char !== endDelimiter) {
          sub += char;
          char = format2[position++];
        }
        const isClosed = char === endDelimiter;
        const type = RE_TOKEN_LIST_VALUE.test(sub) ? "list" : isClosed && RE_TOKEN_NAMED_VALUE.test(sub) ? "named" : "unknown";
        tokens.push({ value: sub, type });
      } else {
        text += char;
      }
    }
    text && tokens.push({ type: "text", value: text });
    return tokens;
  }
  function compile(tokens, values) {
    const compiled = [];
    let index = 0;
    const mode = Array.isArray(values) ? "list" : isObject$2(values) ? "named" : "unknown";
    if (mode === "unknown") {
      return compiled;
    }
    while (index < tokens.length) {
      const token = tokens[index];
      switch (token.type) {
        case "text":
          compiled.push(token.value);
          break;
        case "list":
          compiled.push(values[parseInt(token.value, 10)]);
          break;
        case "named":
          if (mode === "named") {
            compiled.push(values[token.value]);
          } else {
            {
              console.warn(`Type of token '${token.type}' and format of value '${mode}' don't match!`);
            }
          }
          break;
        case "unknown":
          {
            console.warn(`Detect 'unknown' type of token!`);
          }
          break;
      }
      index++;
    }
    return compiled;
  }
  const LOCALE_ZH_HANS = "zh-Hans";
  const LOCALE_ZH_HANT = "zh-Hant";
  const LOCALE_EN = "en";
  const LOCALE_FR = "fr";
  const LOCALE_ES = "es";
  const hasOwnProperty$2 = Object.prototype.hasOwnProperty;
  const hasOwn$2 = (val, key) => hasOwnProperty$2.call(val, key);
  const defaultFormatter = new BaseFormatter();
  function include(str, parts) {
    return !!parts.find((part) => str.indexOf(part) !== -1);
  }
  function startsWith(str, parts) {
    return parts.find((part) => str.indexOf(part) === 0);
  }
  function normalizeLocale(locale, messages2) {
    if (!locale) {
      return;
    }
    locale = locale.trim().replace(/_/g, "-");
    if (messages2 && messages2[locale]) {
      return locale;
    }
    locale = locale.toLowerCase();
    if (locale === "chinese") {
      return LOCALE_ZH_HANS;
    }
    if (locale.indexOf("zh") === 0) {
      if (locale.indexOf("-hans") > -1) {
        return LOCALE_ZH_HANS;
      }
      if (locale.indexOf("-hant") > -1) {
        return LOCALE_ZH_HANT;
      }
      if (include(locale, ["-tw", "-hk", "-mo", "-cht"])) {
        return LOCALE_ZH_HANT;
      }
      return LOCALE_ZH_HANS;
    }
    const lang = startsWith(locale, [LOCALE_EN, LOCALE_FR, LOCALE_ES]);
    if (lang) {
      return lang;
    }
  }
  class I18n {
    constructor({ locale, fallbackLocale, messages: messages2, watcher, formater }) {
      this.locale = LOCALE_EN;
      this.fallbackLocale = LOCALE_EN;
      this.message = {};
      this.messages = {};
      this.watchers = [];
      if (fallbackLocale) {
        this.fallbackLocale = fallbackLocale;
      }
      this.formater = formater || defaultFormatter;
      this.messages = messages2 || {};
      this.setLocale(locale || LOCALE_EN);
      if (watcher) {
        this.watchLocale(watcher);
      }
    }
    setLocale(locale) {
      const oldLocale = this.locale;
      this.locale = normalizeLocale(locale, this.messages) || this.fallbackLocale;
      if (!this.messages[this.locale]) {
        this.messages[this.locale] = {};
      }
      this.message = this.messages[this.locale];
      if (oldLocale !== this.locale) {
        this.watchers.forEach((watcher) => {
          watcher(this.locale, oldLocale);
        });
      }
    }
    getLocale() {
      return this.locale;
    }
    watchLocale(fn2) {
      const index = this.watchers.push(fn2) - 1;
      return () => {
        this.watchers.splice(index, 1);
      };
    }
    add(locale, message, override = true) {
      const curMessages = this.messages[locale];
      if (curMessages) {
        if (override) {
          Object.assign(curMessages, message);
        } else {
          Object.keys(message).forEach((key) => {
            if (!hasOwn$2(curMessages, key)) {
              curMessages[key] = message[key];
            }
          });
        }
      } else {
        this.messages[locale] = message;
      }
    }
    f(message, values, delimiters) {
      return this.formater.interpolate(message, values, delimiters).join("");
    }
    t(key, locale, values) {
      let message = this.message;
      if (typeof locale === "string") {
        locale = normalizeLocale(locale, this.messages);
        locale && (message = this.messages[locale]);
      } else {
        values = locale;
      }
      if (!hasOwn$2(message, key)) {
        console.warn(`Cannot translate the value of keypath ${key}. Use the value of keypath as default.`);
        return key;
      }
      return this.formater.interpolate(message[key], values).join("");
    }
  }
  function watchAppLocale(appVm, i18n2) {
    if (appVm.$watchLocale) {
      appVm.$watchLocale((newLocale) => {
        i18n2.setLocale(newLocale);
      });
    } else {
      appVm.$watch(() => appVm.$locale, (newLocale) => {
        i18n2.setLocale(newLocale);
      });
    }
  }
  function getDefaultLocale() {
    if (typeof uni !== "undefined" && uni.getLocale) {
      return uni.getLocale();
    }
    if (typeof global !== "undefined" && global.getLocale) {
      return global.getLocale();
    }
    return LOCALE_EN;
  }
  function initVueI18n(locale, messages2 = {}, fallbackLocale, watcher) {
    if (typeof locale !== "string") {
      [locale, messages2] = [
        messages2,
        locale
      ];
    }
    if (typeof locale !== "string") {
      locale = getDefaultLocale();
    }
    if (typeof fallbackLocale !== "string") {
      fallbackLocale = typeof __uniConfig !== "undefined" && __uniConfig.fallbackLocale || LOCALE_EN;
    }
    const i18n2 = new I18n({
      locale,
      fallbackLocale,
      messages: messages2,
      watcher
    });
    let t2 = (key, values) => {
      if (typeof getApp !== "function") {
        t2 = function(key2, values2) {
          return i18n2.t(key2, values2);
        };
      } else {
        let isWatchedAppLocale = false;
        t2 = function(key2, values2) {
          const appVm = getApp().$vm;
          if (appVm) {
            appVm.$locale;
            if (!isWatchedAppLocale) {
              isWatchedAppLocale = true;
              watchAppLocale(appVm, i18n2);
            }
          }
          return i18n2.t(key2, values2);
        };
      }
      return t2(key, values);
    };
    return {
      i18n: i18n2,
      f(message, values, delimiters) {
        return i18n2.f(message, values, delimiters);
      },
      t(key, values) {
        return t2(key, values);
      },
      add(locale2, message, override = true) {
        return i18n2.add(locale2, message, override);
      },
      watch(fn2) {
        return i18n2.watchLocale(fn2);
      },
      getLocale() {
        return i18n2.getLocale();
      },
      setLocale(newLocale) {
        return i18n2.setLocale(newLocale);
      }
    };
  }
  const en$1 = {
    "no-data.title": "No Data"
  };
  const zhHans$1 = {
    "no-data.title": "\u65E0\u6570\u636E"
  };
  const zhHant$1 = {
    "no-data.title": "\u7121\u6578\u64DA"
  };
  const ja$1 = {
    "no-data.title": "\u30C7\u30FC\u30BF\u306A\u3057"
  };
  const messages$1 = {
    en: en$1,
    "zh-Hans": zhHans$1,
    "zh-Hant": zhHant$1,
    ja: ja$1
  };
  const {
    t: t$1
  } = initVueI18n(messages$1);
  const _sfc_main$h = {
    name: "no-data",
    props: {},
    data() {
      return {
        title: t$1("no-data.title")
      };
    },
    created(e) {
    },
    unmounted() {
    },
    methods: {}
  };
  function _sfc_render$g(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "content" }, [
      vue.createElementVNode("text", { class: "message" }, vue.toDisplayString($data.title), 1)
    ]);
  }
  const __easycom_0$2 = /* @__PURE__ */ _export_sfc(_sfc_main$h, [["render", _sfc_render$g], ["__scopeId", "data-v-985e9f3e"], ["__file", "C:/Users/baba/Documents/HBuilderProjects/hello_demo/uni_modules/no-data/components/no-data/no-data.vue"]]);
  const _sfc_main$g = {
    data() {
      return {
        title: this.$t("")
      };
    },
    methods: {}
  };
  function _sfc_render$f(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_no_data = resolveEasycom(vue.resolveDynamicComponent("no-data"), __easycom_0$2);
    return vue.openBlock(), vue.createElementBlock("view", { class: "container" }, [
      vue.createVNode(_component_no_data)
    ]);
  }
  const PagesComponentComponent = /* @__PURE__ */ _export_sfc(_sfc_main$g, [["render", _sfc_render$f], ["__file", "C:/Users/baba/Documents/HBuilderProjects/hello_demo/pages/component/component.vue"]]);
  const _sfc_main$f = {
    data() {
      return {};
    },
    methods: {
      showModel() {
        uni.showModal({
          content: this.$t("api.message"),
          success: (res) => {
            formatAppLog("log", "at pages/api/api.vue:17", res);
          }
        });
      }
    }
  };
  function _sfc_render$e(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "container" }, [
      vue.createElementVNode("button", {
        onClick: _cache[0] || (_cache[0] = (...args) => $options.showModel && $options.showModel(...args))
      }, "uni.showModal")
    ]);
  }
  const PagesApiApi = /* @__PURE__ */ _export_sfc(_sfc_main$f, [["render", _sfc_render$e], ["__file", "C:/Users/baba/Documents/HBuilderProjects/hello_demo/pages/api/api.vue"]]);
  const pages = [
    {
      path: "pages/start/start-up",
      style: {
        navigationBarTitleText: "",
        navigationBarBackgroundColor: "#FFFFFF",
        enablePullDownRefresh: false,
        disableScroll: true
      }
    },
    {
      path: "pages/index/index",
      style: {
        navigationBarTitleText: "%index.title%"
      }
    },
    {
      path: "pages/component/component",
      style: {
        navigationBarTitleText: "%index.component%",
        enablePullDownRefresh: false
      }
    },
    {
      path: "pages/api/api",
      style: {
        navigationBarTitleText: "%index.api%",
        enablePullDownRefresh: false
      }
    },
    {
      path: "pages/schema/schema",
      style: {
        navigationBarTitleText: "%index.schema%",
        enablePullDownRefresh: false
      }
    },
    {
      path: "pages/verify/unlock/unlock",
      style: {
        navigationBarTitleText: "",
        enablePullDownRefresh: false
      }
    },
    {
      path: "pages/setup-wallet/setup",
      style: {
        navigationBarTitleText: "",
        navigationBarBackgroundColor: "#FFFFFF",
        enablePullDownRefresh: false,
        disableScroll: true
      }
    },
    {
      path: "pages/setup-wallet/create-pin",
      style: {
        navigationBarTitleText: "",
        navigationBarBackgroundColor: "#FFFFFF",
        enablePullDownRefresh: false,
        disableScroll: true
      }
    },
    {
      path: "pages/setup-wallet/import-wallet",
      style: {
        navigationBarTitleText: "",
        navigationBarBackgroundColor: "#FFFFFF",
        enablePullDownRefresh: false,
        disableScroll: true
      }
    },
    {
      path: "pages/setup-wallet/wallet-phrase",
      style: {
        navigationBarTitleText: "",
        navigationBarBackgroundColor: "#FFFFFF",
        enablePullDownRefresh: false,
        disableScroll: true
      }
    },
    {
      path: "pages/setup-wallet/check-phrase",
      style: {
        navigationBarTitleText: "",
        navigationBarBackgroundColor: "#FFFFFF",
        enablePullDownRefresh: false,
        disableScroll: true
      }
    },
    {
      path: "pages/index/wallet",
      style: {
        navigationBarTitleText: "",
        navigationBarBackgroundColor: "#FFFFFF",
        navigationStyle: "custom",
        disableSwipeBack: true,
        enablePullDownRefresh: true,
        "app-plus": {
          titleNView: false
        }
      }
    },
    {
      path: "pages/transfer/transfer",
      style: {
        navigationBarTitleText: "Transfer",
        enablePullDownRefresh: false,
        navigationBarBackgroundColor: "#FFFFFF"
      }
    },
    {
      path: "pages/transaction/list",
      style: {
        navigationBarTitleText: "Transaction List",
        enablePullDownRefresh: false,
        navigationBarBackgroundColor: "#FFFFFF"
      }
    }
  ];
  const globalStyle = {
    navigationBarTextStyle: "black",
    navigationBarTitleText: "uni-app",
    navigationBarBackgroundColor: "#F8F8F8",
    backgroundColor: "#F8F8F8"
  };
  const t = {
    pages,
    globalStyle
  };
  function n$1(e) {
    return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;
  }
  function s(e, t2, n2) {
    return e(n2 = { path: t2, exports: {}, require: function(e2, t3) {
      return function() {
        throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
      }(null == t3 && n2.path);
    } }, n2.exports), n2.exports;
  }
  var r$1 = s(function(e, t2) {
    var n2;
    e.exports = (n2 = n2 || function(e2, t3) {
      var n3 = Object.create || function() {
        function e3() {
        }
        return function(t4) {
          var n4;
          return e3.prototype = t4, n4 = new e3(), e3.prototype = null, n4;
        };
      }(), s2 = {}, r2 = s2.lib = {}, i2 = r2.Base = { extend: function(e3) {
        var t4 = n3(this);
        return e3 && t4.mixIn(e3), t4.hasOwnProperty("init") && this.init !== t4.init || (t4.init = function() {
          t4.$super.init.apply(this, arguments);
        }), t4.init.prototype = t4, t4.$super = this, t4;
      }, create: function() {
        var e3 = this.extend();
        return e3.init.apply(e3, arguments), e3;
      }, init: function() {
      }, mixIn: function(e3) {
        for (var t4 in e3)
          e3.hasOwnProperty(t4) && (this[t4] = e3[t4]);
        e3.hasOwnProperty("toString") && (this.toString = e3.toString);
      }, clone: function() {
        return this.init.prototype.extend(this);
      } }, o2 = r2.WordArray = i2.extend({ init: function(e3, n4) {
        e3 = this.words = e3 || [], this.sigBytes = n4 != t3 ? n4 : 4 * e3.length;
      }, toString: function(e3) {
        return (e3 || c2).stringify(this);
      }, concat: function(e3) {
        var t4 = this.words, n4 = e3.words, s3 = this.sigBytes, r3 = e3.sigBytes;
        if (this.clamp(), s3 % 4)
          for (var i3 = 0; i3 < r3; i3++) {
            var o3 = n4[i3 >>> 2] >>> 24 - i3 % 4 * 8 & 255;
            t4[s3 + i3 >>> 2] |= o3 << 24 - (s3 + i3) % 4 * 8;
          }
        else
          for (i3 = 0; i3 < r3; i3 += 4)
            t4[s3 + i3 >>> 2] = n4[i3 >>> 2];
        return this.sigBytes += r3, this;
      }, clamp: function() {
        var t4 = this.words, n4 = this.sigBytes;
        t4[n4 >>> 2] &= 4294967295 << 32 - n4 % 4 * 8, t4.length = e2.ceil(n4 / 4);
      }, clone: function() {
        var e3 = i2.clone.call(this);
        return e3.words = this.words.slice(0), e3;
      }, random: function(t4) {
        for (var n4, s3 = [], r3 = function(t5) {
          t5 = t5;
          var n5 = 987654321, s4 = 4294967295;
          return function() {
            var r4 = ((n5 = 36969 * (65535 & n5) + (n5 >> 16) & s4) << 16) + (t5 = 18e3 * (65535 & t5) + (t5 >> 16) & s4) & s4;
            return r4 /= 4294967296, (r4 += 0.5) * (e2.random() > 0.5 ? 1 : -1);
          };
        }, i3 = 0; i3 < t4; i3 += 4) {
          var a3 = r3(4294967296 * (n4 || e2.random()));
          n4 = 987654071 * a3(), s3.push(4294967296 * a3() | 0);
        }
        return new o2.init(s3, t4);
      } }), a2 = s2.enc = {}, c2 = a2.Hex = { stringify: function(e3) {
        for (var t4 = e3.words, n4 = e3.sigBytes, s3 = [], r3 = 0; r3 < n4; r3++) {
          var i3 = t4[r3 >>> 2] >>> 24 - r3 % 4 * 8 & 255;
          s3.push((i3 >>> 4).toString(16)), s3.push((15 & i3).toString(16));
        }
        return s3.join("");
      }, parse: function(e3) {
        for (var t4 = e3.length, n4 = [], s3 = 0; s3 < t4; s3 += 2)
          n4[s3 >>> 3] |= parseInt(e3.substr(s3, 2), 16) << 24 - s3 % 8 * 4;
        return new o2.init(n4, t4 / 2);
      } }, u2 = a2.Latin1 = { stringify: function(e3) {
        for (var t4 = e3.words, n4 = e3.sigBytes, s3 = [], r3 = 0; r3 < n4; r3++) {
          var i3 = t4[r3 >>> 2] >>> 24 - r3 % 4 * 8 & 255;
          s3.push(String.fromCharCode(i3));
        }
        return s3.join("");
      }, parse: function(e3) {
        for (var t4 = e3.length, n4 = [], s3 = 0; s3 < t4; s3++)
          n4[s3 >>> 2] |= (255 & e3.charCodeAt(s3)) << 24 - s3 % 4 * 8;
        return new o2.init(n4, t4);
      } }, l2 = a2.Utf8 = { stringify: function(e3) {
        try {
          return decodeURIComponent(escape(u2.stringify(e3)));
        } catch (e4) {
          throw new Error("Malformed UTF-8 data");
        }
      }, parse: function(e3) {
        return u2.parse(unescape(encodeURIComponent(e3)));
      } }, h2 = r2.BufferedBlockAlgorithm = i2.extend({ reset: function() {
        this._data = new o2.init(), this._nDataBytes = 0;
      }, _append: function(e3) {
        "string" == typeof e3 && (e3 = l2.parse(e3)), this._data.concat(e3), this._nDataBytes += e3.sigBytes;
      }, _process: function(t4) {
        var n4 = this._data, s3 = n4.words, r3 = n4.sigBytes, i3 = this.blockSize, a3 = r3 / (4 * i3), c3 = (a3 = t4 ? e2.ceil(a3) : e2.max((0 | a3) - this._minBufferSize, 0)) * i3, u3 = e2.min(4 * c3, r3);
        if (c3) {
          for (var l3 = 0; l3 < c3; l3 += i3)
            this._doProcessBlock(s3, l3);
          var h3 = s3.splice(0, c3);
          n4.sigBytes -= u3;
        }
        return new o2.init(h3, u3);
      }, clone: function() {
        var e3 = i2.clone.call(this);
        return e3._data = this._data.clone(), e3;
      }, _minBufferSize: 0 });
      r2.Hasher = h2.extend({ cfg: i2.extend(), init: function(e3) {
        this.cfg = this.cfg.extend(e3), this.reset();
      }, reset: function() {
        h2.reset.call(this), this._doReset();
      }, update: function(e3) {
        return this._append(e3), this._process(), this;
      }, finalize: function(e3) {
        return e3 && this._append(e3), this._doFinalize();
      }, blockSize: 16, _createHelper: function(e3) {
        return function(t4, n4) {
          return new e3.init(n4).finalize(t4);
        };
      }, _createHmacHelper: function(e3) {
        return function(t4, n4) {
          return new d2.HMAC.init(e3, n4).finalize(t4);
        };
      } });
      var d2 = s2.algo = {};
      return s2;
    }(Math), n2);
  }), i = r$1, o = (s(function(e, t2) {
    var n2;
    e.exports = (n2 = i, function(e2) {
      var t3 = n2, s2 = t3.lib, r2 = s2.WordArray, i2 = s2.Hasher, o2 = t3.algo, a2 = [];
      !function() {
        for (var t4 = 0; t4 < 64; t4++)
          a2[t4] = 4294967296 * e2.abs(e2.sin(t4 + 1)) | 0;
      }();
      var c2 = o2.MD5 = i2.extend({ _doReset: function() {
        this._hash = new r2.init([1732584193, 4023233417, 2562383102, 271733878]);
      }, _doProcessBlock: function(e3, t4) {
        for (var n3 = 0; n3 < 16; n3++) {
          var s3 = t4 + n3, r3 = e3[s3];
          e3[s3] = 16711935 & (r3 << 8 | r3 >>> 24) | 4278255360 & (r3 << 24 | r3 >>> 8);
        }
        var i3 = this._hash.words, o3 = e3[t4 + 0], c3 = e3[t4 + 1], f2 = e3[t4 + 2], p2 = e3[t4 + 3], g2 = e3[t4 + 4], m2 = e3[t4 + 5], y2 = e3[t4 + 6], _2 = e3[t4 + 7], w = e3[t4 + 8], v2 = e3[t4 + 9], S2 = e3[t4 + 10], k2 = e3[t4 + 11], I2 = e3[t4 + 12], b2 = e3[t4 + 13], T9 = e3[t4 + 14], A2 = e3[t4 + 15], C2 = i3[0], P2 = i3[1], E2 = i3[2], O2 = i3[3];
        C2 = u2(C2, P2, E2, O2, o3, 7, a2[0]), O2 = u2(O2, C2, P2, E2, c3, 12, a2[1]), E2 = u2(E2, O2, C2, P2, f2, 17, a2[2]), P2 = u2(P2, E2, O2, C2, p2, 22, a2[3]), C2 = u2(C2, P2, E2, O2, g2, 7, a2[4]), O2 = u2(O2, C2, P2, E2, m2, 12, a2[5]), E2 = u2(E2, O2, C2, P2, y2, 17, a2[6]), P2 = u2(P2, E2, O2, C2, _2, 22, a2[7]), C2 = u2(C2, P2, E2, O2, w, 7, a2[8]), O2 = u2(O2, C2, P2, E2, v2, 12, a2[9]), E2 = u2(E2, O2, C2, P2, S2, 17, a2[10]), P2 = u2(P2, E2, O2, C2, k2, 22, a2[11]), C2 = u2(C2, P2, E2, O2, I2, 7, a2[12]), O2 = u2(O2, C2, P2, E2, b2, 12, a2[13]), E2 = u2(E2, O2, C2, P2, T9, 17, a2[14]), C2 = l2(C2, P2 = u2(P2, E2, O2, C2, A2, 22, a2[15]), E2, O2, c3, 5, a2[16]), O2 = l2(O2, C2, P2, E2, y2, 9, a2[17]), E2 = l2(E2, O2, C2, P2, k2, 14, a2[18]), P2 = l2(P2, E2, O2, C2, o3, 20, a2[19]), C2 = l2(C2, P2, E2, O2, m2, 5, a2[20]), O2 = l2(O2, C2, P2, E2, S2, 9, a2[21]), E2 = l2(E2, O2, C2, P2, A2, 14, a2[22]), P2 = l2(P2, E2, O2, C2, g2, 20, a2[23]), C2 = l2(C2, P2, E2, O2, v2, 5, a2[24]), O2 = l2(O2, C2, P2, E2, T9, 9, a2[25]), E2 = l2(E2, O2, C2, P2, p2, 14, a2[26]), P2 = l2(P2, E2, O2, C2, w, 20, a2[27]), C2 = l2(C2, P2, E2, O2, b2, 5, a2[28]), O2 = l2(O2, C2, P2, E2, f2, 9, a2[29]), E2 = l2(E2, O2, C2, P2, _2, 14, a2[30]), C2 = h2(C2, P2 = l2(P2, E2, O2, C2, I2, 20, a2[31]), E2, O2, m2, 4, a2[32]), O2 = h2(O2, C2, P2, E2, w, 11, a2[33]), E2 = h2(E2, O2, C2, P2, k2, 16, a2[34]), P2 = h2(P2, E2, O2, C2, T9, 23, a2[35]), C2 = h2(C2, P2, E2, O2, c3, 4, a2[36]), O2 = h2(O2, C2, P2, E2, g2, 11, a2[37]), E2 = h2(E2, O2, C2, P2, _2, 16, a2[38]), P2 = h2(P2, E2, O2, C2, S2, 23, a2[39]), C2 = h2(C2, P2, E2, O2, b2, 4, a2[40]), O2 = h2(O2, C2, P2, E2, o3, 11, a2[41]), E2 = h2(E2, O2, C2, P2, p2, 16, a2[42]), P2 = h2(P2, E2, O2, C2, y2, 23, a2[43]), C2 = h2(C2, P2, E2, O2, v2, 4, a2[44]), O2 = h2(O2, C2, P2, E2, I2, 11, a2[45]), E2 = h2(E2, O2, C2, P2, A2, 16, a2[46]), C2 = d2(C2, P2 = h2(P2, E2, O2, C2, f2, 23, a2[47]), E2, O2, o3, 6, a2[48]), O2 = d2(O2, C2, P2, E2, _2, 10, a2[49]), E2 = d2(E2, O2, C2, P2, T9, 15, a2[50]), P2 = d2(P2, E2, O2, C2, m2, 21, a2[51]), C2 = d2(C2, P2, E2, O2, I2, 6, a2[52]), O2 = d2(O2, C2, P2, E2, p2, 10, a2[53]), E2 = d2(E2, O2, C2, P2, S2, 15, a2[54]), P2 = d2(P2, E2, O2, C2, c3, 21, a2[55]), C2 = d2(C2, P2, E2, O2, w, 6, a2[56]), O2 = d2(O2, C2, P2, E2, A2, 10, a2[57]), E2 = d2(E2, O2, C2, P2, y2, 15, a2[58]), P2 = d2(P2, E2, O2, C2, b2, 21, a2[59]), C2 = d2(C2, P2, E2, O2, g2, 6, a2[60]), O2 = d2(O2, C2, P2, E2, k2, 10, a2[61]), E2 = d2(E2, O2, C2, P2, f2, 15, a2[62]), P2 = d2(P2, E2, O2, C2, v2, 21, a2[63]), i3[0] = i3[0] + C2 | 0, i3[1] = i3[1] + P2 | 0, i3[2] = i3[2] + E2 | 0, i3[3] = i3[3] + O2 | 0;
      }, _doFinalize: function() {
        var t4 = this._data, n3 = t4.words, s3 = 8 * this._nDataBytes, r3 = 8 * t4.sigBytes;
        n3[r3 >>> 5] |= 128 << 24 - r3 % 32;
        var i3 = e2.floor(s3 / 4294967296), o3 = s3;
        n3[15 + (r3 + 64 >>> 9 << 4)] = 16711935 & (i3 << 8 | i3 >>> 24) | 4278255360 & (i3 << 24 | i3 >>> 8), n3[14 + (r3 + 64 >>> 9 << 4)] = 16711935 & (o3 << 8 | o3 >>> 24) | 4278255360 & (o3 << 24 | o3 >>> 8), t4.sigBytes = 4 * (n3.length + 1), this._process();
        for (var a3 = this._hash, c3 = a3.words, u3 = 0; u3 < 4; u3++) {
          var l3 = c3[u3];
          c3[u3] = 16711935 & (l3 << 8 | l3 >>> 24) | 4278255360 & (l3 << 24 | l3 >>> 8);
        }
        return a3;
      }, clone: function() {
        var e3 = i2.clone.call(this);
        return e3._hash = this._hash.clone(), e3;
      } });
      function u2(e3, t4, n3, s3, r3, i3, o3) {
        var a3 = e3 + (t4 & n3 | ~t4 & s3) + r3 + o3;
        return (a3 << i3 | a3 >>> 32 - i3) + t4;
      }
      function l2(e3, t4, n3, s3, r3, i3, o3) {
        var a3 = e3 + (t4 & s3 | n3 & ~s3) + r3 + o3;
        return (a3 << i3 | a3 >>> 32 - i3) + t4;
      }
      function h2(e3, t4, n3, s3, r3, i3, o3) {
        var a3 = e3 + (t4 ^ n3 ^ s3) + r3 + o3;
        return (a3 << i3 | a3 >>> 32 - i3) + t4;
      }
      function d2(e3, t4, n3, s3, r3, i3, o3) {
        var a3 = e3 + (n3 ^ (t4 | ~s3)) + r3 + o3;
        return (a3 << i3 | a3 >>> 32 - i3) + t4;
      }
      t3.MD5 = i2._createHelper(c2), t3.HmacMD5 = i2._createHmacHelper(c2);
    }(Math), n2.MD5);
  }), s(function(e, t2) {
    var n2;
    e.exports = (n2 = i, void function() {
      var e2 = n2, t3 = e2.lib.Base, s2 = e2.enc.Utf8;
      e2.algo.HMAC = t3.extend({ init: function(e3, t4) {
        e3 = this._hasher = new e3.init(), "string" == typeof t4 && (t4 = s2.parse(t4));
        var n3 = e3.blockSize, r2 = 4 * n3;
        t4.sigBytes > r2 && (t4 = e3.finalize(t4)), t4.clamp();
        for (var i2 = this._oKey = t4.clone(), o2 = this._iKey = t4.clone(), a2 = i2.words, c2 = o2.words, u2 = 0; u2 < n3; u2++)
          a2[u2] ^= 1549556828, c2[u2] ^= 909522486;
        i2.sigBytes = o2.sigBytes = r2, this.reset();
      }, reset: function() {
        var e3 = this._hasher;
        e3.reset(), e3.update(this._iKey);
      }, update: function(e3) {
        return this._hasher.update(e3), this;
      }, finalize: function(e3) {
        var t4 = this._hasher, n3 = t4.finalize(e3);
        return t4.reset(), t4.finalize(this._oKey.clone().concat(n3));
      } });
    }());
  }), s(function(e, t2) {
    e.exports = i.HmacMD5;
  })), a = s(function(e, t2) {
    e.exports = i.enc.Utf8;
  }), c = s(function(e, t2) {
    var n2;
    e.exports = (n2 = i, function() {
      var e2 = n2, t3 = e2.lib.WordArray;
      function s2(e3, n3, s3) {
        for (var r2 = [], i2 = 0, o2 = 0; o2 < n3; o2++)
          if (o2 % 4) {
            var a2 = s3[e3.charCodeAt(o2 - 1)] << o2 % 4 * 2, c2 = s3[e3.charCodeAt(o2)] >>> 6 - o2 % 4 * 2;
            r2[i2 >>> 2] |= (a2 | c2) << 24 - i2 % 4 * 8, i2++;
          }
        return t3.create(r2, i2);
      }
      e2.enc.Base64 = { stringify: function(e3) {
        var t4 = e3.words, n3 = e3.sigBytes, s3 = this._map;
        e3.clamp();
        for (var r2 = [], i2 = 0; i2 < n3; i2 += 3)
          for (var o2 = (t4[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255) << 16 | (t4[i2 + 1 >>> 2] >>> 24 - (i2 + 1) % 4 * 8 & 255) << 8 | t4[i2 + 2 >>> 2] >>> 24 - (i2 + 2) % 4 * 8 & 255, a2 = 0; a2 < 4 && i2 + 0.75 * a2 < n3; a2++)
            r2.push(s3.charAt(o2 >>> 6 * (3 - a2) & 63));
        var c2 = s3.charAt(64);
        if (c2)
          for (; r2.length % 4; )
            r2.push(c2);
        return r2.join("");
      }, parse: function(e3) {
        var t4 = e3.length, n3 = this._map, r2 = this._reverseMap;
        if (!r2) {
          r2 = this._reverseMap = [];
          for (var i2 = 0; i2 < n3.length; i2++)
            r2[n3.charCodeAt(i2)] = i2;
        }
        var o2 = n3.charAt(64);
        if (o2) {
          var a2 = e3.indexOf(o2);
          -1 !== a2 && (t4 = a2);
        }
        return s2(e3, t4, r2);
      }, _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=" };
    }(), n2.enc.Base64);
  });
  const u = "FUNCTION", l = "OBJECT", h = "CLIENT_DB";
  function d(e) {
    return Object.prototype.toString.call(e).slice(8, -1).toLowerCase();
  }
  function f$1(e) {
    return "object" === d(e);
  }
  function p(e) {
    return "function" == typeof e;
  }
  function g(e) {
    return function() {
      try {
        return e.apply(e, arguments);
      } catch (e2) {
        console.error(e2);
      }
    };
  }
  function m(e) {
    return e && "string" == typeof e ? JSON.parse(e) : e;
  }
  const y = true, _ = "app", v = m([]);
  let S$1;
  S$1 = _;
  const k = m(""), I = m("[]") || [];
  let T = "";
  try {
    T = "";
  } catch (e) {
  }
  let A = {};
  function C(e, t2 = {}) {
    var n2, s2;
    return n2 = A, s2 = e, Object.prototype.hasOwnProperty.call(n2, s2) || (A[e] = t2), A[e];
  }
  "app" === S$1 && (A = uni._globalUniCloudObj ? uni._globalUniCloudObj : uni._globalUniCloudObj = {});
  const P = ["invoke", "success", "fail", "complete"], E = C("_globalUniCloudInterceptor");
  function O(e, t2) {
    E[e] || (E[e] = {}), f$1(t2) && Object.keys(t2).forEach((n2) => {
      P.indexOf(n2) > -1 && function(e2, t3, n3) {
        let s2 = E[e2][t3];
        s2 || (s2 = E[e2][t3] = []), -1 === s2.indexOf(n3) && p(n3) && s2.push(n3);
      }(e, n2, t2[n2]);
    });
  }
  function x(e, t2) {
    E[e] || (E[e] = {}), f$1(t2) ? Object.keys(t2).forEach((n2) => {
      P.indexOf(n2) > -1 && function(e2, t3, n3) {
        const s2 = E[e2][t3];
        if (!s2)
          return;
        const r2 = s2.indexOf(n3);
        r2 > -1 && s2.splice(r2, 1);
      }(e, n2, t2[n2]);
    }) : delete E[e];
  }
  function U(e, t2) {
    return e && 0 !== e.length ? e.reduce((e2, n2) => e2.then(() => n2(t2)), Promise.resolve()) : Promise.resolve();
  }
  function R(e, t2) {
    return E[e] && E[e][t2] || [];
  }
  function L(e) {
    O("callObject", e);
  }
  const N$1 = C("_globalUniCloudListener"), D = "response", F = "needLogin", q = "refreshToken", K = "clientdb", M = "cloudfunction", j = "cloudobject";
  function B(e) {
    return N$1[e] || (N$1[e] = []), N$1[e];
  }
  function $(e, t2) {
    const n2 = B(e);
    n2.includes(t2) || n2.push(t2);
  }
  function W(e, t2) {
    const n2 = B(e), s2 = n2.indexOf(t2);
    -1 !== s2 && n2.splice(s2, 1);
  }
  function z(e, t2) {
    const n2 = B(e);
    for (let e2 = 0; e2 < n2.length; e2++) {
      (0, n2[e2])(t2);
    }
  }
  let J, H = false;
  function G() {
    return J || (J = new Promise((e) => {
      H && e(), function t2() {
        if ("function" == typeof getCurrentPages) {
          const t3 = getCurrentPages();
          t3 && t3[0] && (H = true, e());
        }
        H || setTimeout(() => {
          t2();
        }, 30);
      }();
    }), J);
  }
  function V(e) {
    const t2 = {};
    for (const n2 in e) {
      const s2 = e[n2];
      p(s2) && (t2[n2] = g(s2));
    }
    return t2;
  }
  function Y(e, t2) {
    return t2 ? function(n2) {
      let s2 = false;
      if ("callFunction" === t2) {
        const e2 = n2 && n2.type || u;
        s2 = e2 !== u;
      }
      const r2 = "callFunction" === t2 && !s2;
      let i2;
      i2 = this.isReady ? Promise.resolve() : this.initUniCloud, n2 = n2 || {};
      const { success: o2, fail: a2, complete: c2 } = V(n2), l2 = i2.then(() => s2 ? Promise.resolve() : U(R(t2, "invoke"), n2)).then(() => e.call(this, n2)).then((e2) => s2 ? Promise.resolve(e2) : U(R(t2, "success"), e2).then(() => U(R(t2, "complete"), e2)).then(() => (r2 && z(D, { type: M, content: e2 }), Promise.resolve(e2))), (e2) => s2 ? Promise.reject(e2) : U(R(t2, "fail"), e2).then(() => U(R(t2, "complete"), e2)).then(() => (z(D, { type: M, content: e2 }), Promise.reject(e2))));
      if (!(o2 || a2 || c2))
        return l2;
      l2.then((e2) => {
        o2 && o2(e2), c2 && c2(e2), r2 && z(D, { type: M, content: e2 });
      }, (e2) => {
        a2 && a2(e2), c2 && c2(e2), r2 && z(D, { type: M, content: e2 });
      });
    } : function(t3) {
      t3 = t3 || {};
      const { success: n2, fail: s2, complete: r2 } = V(t3);
      if (!(n2 || s2 || r2))
        return e.call(this, t3);
      e.call(this, t3).then((e2) => {
        n2 && n2(e2), r2 && r2(e2);
      }, (e2) => {
        s2 && s2(e2), r2 && r2(e2);
      });
    };
  }
  class Q extends Error {
    constructor(e) {
      super(e.message), this.errMsg = e.message || e.errMsg || "unknown system error", this.code = this.errCode = e.code || e.errCode || "SYSTEM_ERROR", this.errSubject = this.subject = e.subject || e.errSubject, this.cause = e.cause, this.requestId = e.requestId;
    }
    toJson(e = 0) {
      if (!(e >= 10))
        return e++, { errCode: this.errCode, errMsg: this.errMsg, errSubject: this.errSubject, cause: this.cause && this.cause.toJson ? this.cause.toJson(e) : this.cause };
    }
  }
  var X = { request: (e) => uni.request(e), uploadFile: (e) => uni.uploadFile(e), setStorageSync: (e, t2) => uni.setStorageSync(e, t2), getStorageSync: (e) => uni.getStorageSync(e), removeStorageSync: (e) => uni.removeStorageSync(e), clearStorageSync: () => uni.clearStorageSync() };
  function Z(e) {
    return e && Z(e.__v_raw) || e;
  }
  function ee() {
    return { token: X.getStorageSync("uni_id_token") || X.getStorageSync("uniIdToken"), tokenExpired: X.getStorageSync("uni_id_token_expired") };
  }
  function te({ token: e, tokenExpired: t2 } = {}) {
    e && X.setStorageSync("uni_id_token", e), t2 && X.setStorageSync("uni_id_token_expired", t2);
  }
  function ne() {
    if ("web" !== S$1)
      return;
    uni.getStorageSync("__LAST_DCLOUD_APPID") !== T && (uni.setStorageSync("__LAST_DCLOUD_APPID", T), console.warn("\u68C0\u6D4B\u5230\u5F53\u524D\u9879\u76EE\u4E0E\u4E0A\u6B21\u8FD0\u884C\u5230\u6B64\u7AEF\u53E3\u7684\u9879\u76EE\u4E0D\u4E00\u81F4\uFF0C\u81EA\u52A8\u6E05\u7406uni-id\u4FDD\u5B58\u7684token\u4FE1\u606F\uFF08\u4EC5\u5F00\u53D1\u8C03\u8BD5\u65F6\u751F\u6548\uFF09"), X.removeStorageSync("uni_id_token"), X.removeStorageSync("uniIdToken"), X.removeStorageSync("uni_id_token_expired"));
  }
  let se, re;
  function ie() {
    return se || (se = uni.getSystemInfoSync()), se;
  }
  function oe() {
    let e, t2;
    try {
      if (uni.getLaunchOptionsSync) {
        if (uni.getLaunchOptionsSync.toString().indexOf("not yet implemented") > -1)
          return;
        const { scene: n2, channel: s2 } = uni.getLaunchOptionsSync();
        e = s2, t2 = n2;
      }
    } catch (e2) {
    }
    return { channel: e, scene: t2 };
  }
  function ae() {
    const e = uni.getLocale && uni.getLocale() || "en";
    if (re)
      return { ...re, locale: e, LOCALE: e };
    const t2 = ie(), { deviceId: n2, osName: s2, uniPlatform: r2, appId: i2 } = t2, o2 = ["pixelRatio", "brand", "model", "system", "language", "version", "platform", "host", "SDKVersion", "swanNativeVersion", "app", "AppPlatform", "fontSizeSetting"];
    for (let e2 = 0; e2 < o2.length; e2++) {
      delete t2[o2[e2]];
    }
    return re = { PLATFORM: r2, OS: s2, APPID: i2, DEVICEID: n2, ...oe(), ...t2 }, { ...re, locale: e, LOCALE: e };
  }
  var ce = { sign: function(e, t2) {
    let n2 = "";
    return Object.keys(e).sort().forEach(function(t3) {
      e[t3] && (n2 = n2 + "&" + t3 + "=" + e[t3]);
    }), n2 = n2.slice(1), o(n2, t2).toString();
  }, wrappedRequest: function(e, t2) {
    return new Promise((n2, s2) => {
      t2(Object.assign(e, { complete(e2) {
        e2 || (e2 = {}), "web" === S$1 && e2.errMsg && 0 === e2.errMsg.indexOf("request:fail") && console.warn("\u53D1\u5E03H5\uFF0C\u9700\u8981\u5728uniCloud\u540E\u53F0\u64CD\u4F5C\uFF0C\u7ED1\u5B9A\u5B89\u5168\u57DF\u540D\uFF0C\u5426\u5219\u4F1A\u56E0\u4E3A\u8DE8\u57DF\u95EE\u9898\u800C\u65E0\u6CD5\u8BBF\u95EE\u3002\u6559\u7A0B\u53C2\u8003\uFF1Ahttps://uniapp.dcloud.io/uniCloud/quickstart?id=useinh5");
        const t3 = e2.data && e2.data.header && e2.data.header["x-serverless-request-id"] || e2.header && e2.header["request-id"];
        if (!e2.statusCode || e2.statusCode >= 400)
          return s2(new Q({ code: "SYS_ERR", message: e2.errMsg || "request:fail", requestId: t3 }));
        const r2 = e2.data;
        if (r2.error)
          return s2(new Q({ code: r2.error.code, message: r2.error.message, requestId: t3 }));
        r2.result = r2.data, r2.requestId = t3, delete r2.data, n2(r2);
      } }));
    });
  }, toBase64: function(e) {
    return c.stringify(a.parse(e));
  } }, ue = { "uniCloud.init.paramRequired": "{param} required", "uniCloud.uploadFile.fileError": "filePath should be instance of File" };
  const { t: le } = initVueI18n({ "zh-Hans": { "uniCloud.init.paramRequired": "\u7F3A\u5C11\u53C2\u6570\uFF1A{param}", "uniCloud.uploadFile.fileError": "filePath\u5E94\u4E3AFile\u5BF9\u8C61" }, "zh-Hant": { "uniCloud.init.paramRequired": "\u7F3A\u5C11\u53C2\u6570\uFF1A{param}", "uniCloud.uploadFile.fileError": "filePath\u5E94\u4E3AFile\u5BF9\u8C61" }, en: ue, fr: { "uniCloud.init.paramRequired": "{param} required", "uniCloud.uploadFile.fileError": "filePath should be instance of File" }, es: { "uniCloud.init.paramRequired": "{param} required", "uniCloud.uploadFile.fileError": "filePath should be instance of File" }, ja: ue }, "zh-Hans");
  var he = class {
    constructor(e) {
      ["spaceId", "clientSecret"].forEach((t2) => {
        if (!Object.prototype.hasOwnProperty.call(e, t2))
          throw new Error(le("uniCloud.init.paramRequired", { param: t2 }));
      }), this.config = Object.assign({}, { endpoint: "https://api.bspapp.com" }, e), this.config.provider = "aliyun", this.config.requestUrl = this.config.endpoint + "/client", this.config.envType = this.config.envType || "public", this.config.accessTokenKey = "access_token_" + this.config.spaceId, this.adapter = X, this._getAccessTokenPromise = null, this._getAccessTokenPromiseStatus = null;
    }
    get hasAccessToken() {
      return !!this.accessToken;
    }
    setAccessToken(e) {
      this.accessToken = e;
    }
    requestWrapped(e) {
      return ce.wrappedRequest(e, this.adapter.request);
    }
    requestAuth(e) {
      return this.requestWrapped(e);
    }
    request(e, t2) {
      return Promise.resolve().then(() => this.hasAccessToken ? t2 ? this.requestWrapped(e) : this.requestWrapped(e).catch((t3) => new Promise((e2, n2) => {
        !t3 || "GATEWAY_INVALID_TOKEN" !== t3.code && "InvalidParameter.InvalidToken" !== t3.code ? n2(t3) : e2();
      }).then(() => this.getAccessToken()).then(() => {
        const t4 = this.rebuildRequest(e);
        return this.request(t4, true);
      })) : this.getAccessToken().then(() => {
        const t3 = this.rebuildRequest(e);
        return this.request(t3, true);
      }));
    }
    rebuildRequest(e) {
      const t2 = Object.assign({}, e);
      return t2.data.token = this.accessToken, t2.header["x-basement-token"] = this.accessToken, t2.header["x-serverless-sign"] = ce.sign(t2.data, this.config.clientSecret), t2;
    }
    setupRequest(e, t2) {
      const n2 = Object.assign({}, e, { spaceId: this.config.spaceId, timestamp: Date.now() }), s2 = { "Content-Type": "application/json" };
      return "auth" !== t2 && (n2.token = this.accessToken, s2["x-basement-token"] = this.accessToken), s2["x-serverless-sign"] = ce.sign(n2, this.config.clientSecret), { url: this.config.requestUrl, method: "POST", data: n2, dataType: "json", header: s2 };
    }
    getAccessToken() {
      if ("pending" === this._getAccessTokenPromiseStatus)
        return this._getAccessTokenPromise;
      this._getAccessTokenPromiseStatus = "pending";
      return this._getAccessTokenPromise = this.requestAuth(this.setupRequest({ method: "serverless.auth.user.anonymousAuthorize", params: "{}" }, "auth")).then((e) => new Promise((t2, n2) => {
        e.result && e.result.accessToken ? (this.setAccessToken(e.result.accessToken), this._getAccessTokenPromiseStatus = "fulfilled", t2(this.accessToken)) : (this._getAccessTokenPromiseStatus = "rejected", n2(new Q({ code: "AUTH_FAILED", message: "\u83B7\u53D6accessToken\u5931\u8D25" })));
      }), (e) => (this._getAccessTokenPromiseStatus = "rejected", Promise.reject(e))), this._getAccessTokenPromise;
    }
    authorize() {
      this.getAccessToken();
    }
    callFunction(e) {
      const t2 = { method: "serverless.function.runtime.invoke", params: JSON.stringify({ functionTarget: e.name, functionArgs: e.data || {} }) };
      return this.request(this.setupRequest(t2));
    }
    getOSSUploadOptionsFromPath(e) {
      const t2 = { method: "serverless.file.resource.generateProximalSign", params: JSON.stringify(e) };
      return this.request(this.setupRequest(t2));
    }
    uploadFileToOSS({ url: e, formData: t2, name: n2, filePath: s2, fileType: r2, onUploadProgress: i2 }) {
      return new Promise((o2, a2) => {
        const c2 = this.adapter.uploadFile({ url: e, formData: t2, name: n2, filePath: s2, fileType: r2, header: { "X-OSS-server-side-encrpytion": "AES256" }, success(e2) {
          e2 && e2.statusCode < 400 ? o2(e2) : a2(new Q({ code: "UPLOAD_FAILED", message: "\u6587\u4EF6\u4E0A\u4F20\u5931\u8D25" }));
        }, fail(e2) {
          a2(new Q({ code: e2.code || "UPLOAD_FAILED", message: e2.message || e2.errMsg || "\u6587\u4EF6\u4E0A\u4F20\u5931\u8D25" }));
        } });
        "function" == typeof i2 && c2 && "function" == typeof c2.onProgressUpdate && c2.onProgressUpdate((e2) => {
          i2({ loaded: e2.totalBytesSent, total: e2.totalBytesExpectedToSend });
        });
      });
    }
    reportOSSUpload(e) {
      const t2 = { method: "serverless.file.resource.report", params: JSON.stringify(e) };
      return this.request(this.setupRequest(t2));
    }
    async uploadFile({ filePath: e, cloudPath: t2, fileType: n2 = "image", onUploadProgress: s2, config: r2 }) {
      if ("string" !== d(t2))
        throw new Q({ code: "INVALID_PARAM", message: "cloudPath\u5FC5\u987B\u4E3A\u5B57\u7B26\u4E32\u7C7B\u578B" });
      if (!(t2 = t2.trim()))
        throw new Q({ code: "CLOUDPATH_REQUIRED", message: "cloudPath\u4E0D\u53EF\u4E3A\u7A7A" });
      if (/:\/\//.test(t2))
        throw new Q({ code: "INVALID_PARAM", message: "cloudPath\u4E0D\u5408\u6CD5" });
      const i2 = r2 && r2.envType || this.config.envType, o2 = (await this.getOSSUploadOptionsFromPath({ env: i2, filename: t2 })).result, a2 = "https://" + o2.cdnDomain + "/" + o2.ossPath, { securityToken: c2, accessKeyId: u2, signature: l2, host: h2, ossPath: f2, id: p2, policy: g2, ossCallbackUrl: m2 } = o2, y2 = { "Cache-Control": "max-age=2592000", "Content-Disposition": "attachment", OSSAccessKeyId: u2, Signature: l2, host: h2, id: p2, key: f2, policy: g2, success_action_status: 200 };
      if (c2 && (y2["x-oss-security-token"] = c2), m2) {
        const e2 = JSON.stringify({ callbackUrl: m2, callbackBody: JSON.stringify({ fileId: p2, spaceId: this.config.spaceId }), callbackBodyType: "application/json" });
        y2.callback = ce.toBase64(e2);
      }
      const _2 = { url: "https://" + o2.host, formData: y2, fileName: "file", name: "file", filePath: e, fileType: n2 };
      if (await this.uploadFileToOSS(Object.assign({}, _2, { onUploadProgress: s2 })), m2)
        return { success: true, filePath: e, fileID: a2 };
      if ((await this.reportOSSUpload({ id: p2 })).success)
        return { success: true, filePath: e, fileID: a2 };
      throw new Q({ code: "UPLOAD_FAILED", message: "\u6587\u4EF6\u4E0A\u4F20\u5931\u8D25" });
    }
    getTempFileURL({ fileList: e } = {}) {
      return new Promise((t2, n2) => {
        Array.isArray(e) && 0 !== e.length || n2(new Q({ code: "INVALID_PARAM", message: "fileList\u7684\u5143\u7D20\u5FC5\u987B\u662F\u975E\u7A7A\u7684\u5B57\u7B26\u4E32" })), t2({ fileList: e.map((e2) => ({ fileID: e2, tempFileURL: e2 })) });
      });
    }
    async getFileInfo({ fileList: e } = {}) {
      if (!Array.isArray(e) || 0 === e.length)
        throw new Q({ code: "INVALID_PARAM", message: "fileList\u7684\u5143\u7D20\u5FC5\u987B\u662F\u975E\u7A7A\u7684\u5B57\u7B26\u4E32" });
      const t2 = { method: "serverless.file.resource.info", params: JSON.stringify({ id: e.map((e2) => e2.split("?")[0]).join(",") }) };
      return { fileList: (await this.request(this.setupRequest(t2))).result };
    }
  };
  var de = { init(e) {
    const t2 = new he(e), n2 = { signInAnonymously: function() {
      return t2.authorize();
    }, getLoginState: function() {
      return Promise.resolve(false);
    } };
    return t2.auth = function() {
      return n2;
    }, t2.customAuth = t2.auth, t2;
  } };
  const fe = "undefined" != typeof location && "http:" === location.protocol ? "http:" : "https:";
  var pe;
  !function(e) {
    e.local = "local", e.none = "none", e.session = "session";
  }(pe || (pe = {}));
  var ge = function() {
  };
  const me = () => {
    let e;
    if (!Promise) {
      e = () => {
      }, e.promise = {};
      const t3 = () => {
        throw new Q({ message: 'Your Node runtime does support ES6 Promises. Set "global.Promise" to your preferred implementation of promises.' });
      };
      return Object.defineProperty(e.promise, "then", { get: t3 }), Object.defineProperty(e.promise, "catch", { get: t3 }), e;
    }
    const t2 = new Promise((t3, n2) => {
      e = (e2, s2) => e2 ? n2(e2) : t3(s2);
    });
    return e.promise = t2, e;
  };
  function ye(e) {
    return void 0 === e;
  }
  function _e(e) {
    return "[object Null]" === Object.prototype.toString.call(e);
  }
  var we;
  function ve(e) {
    const t2 = (n2 = e, "[object Array]" === Object.prototype.toString.call(n2) ? e : [e]);
    var n2;
    for (const e2 of t2) {
      const { isMatch: t3, genAdapter: n3, runtime: s2 } = e2;
      if (t3())
        return { adapter: n3(), runtime: s2 };
    }
  }
  !function(e) {
    e.WEB = "web", e.WX_MP = "wx_mp";
  }(we || (we = {}));
  const Se = { adapter: null, runtime: void 0 }, ke = ["anonymousUuidKey"];
  class Ie extends ge {
    constructor() {
      super(), Se.adapter.root.tcbObject || (Se.adapter.root.tcbObject = {});
    }
    setItem(e, t2) {
      Se.adapter.root.tcbObject[e] = t2;
    }
    getItem(e) {
      return Se.adapter.root.tcbObject[e];
    }
    removeItem(e) {
      delete Se.adapter.root.tcbObject[e];
    }
    clear() {
      delete Se.adapter.root.tcbObject;
    }
  }
  function be(e, t2) {
    switch (e) {
      case "local":
        return t2.localStorage || new Ie();
      case "none":
        return new Ie();
      default:
        return t2.sessionStorage || new Ie();
    }
  }
  class Te {
    constructor(e) {
      if (!this._storage) {
        this._persistence = Se.adapter.primaryStorage || e.persistence, this._storage = be(this._persistence, Se.adapter);
        const t2 = `access_token_${e.env}`, n2 = `access_token_expire_${e.env}`, s2 = `refresh_token_${e.env}`, r2 = `anonymous_uuid_${e.env}`, i2 = `login_type_${e.env}`, o2 = `user_info_${e.env}`;
        this.keys = { accessTokenKey: t2, accessTokenExpireKey: n2, refreshTokenKey: s2, anonymousUuidKey: r2, loginTypeKey: i2, userInfoKey: o2 };
      }
    }
    updatePersistence(e) {
      if (e === this._persistence)
        return;
      const t2 = "local" === this._persistence;
      this._persistence = e;
      const n2 = be(e, Se.adapter);
      for (const e2 in this.keys) {
        const s2 = this.keys[e2];
        if (t2 && ke.includes(e2))
          continue;
        const r2 = this._storage.getItem(s2);
        ye(r2) || _e(r2) || (n2.setItem(s2, r2), this._storage.removeItem(s2));
      }
      this._storage = n2;
    }
    setStore(e, t2, n2) {
      if (!this._storage)
        return;
      const s2 = { version: n2 || "localCachev1", content: t2 }, r2 = JSON.stringify(s2);
      try {
        this._storage.setItem(e, r2);
      } catch (e2) {
        throw e2;
      }
    }
    getStore(e, t2) {
      try {
        if (!this._storage)
          return;
      } catch (e2) {
        return "";
      }
      t2 = t2 || "localCachev1";
      const n2 = this._storage.getItem(e);
      if (!n2)
        return "";
      if (n2.indexOf(t2) >= 0) {
        return JSON.parse(n2).content;
      }
      return "";
    }
    removeStore(e) {
      this._storage.removeItem(e);
    }
  }
  const Ae = {}, Ce = {};
  function Pe(e) {
    return Ae[e];
  }
  class Ee {
    constructor(e, t2) {
      this.data = t2 || null, this.name = e;
    }
  }
  class Oe extends Ee {
    constructor(e, t2) {
      super("error", { error: e, data: t2 }), this.error = e;
    }
  }
  const xe = new class {
    constructor() {
      this._listeners = {};
    }
    on(e, t2) {
      return function(e2, t3, n2) {
        n2[e2] = n2[e2] || [], n2[e2].push(t3);
      }(e, t2, this._listeners), this;
    }
    off(e, t2) {
      return function(e2, t3, n2) {
        if (n2 && n2[e2]) {
          const s2 = n2[e2].indexOf(t3);
          -1 !== s2 && n2[e2].splice(s2, 1);
        }
      }(e, t2, this._listeners), this;
    }
    fire(e, t2) {
      if (e instanceof Oe)
        return console.error(e.error), this;
      const n2 = "string" == typeof e ? new Ee(e, t2 || {}) : e;
      const s2 = n2.name;
      if (this._listens(s2)) {
        n2.target = this;
        const e2 = this._listeners[s2] ? [...this._listeners[s2]] : [];
        for (const t3 of e2)
          t3.call(this, n2);
      }
      return this;
    }
    _listens(e) {
      return this._listeners[e] && this._listeners[e].length > 0;
    }
  }();
  function Ue(e, t2) {
    xe.on(e, t2);
  }
  function Re(e, t2 = {}) {
    xe.fire(e, t2);
  }
  function Le(e, t2) {
    xe.off(e, t2);
  }
  const Ne = "loginStateChanged", De = "loginStateExpire", Fe = "loginTypeChanged", qe = "anonymousConverted", Ke = "refreshAccessToken";
  var Me;
  !function(e) {
    e.ANONYMOUS = "ANONYMOUS", e.WECHAT = "WECHAT", e.WECHAT_PUBLIC = "WECHAT-PUBLIC", e.WECHAT_OPEN = "WECHAT-OPEN", e.CUSTOM = "CUSTOM", e.EMAIL = "EMAIL", e.USERNAME = "USERNAME", e.NULL = "NULL";
  }(Me || (Me = {}));
  const je = ["auth.getJwt", "auth.logout", "auth.signInWithTicket", "auth.signInAnonymously", "auth.signIn", "auth.fetchAccessTokenWithRefreshToken", "auth.signUpWithEmailAndPassword", "auth.activateEndUserMail", "auth.sendPasswordResetEmail", "auth.resetPasswordWithToken", "auth.isUsernameRegistered"], Be = { "X-SDK-Version": "1.3.5" };
  function $e(e, t2, n2) {
    const s2 = e[t2];
    e[t2] = function(t3) {
      const r2 = {}, i2 = {};
      n2.forEach((n3) => {
        const { data: s3, headers: o3 } = n3.call(e, t3);
        Object.assign(r2, s3), Object.assign(i2, o3);
      });
      const o2 = t3.data;
      return o2 && (() => {
        var e2;
        if (e2 = o2, "[object FormData]" !== Object.prototype.toString.call(e2))
          t3.data = { ...o2, ...r2 };
        else
          for (const e3 in r2)
            o2.append(e3, r2[e3]);
      })(), t3.headers = { ...t3.headers || {}, ...i2 }, s2.call(e, t3);
    };
  }
  function We() {
    const e = Math.random().toString(16).slice(2);
    return { data: { seqId: e }, headers: { ...Be, "x-seqid": e } };
  }
  class ze {
    constructor(e = {}) {
      var t2;
      this.config = e, this._reqClass = new Se.adapter.reqClass({ timeout: this.config.timeout, timeoutMsg: `\u8BF7\u6C42\u5728${this.config.timeout / 1e3}s\u5185\u672A\u5B8C\u6210\uFF0C\u5DF2\u4E2D\u65AD`, restrictedMethods: ["post"] }), this._cache = Pe(this.config.env), this._localCache = (t2 = this.config.env, Ce[t2]), $e(this._reqClass, "post", [We]), $e(this._reqClass, "upload", [We]), $e(this._reqClass, "download", [We]);
    }
    async post(e) {
      return await this._reqClass.post(e);
    }
    async upload(e) {
      return await this._reqClass.upload(e);
    }
    async download(e) {
      return await this._reqClass.download(e);
    }
    async refreshAccessToken() {
      let e, t2;
      this._refreshAccessTokenPromise || (this._refreshAccessTokenPromise = this._refreshAccessToken());
      try {
        e = await this._refreshAccessTokenPromise;
      } catch (e2) {
        t2 = e2;
      }
      if (this._refreshAccessTokenPromise = null, this._shouldRefreshAccessTokenHook = null, t2)
        throw t2;
      return e;
    }
    async _refreshAccessToken() {
      const { accessTokenKey: e, accessTokenExpireKey: t2, refreshTokenKey: n2, loginTypeKey: s2, anonymousUuidKey: r2 } = this._cache.keys;
      this._cache.removeStore(e), this._cache.removeStore(t2);
      let i2 = this._cache.getStore(n2);
      if (!i2)
        throw new Q({ message: "\u672A\u767B\u5F55CloudBase" });
      const o2 = { refresh_token: i2 }, a2 = await this.request("auth.fetchAccessTokenWithRefreshToken", o2);
      if (a2.data.code) {
        const { code: e2 } = a2.data;
        if ("SIGN_PARAM_INVALID" === e2 || "REFRESH_TOKEN_EXPIRED" === e2 || "INVALID_REFRESH_TOKEN" === e2) {
          if (this._cache.getStore(s2) === Me.ANONYMOUS && "INVALID_REFRESH_TOKEN" === e2) {
            const e3 = this._cache.getStore(r2), t3 = this._cache.getStore(n2), s3 = await this.send("auth.signInAnonymously", { anonymous_uuid: e3, refresh_token: t3 });
            return this.setRefreshToken(s3.refresh_token), this._refreshAccessToken();
          }
          Re(De), this._cache.removeStore(n2);
        }
        throw new Q({ code: a2.data.code, message: `\u5237\u65B0access token\u5931\u8D25\uFF1A${a2.data.code}` });
      }
      if (a2.data.access_token)
        return Re(Ke), this._cache.setStore(e, a2.data.access_token), this._cache.setStore(t2, a2.data.access_token_expire + Date.now()), { accessToken: a2.data.access_token, accessTokenExpire: a2.data.access_token_expire };
      a2.data.refresh_token && (this._cache.removeStore(n2), this._cache.setStore(n2, a2.data.refresh_token), this._refreshAccessToken());
    }
    async getAccessToken() {
      const { accessTokenKey: e, accessTokenExpireKey: t2, refreshTokenKey: n2 } = this._cache.keys;
      if (!this._cache.getStore(n2))
        throw new Q({ message: "refresh token\u4E0D\u5B58\u5728\uFF0C\u767B\u5F55\u72B6\u6001\u5F02\u5E38" });
      let s2 = this._cache.getStore(e), r2 = this._cache.getStore(t2), i2 = true;
      return this._shouldRefreshAccessTokenHook && !await this._shouldRefreshAccessTokenHook(s2, r2) && (i2 = false), (!s2 || !r2 || r2 < Date.now()) && i2 ? this.refreshAccessToken() : { accessToken: s2, accessTokenExpire: r2 };
    }
    async request(e, t2, n2) {
      const s2 = `x-tcb-trace_${this.config.env}`;
      let r2 = "application/x-www-form-urlencoded";
      const i2 = { action: e, env: this.config.env, dataVersion: "2019-08-16", ...t2 };
      if (-1 === je.indexOf(e)) {
        const { refreshTokenKey: e2 } = this._cache.keys;
        this._cache.getStore(e2) && (i2.access_token = (await this.getAccessToken()).accessToken);
      }
      let o2;
      if ("storage.uploadFile" === e) {
        o2 = new FormData();
        for (let e2 in o2)
          o2.hasOwnProperty(e2) && void 0 !== o2[e2] && o2.append(e2, i2[e2]);
        r2 = "multipart/form-data";
      } else {
        r2 = "application/json", o2 = {};
        for (let e2 in i2)
          void 0 !== i2[e2] && (o2[e2] = i2[e2]);
      }
      let a2 = { headers: { "content-type": r2 } };
      n2 && n2.onUploadProgress && (a2.onUploadProgress = n2.onUploadProgress);
      const c2 = this._localCache.getStore(s2);
      c2 && (a2.headers["X-TCB-Trace"] = c2);
      const { parse: u2, inQuery: l2, search: h2 } = t2;
      let d2 = { env: this.config.env };
      u2 && (d2.parse = true), l2 && (d2 = { ...l2, ...d2 });
      let f2 = function(e2, t3, n3 = {}) {
        const s3 = /\?/.test(t3);
        let r3 = "";
        for (let e3 in n3)
          "" === r3 ? !s3 && (t3 += "?") : r3 += "&", r3 += `${e3}=${encodeURIComponent(n3[e3])}`;
        return /^http(s)?\:\/\//.test(t3 += r3) ? t3 : `${e2}${t3}`;
      }(fe, "//tcb-api.tencentcloudapi.com/web", d2);
      h2 && (f2 += h2);
      const p2 = await this.post({ url: f2, data: o2, ...a2 }), g2 = p2.header && p2.header["x-tcb-trace"];
      if (g2 && this._localCache.setStore(s2, g2), 200 !== Number(p2.status) && 200 !== Number(p2.statusCode) || !p2.data)
        throw new Q({ code: "NETWORK_ERROR", message: "network request error" });
      return p2;
    }
    async send(e, t2 = {}) {
      const n2 = await this.request(e, t2, { onUploadProgress: t2.onUploadProgress });
      if ("ACCESS_TOKEN_EXPIRED" === n2.data.code && -1 === je.indexOf(e)) {
        await this.refreshAccessToken();
        const n3 = await this.request(e, t2, { onUploadProgress: t2.onUploadProgress });
        if (n3.data.code)
          throw new Q({ code: n3.data.code, message: n3.data.message });
        return n3.data;
      }
      if (n2.data.code)
        throw new Q({ code: n2.data.code, message: n2.data.message });
      return n2.data;
    }
    setRefreshToken(e) {
      const { accessTokenKey: t2, accessTokenExpireKey: n2, refreshTokenKey: s2 } = this._cache.keys;
      this._cache.removeStore(t2), this._cache.removeStore(n2), this._cache.setStore(s2, e);
    }
  }
  const Je = {};
  function He(e) {
    return Je[e];
  }
  class Ge {
    constructor(e) {
      this.config = e, this._cache = Pe(e.env), this._request = He(e.env);
    }
    setRefreshToken(e) {
      const { accessTokenKey: t2, accessTokenExpireKey: n2, refreshTokenKey: s2 } = this._cache.keys;
      this._cache.removeStore(t2), this._cache.removeStore(n2), this._cache.setStore(s2, e);
    }
    setAccessToken(e, t2) {
      const { accessTokenKey: n2, accessTokenExpireKey: s2 } = this._cache.keys;
      this._cache.setStore(n2, e), this._cache.setStore(s2, t2);
    }
    async refreshUserInfo() {
      const { data: e } = await this._request.send("auth.getUserInfo", {});
      return this.setLocalUserInfo(e), e;
    }
    setLocalUserInfo(e) {
      const { userInfoKey: t2 } = this._cache.keys;
      this._cache.setStore(t2, e);
    }
  }
  class Ve {
    constructor(e) {
      if (!e)
        throw new Q({ code: "PARAM_ERROR", message: "envId is not defined" });
      this._envId = e, this._cache = Pe(this._envId), this._request = He(this._envId), this.setUserInfo();
    }
    linkWithTicket(e) {
      if ("string" != typeof e)
        throw new Q({ code: "PARAM_ERROR", message: "ticket must be string" });
      return this._request.send("auth.linkWithTicket", { ticket: e });
    }
    linkWithRedirect(e) {
      e.signInWithRedirect();
    }
    updatePassword(e, t2) {
      return this._request.send("auth.updatePassword", { oldPassword: t2, newPassword: e });
    }
    updateEmail(e) {
      return this._request.send("auth.updateEmail", { newEmail: e });
    }
    updateUsername(e) {
      if ("string" != typeof e)
        throw new Q({ code: "PARAM_ERROR", message: "username must be a string" });
      return this._request.send("auth.updateUsername", { username: e });
    }
    async getLinkedUidList() {
      const { data: e } = await this._request.send("auth.getLinkedUidList", {});
      let t2 = false;
      const { users: n2 } = e;
      return n2.forEach((e2) => {
        e2.wxOpenId && e2.wxPublicId && (t2 = true);
      }), { users: n2, hasPrimaryUid: t2 };
    }
    setPrimaryUid(e) {
      return this._request.send("auth.setPrimaryUid", { uid: e });
    }
    unlink(e) {
      return this._request.send("auth.unlink", { platform: e });
    }
    async update(e) {
      const { nickName: t2, gender: n2, avatarUrl: s2, province: r2, country: i2, city: o2 } = e, { data: a2 } = await this._request.send("auth.updateUserInfo", { nickName: t2, gender: n2, avatarUrl: s2, province: r2, country: i2, city: o2 });
      this.setLocalUserInfo(a2);
    }
    async refresh() {
      const { data: e } = await this._request.send("auth.getUserInfo", {});
      return this.setLocalUserInfo(e), e;
    }
    setUserInfo() {
      const { userInfoKey: e } = this._cache.keys, t2 = this._cache.getStore(e);
      ["uid", "loginType", "openid", "wxOpenId", "wxPublicId", "unionId", "qqMiniOpenId", "email", "hasPassword", "customUserId", "nickName", "gender", "avatarUrl"].forEach((e2) => {
        this[e2] = t2[e2];
      }), this.location = { country: t2.country, province: t2.province, city: t2.city };
    }
    setLocalUserInfo(e) {
      const { userInfoKey: t2 } = this._cache.keys;
      this._cache.setStore(t2, e), this.setUserInfo();
    }
  }
  class Ye {
    constructor(e) {
      if (!e)
        throw new Q({ code: "PARAM_ERROR", message: "envId is not defined" });
      this._cache = Pe(e);
      const { refreshTokenKey: t2, accessTokenKey: n2, accessTokenExpireKey: s2 } = this._cache.keys, r2 = this._cache.getStore(t2), i2 = this._cache.getStore(n2), o2 = this._cache.getStore(s2);
      this.credential = { refreshToken: r2, accessToken: i2, accessTokenExpire: o2 }, this.user = new Ve(e);
    }
    get isAnonymousAuth() {
      return this.loginType === Me.ANONYMOUS;
    }
    get isCustomAuth() {
      return this.loginType === Me.CUSTOM;
    }
    get isWeixinAuth() {
      return this.loginType === Me.WECHAT || this.loginType === Me.WECHAT_OPEN || this.loginType === Me.WECHAT_PUBLIC;
    }
    get loginType() {
      return this._cache.getStore(this._cache.keys.loginTypeKey);
    }
  }
  class Qe extends Ge {
    async signIn() {
      this._cache.updatePersistence("local");
      const { anonymousUuidKey: e, refreshTokenKey: t2 } = this._cache.keys, n2 = this._cache.getStore(e) || void 0, s2 = this._cache.getStore(t2) || void 0, r2 = await this._request.send("auth.signInAnonymously", { anonymous_uuid: n2, refresh_token: s2 });
      if (r2.uuid && r2.refresh_token) {
        this._setAnonymousUUID(r2.uuid), this.setRefreshToken(r2.refresh_token), await this._request.refreshAccessToken(), Re(Ne), Re(Fe, { env: this.config.env, loginType: Me.ANONYMOUS, persistence: "local" });
        const e2 = new Ye(this.config.env);
        return await e2.user.refresh(), e2;
      }
      throw new Q({ message: "\u533F\u540D\u767B\u5F55\u5931\u8D25" });
    }
    async linkAndRetrieveDataWithTicket(e) {
      const { anonymousUuidKey: t2, refreshTokenKey: n2 } = this._cache.keys, s2 = this._cache.getStore(t2), r2 = this._cache.getStore(n2), i2 = await this._request.send("auth.linkAndRetrieveDataWithTicket", { anonymous_uuid: s2, refresh_token: r2, ticket: e });
      if (i2.refresh_token)
        return this._clearAnonymousUUID(), this.setRefreshToken(i2.refresh_token), await this._request.refreshAccessToken(), Re(qe, { env: this.config.env }), Re(Fe, { loginType: Me.CUSTOM, persistence: "local" }), { credential: { refreshToken: i2.refresh_token } };
      throw new Q({ message: "\u533F\u540D\u8F6C\u5316\u5931\u8D25" });
    }
    _setAnonymousUUID(e) {
      const { anonymousUuidKey: t2, loginTypeKey: n2 } = this._cache.keys;
      this._cache.removeStore(t2), this._cache.setStore(t2, e), this._cache.setStore(n2, Me.ANONYMOUS);
    }
    _clearAnonymousUUID() {
      this._cache.removeStore(this._cache.keys.anonymousUuidKey);
    }
  }
  class Xe extends Ge {
    async signIn(e) {
      if ("string" != typeof e)
        throw new Q({ code: "PARAM_ERROR", message: "ticket must be a string" });
      const { refreshTokenKey: t2 } = this._cache.keys, n2 = await this._request.send("auth.signInWithTicket", { ticket: e, refresh_token: this._cache.getStore(t2) || "" });
      if (n2.refresh_token)
        return this.setRefreshToken(n2.refresh_token), await this._request.refreshAccessToken(), Re(Ne), Re(Fe, { env: this.config.env, loginType: Me.CUSTOM, persistence: this.config.persistence }), await this.refreshUserInfo(), new Ye(this.config.env);
      throw new Q({ message: "\u81EA\u5B9A\u4E49\u767B\u5F55\u5931\u8D25" });
    }
  }
  class Ze extends Ge {
    async signIn(e, t2) {
      if ("string" != typeof e)
        throw new Q({ code: "PARAM_ERROR", message: "email must be a string" });
      const { refreshTokenKey: n2 } = this._cache.keys, s2 = await this._request.send("auth.signIn", { loginType: "EMAIL", email: e, password: t2, refresh_token: this._cache.getStore(n2) || "" }), { refresh_token: r2, access_token: i2, access_token_expire: o2 } = s2;
      if (r2)
        return this.setRefreshToken(r2), i2 && o2 ? this.setAccessToken(i2, o2) : await this._request.refreshAccessToken(), await this.refreshUserInfo(), Re(Ne), Re(Fe, { env: this.config.env, loginType: Me.EMAIL, persistence: this.config.persistence }), new Ye(this.config.env);
      throw s2.code ? new Q({ code: s2.code, message: `\u90AE\u7BB1\u767B\u5F55\u5931\u8D25: ${s2.message}` }) : new Q({ message: "\u90AE\u7BB1\u767B\u5F55\u5931\u8D25" });
    }
    async activate(e) {
      return this._request.send("auth.activateEndUserMail", { token: e });
    }
    async resetPasswordWithToken(e, t2) {
      return this._request.send("auth.resetPasswordWithToken", { token: e, newPassword: t2 });
    }
  }
  class et extends Ge {
    async signIn(e, t2) {
      if ("string" != typeof e)
        throw new Q({ code: "PARAM_ERROR", message: "username must be a string" });
      "string" != typeof t2 && (t2 = "", console.warn("password is empty"));
      const { refreshTokenKey: n2 } = this._cache.keys, s2 = await this._request.send("auth.signIn", { loginType: Me.USERNAME, username: e, password: t2, refresh_token: this._cache.getStore(n2) || "" }), { refresh_token: r2, access_token_expire: i2, access_token: o2 } = s2;
      if (r2)
        return this.setRefreshToken(r2), o2 && i2 ? this.setAccessToken(o2, i2) : await this._request.refreshAccessToken(), await this.refreshUserInfo(), Re(Ne), Re(Fe, { env: this.config.env, loginType: Me.USERNAME, persistence: this.config.persistence }), new Ye(this.config.env);
      throw s2.code ? new Q({ code: s2.code, message: `\u7528\u6237\u540D\u5BC6\u7801\u767B\u5F55\u5931\u8D25: ${s2.message}` }) : new Q({ message: "\u7528\u6237\u540D\u5BC6\u7801\u767B\u5F55\u5931\u8D25" });
    }
  }
  class tt {
    constructor(e) {
      this.config = e, this._cache = Pe(e.env), this._request = He(e.env), this._onAnonymousConverted = this._onAnonymousConverted.bind(this), this._onLoginTypeChanged = this._onLoginTypeChanged.bind(this), Ue(Fe, this._onLoginTypeChanged);
    }
    get currentUser() {
      const e = this.hasLoginState();
      return e && e.user || null;
    }
    get loginType() {
      return this._cache.getStore(this._cache.keys.loginTypeKey);
    }
    anonymousAuthProvider() {
      return new Qe(this.config);
    }
    customAuthProvider() {
      return new Xe(this.config);
    }
    emailAuthProvider() {
      return new Ze(this.config);
    }
    usernameAuthProvider() {
      return new et(this.config);
    }
    async signInAnonymously() {
      return new Qe(this.config).signIn();
    }
    async signInWithEmailAndPassword(e, t2) {
      return new Ze(this.config).signIn(e, t2);
    }
    signInWithUsernameAndPassword(e, t2) {
      return new et(this.config).signIn(e, t2);
    }
    async linkAndRetrieveDataWithTicket(e) {
      this._anonymousAuthProvider || (this._anonymousAuthProvider = new Qe(this.config)), Ue(qe, this._onAnonymousConverted);
      return await this._anonymousAuthProvider.linkAndRetrieveDataWithTicket(e);
    }
    async signOut() {
      if (this.loginType === Me.ANONYMOUS)
        throw new Q({ message: "\u533F\u540D\u7528\u6237\u4E0D\u652F\u6301\u767B\u51FA\u64CD\u4F5C" });
      const { refreshTokenKey: e, accessTokenKey: t2, accessTokenExpireKey: n2 } = this._cache.keys, s2 = this._cache.getStore(e);
      if (!s2)
        return;
      const r2 = await this._request.send("auth.logout", { refresh_token: s2 });
      return this._cache.removeStore(e), this._cache.removeStore(t2), this._cache.removeStore(n2), Re(Ne), Re(Fe, { env: this.config.env, loginType: Me.NULL, persistence: this.config.persistence }), r2;
    }
    async signUpWithEmailAndPassword(e, t2) {
      return this._request.send("auth.signUpWithEmailAndPassword", { email: e, password: t2 });
    }
    async sendPasswordResetEmail(e) {
      return this._request.send("auth.sendPasswordResetEmail", { email: e });
    }
    onLoginStateChanged(e) {
      Ue(Ne, () => {
        const t3 = this.hasLoginState();
        e.call(this, t3);
      });
      const t2 = this.hasLoginState();
      e.call(this, t2);
    }
    onLoginStateExpired(e) {
      Ue(De, e.bind(this));
    }
    onAccessTokenRefreshed(e) {
      Ue(Ke, e.bind(this));
    }
    onAnonymousConverted(e) {
      Ue(qe, e.bind(this));
    }
    onLoginTypeChanged(e) {
      Ue(Fe, () => {
        const t2 = this.hasLoginState();
        e.call(this, t2);
      });
    }
    async getAccessToken() {
      return { accessToken: (await this._request.getAccessToken()).accessToken, env: this.config.env };
    }
    hasLoginState() {
      const { refreshTokenKey: e } = this._cache.keys;
      return this._cache.getStore(e) ? new Ye(this.config.env) : null;
    }
    async isUsernameRegistered(e) {
      if ("string" != typeof e)
        throw new Q({ code: "PARAM_ERROR", message: "username must be a string" });
      const { data: t2 } = await this._request.send("auth.isUsernameRegistered", { username: e });
      return t2 && t2.isRegistered;
    }
    getLoginState() {
      return Promise.resolve(this.hasLoginState());
    }
    async signInWithTicket(e) {
      return new Xe(this.config).signIn(e);
    }
    shouldRefreshAccessToken(e) {
      this._request._shouldRefreshAccessTokenHook = e.bind(this);
    }
    getUserInfo() {
      return this._request.send("auth.getUserInfo", {}).then((e) => e.code ? e : { ...e.data, requestId: e.seqId });
    }
    getAuthHeader() {
      const { refreshTokenKey: e, accessTokenKey: t2 } = this._cache.keys, n2 = this._cache.getStore(e);
      return { "x-cloudbase-credentials": this._cache.getStore(t2) + "/@@/" + n2 };
    }
    _onAnonymousConverted(e) {
      const { env: t2 } = e.data;
      t2 === this.config.env && this._cache.updatePersistence(this.config.persistence);
    }
    _onLoginTypeChanged(e) {
      const { loginType: t2, persistence: n2, env: s2 } = e.data;
      s2 === this.config.env && (this._cache.updatePersistence(n2), this._cache.setStore(this._cache.keys.loginTypeKey, t2));
    }
  }
  const nt = function(e, t2) {
    t2 = t2 || me();
    const n2 = He(this.config.env), { cloudPath: s2, filePath: r2, onUploadProgress: i2, fileType: o2 = "image" } = e;
    return n2.send("storage.getUploadMetadata", { path: s2 }).then((e2) => {
      const { data: { url: a2, authorization: c2, token: u2, fileId: l2, cosFileId: h2 }, requestId: d2 } = e2, f2 = { key: s2, signature: c2, "x-cos-meta-fileid": h2, success_action_status: "201", "x-cos-security-token": u2 };
      n2.upload({ url: a2, data: f2, file: r2, name: s2, fileType: o2, onUploadProgress: i2 }).then((e3) => {
        201 === e3.statusCode ? t2(null, { fileID: l2, requestId: d2 }) : t2(new Q({ code: "STORAGE_REQUEST_FAIL", message: `STORAGE_REQUEST_FAIL: ${e3.data}` }));
      }).catch((e3) => {
        t2(e3);
      });
    }).catch((e2) => {
      t2(e2);
    }), t2.promise;
  }, st = function(e, t2) {
    t2 = t2 || me();
    const n2 = He(this.config.env), { cloudPath: s2 } = e;
    return n2.send("storage.getUploadMetadata", { path: s2 }).then((e2) => {
      t2(null, e2);
    }).catch((e2) => {
      t2(e2);
    }), t2.promise;
  }, rt = function({ fileList: e }, t2) {
    if (t2 = t2 || me(), !e || !Array.isArray(e))
      return { code: "INVALID_PARAM", message: "fileList\u5FC5\u987B\u662F\u975E\u7A7A\u7684\u6570\u7EC4" };
    for (let t3 of e)
      if (!t3 || "string" != typeof t3)
        return { code: "INVALID_PARAM", message: "fileList\u7684\u5143\u7D20\u5FC5\u987B\u662F\u975E\u7A7A\u7684\u5B57\u7B26\u4E32" };
    const n2 = { fileid_list: e };
    return He(this.config.env).send("storage.batchDeleteFile", n2).then((e2) => {
      e2.code ? t2(null, e2) : t2(null, { fileList: e2.data.delete_list, requestId: e2.requestId });
    }).catch((e2) => {
      t2(e2);
    }), t2.promise;
  }, it = function({ fileList: e }, t2) {
    t2 = t2 || me(), e && Array.isArray(e) || t2(null, { code: "INVALID_PARAM", message: "fileList\u5FC5\u987B\u662F\u975E\u7A7A\u7684\u6570\u7EC4" });
    let n2 = [];
    for (let s3 of e)
      "object" == typeof s3 ? (s3.hasOwnProperty("fileID") && s3.hasOwnProperty("maxAge") || t2(null, { code: "INVALID_PARAM", message: "fileList\u7684\u5143\u7D20\u5FC5\u987B\u662F\u5305\u542BfileID\u548CmaxAge\u7684\u5BF9\u8C61" }), n2.push({ fileid: s3.fileID, max_age: s3.maxAge })) : "string" == typeof s3 ? n2.push({ fileid: s3 }) : t2(null, { code: "INVALID_PARAM", message: "fileList\u7684\u5143\u7D20\u5FC5\u987B\u662F\u5B57\u7B26\u4E32" });
    const s2 = { file_list: n2 };
    return He(this.config.env).send("storage.batchGetDownloadUrl", s2).then((e2) => {
      e2.code ? t2(null, e2) : t2(null, { fileList: e2.data.download_list, requestId: e2.requestId });
    }).catch((e2) => {
      t2(e2);
    }), t2.promise;
  }, ot = async function({ fileID: e }, t2) {
    const n2 = (await it.call(this, { fileList: [{ fileID: e, maxAge: 600 }] })).fileList[0];
    if ("SUCCESS" !== n2.code)
      return t2 ? t2(n2) : new Promise((e2) => {
        e2(n2);
      });
    const s2 = He(this.config.env);
    let r2 = n2.download_url;
    if (r2 = encodeURI(r2), !t2)
      return s2.download({ url: r2 });
    t2(await s2.download({ url: r2 }));
  }, at = function({ name: e, data: t2, query: n2, parse: s2, search: r2 }, i2) {
    const o2 = i2 || me();
    let a2;
    try {
      a2 = t2 ? JSON.stringify(t2) : "";
    } catch (e2) {
      return Promise.reject(e2);
    }
    if (!e)
      return Promise.reject(new Q({ code: "PARAM_ERROR", message: "\u51FD\u6570\u540D\u4E0D\u80FD\u4E3A\u7A7A" }));
    const c2 = { inQuery: n2, parse: s2, search: r2, function_name: e, request_data: a2 };
    return He(this.config.env).send("functions.invokeFunction", c2).then((e2) => {
      if (e2.code)
        o2(null, e2);
      else {
        let t3 = e2.data.response_data;
        if (s2)
          o2(null, { result: t3, requestId: e2.requestId });
        else
          try {
            t3 = JSON.parse(e2.data.response_data), o2(null, { result: t3, requestId: e2.requestId });
          } catch (e3) {
            o2(new Q({ message: "response data must be json" }));
          }
      }
      return o2.promise;
    }).catch((e2) => {
      o2(e2);
    }), o2.promise;
  }, ct = { timeout: 15e3, persistence: "session" }, ut = {};
  class lt {
    constructor(e) {
      this.config = e || this.config, this.authObj = void 0;
    }
    init(e) {
      switch (Se.adapter || (this.requestClient = new Se.adapter.reqClass({ timeout: e.timeout || 5e3, timeoutMsg: `\u8BF7\u6C42\u5728${(e.timeout || 5e3) / 1e3}s\u5185\u672A\u5B8C\u6210\uFF0C\u5DF2\u4E2D\u65AD` })), this.config = { ...ct, ...e }, true) {
        case this.config.timeout > 6e5:
          console.warn("timeout\u5927\u4E8E\u53EF\u914D\u7F6E\u4E0A\u9650[10\u5206\u949F]\uFF0C\u5DF2\u91CD\u7F6E\u4E3A\u4E0A\u9650\u6570\u503C"), this.config.timeout = 6e5;
          break;
        case this.config.timeout < 100:
          console.warn("timeout\u5C0F\u4E8E\u53EF\u914D\u7F6E\u4E0B\u9650[100ms]\uFF0C\u5DF2\u91CD\u7F6E\u4E3A\u4E0B\u9650\u6570\u503C"), this.config.timeout = 100;
      }
      return new lt(this.config);
    }
    auth({ persistence: e } = {}) {
      if (this.authObj)
        return this.authObj;
      const t2 = e || Se.adapter.primaryStorage || ct.persistence;
      var n2;
      return t2 !== this.config.persistence && (this.config.persistence = t2), function(e2) {
        const { env: t3 } = e2;
        Ae[t3] = new Te(e2), Ce[t3] = new Te({ ...e2, persistence: "local" });
      }(this.config), n2 = this.config, Je[n2.env] = new ze(n2), this.authObj = new tt(this.config), this.authObj;
    }
    on(e, t2) {
      return Ue.apply(this, [e, t2]);
    }
    off(e, t2) {
      return Le.apply(this, [e, t2]);
    }
    callFunction(e, t2) {
      return at.apply(this, [e, t2]);
    }
    deleteFile(e, t2) {
      return rt.apply(this, [e, t2]);
    }
    getTempFileURL(e, t2) {
      return it.apply(this, [e, t2]);
    }
    downloadFile(e, t2) {
      return ot.apply(this, [e, t2]);
    }
    uploadFile(e, t2) {
      return nt.apply(this, [e, t2]);
    }
    getUploadMetadata(e, t2) {
      return st.apply(this, [e, t2]);
    }
    registerExtension(e) {
      ut[e.name] = e;
    }
    async invokeExtension(e, t2) {
      const n2 = ut[e];
      if (!n2)
        throw new Q({ message: `\u6269\u5C55${e} \u5FC5\u987B\u5148\u6CE8\u518C` });
      return await n2.invoke(t2, this);
    }
    useAdapters(e) {
      const { adapter: t2, runtime: n2 } = ve(e) || {};
      t2 && (Se.adapter = t2), n2 && (Se.runtime = n2);
    }
  }
  var ht = new lt();
  function dt(e, t2, n2) {
    void 0 === n2 && (n2 = {});
    var s2 = /\?/.test(t2), r2 = "";
    for (var i2 in n2)
      "" === r2 ? !s2 && (t2 += "?") : r2 += "&", r2 += i2 + "=" + encodeURIComponent(n2[i2]);
    return /^http(s)?:\/\//.test(t2 += r2) ? t2 : "" + e + t2;
  }
  class ft {
    post(e) {
      const { url: t2, data: n2, headers: s2 } = e;
      return new Promise((e2, r2) => {
        X.request({ url: dt("https:", t2), data: n2, method: "POST", header: s2, success(t3) {
          e2(t3);
        }, fail(e3) {
          r2(e3);
        } });
      });
    }
    upload(e) {
      return new Promise((t2, n2) => {
        const { url: s2, file: r2, data: i2, headers: o2, fileType: a2 } = e, c2 = X.uploadFile({ url: dt("https:", s2), name: "file", formData: Object.assign({}, i2), filePath: r2, fileType: a2, header: o2, success(e2) {
          const n3 = { statusCode: e2.statusCode, data: e2.data || {} };
          200 === e2.statusCode && i2.success_action_status && (n3.statusCode = parseInt(i2.success_action_status, 10)), t2(n3);
        }, fail(e2) {
          n2(new Error(e2.errMsg || "uploadFile:fail"));
        } });
        "function" == typeof e.onUploadProgress && c2 && "function" == typeof c2.onProgressUpdate && c2.onProgressUpdate((t3) => {
          e.onUploadProgress({ loaded: t3.totalBytesSent, total: t3.totalBytesExpectedToSend });
        });
      });
    }
  }
  const pt = { setItem(e, t2) {
    X.setStorageSync(e, t2);
  }, getItem: (e) => X.getStorageSync(e), removeItem(e) {
    X.removeStorageSync(e);
  }, clear() {
    X.clearStorageSync();
  } };
  var gt = { genAdapter: function() {
    return { root: {}, reqClass: ft, localStorage: pt, primaryStorage: "local" };
  }, isMatch: function() {
    return true;
  }, runtime: "uni_app" };
  ht.useAdapters(gt);
  const mt = ht, yt = mt.init;
  mt.init = function(e) {
    e.env = e.spaceId;
    const t2 = yt.call(this, e);
    t2.config.provider = "tencent", t2.config.spaceId = e.spaceId;
    const n2 = t2.auth;
    return t2.auth = function(e2) {
      const t3 = n2.call(this, e2);
      return ["linkAndRetrieveDataWithTicket", "signInAnonymously", "signOut", "getAccessToken", "getLoginState", "signInWithTicket", "getUserInfo"].forEach((e3) => {
        t3[e3] = Y(t3[e3]).bind(t3);
      }), t3;
    }, t2.customAuth = t2.auth, t2;
  };
  var _t = mt;
  var wt = class extends he {
    getAccessToken() {
      return new Promise((e, t2) => {
        const n2 = "Anonymous_Access_token";
        this.setAccessToken(n2), e(n2);
      });
    }
    setupRequest(e, t2) {
      const n2 = Object.assign({}, e, { spaceId: this.config.spaceId, timestamp: Date.now() }), s2 = { "Content-Type": "application/json" };
      "auth" !== t2 && (n2.token = this.accessToken, s2["x-basement-token"] = this.accessToken), s2["x-serverless-sign"] = ce.sign(n2, this.config.clientSecret);
      const r2 = ae();
      s2["x-client-info"] = encodeURIComponent(JSON.stringify(r2));
      const { token: i2 } = ee();
      return s2["x-client-token"] = i2, { url: this.config.requestUrl, method: "POST", data: n2, dataType: "json", header: JSON.parse(JSON.stringify(s2)) };
    }
    uploadFileToOSS({ url: e, formData: t2, name: n2, filePath: s2, fileType: r2, onUploadProgress: i2 }) {
      return new Promise((o2, a2) => {
        const c2 = this.adapter.uploadFile({ url: e, formData: t2, name: n2, filePath: s2, fileType: r2, success(e2) {
          e2 && e2.statusCode < 400 ? o2(e2) : a2(new Q({ code: "UPLOAD_FAILED", message: "\u6587\u4EF6\u4E0A\u4F20\u5931\u8D25" }));
        }, fail(e2) {
          a2(new Q({ code: e2.code || "UPLOAD_FAILED", message: e2.message || e2.errMsg || "\u6587\u4EF6\u4E0A\u4F20\u5931\u8D25" }));
        } });
        "function" == typeof i2 && c2 && "function" == typeof c2.onProgressUpdate && c2.onProgressUpdate((e2) => {
          i2({ loaded: e2.totalBytesSent, total: e2.totalBytesExpectedToSend });
        });
      });
    }
    uploadFile({ filePath: e, cloudPath: t2, fileType: n2 = "image", onUploadProgress: s2 }) {
      if (!t2)
        throw new Q({ code: "CLOUDPATH_REQUIRED", message: "cloudPath\u4E0D\u53EF\u4E3A\u7A7A" });
      let r2;
      return this.getOSSUploadOptionsFromPath({ cloudPath: t2 }).then((t3) => {
        const { url: i2, formData: o2, name: a2 } = t3.result;
        r2 = t3.result.fileUrl;
        const c2 = { url: i2, formData: o2, name: a2, filePath: e, fileType: n2 };
        return this.uploadFileToOSS(Object.assign({}, c2, { onUploadProgress: s2 }));
      }).then(() => this.reportOSSUpload({ cloudPath: t2 })).then((t3) => new Promise((n3, s3) => {
        t3.success ? n3({ success: true, filePath: e, fileID: r2 }) : s3(new Q({ code: "UPLOAD_FAILED", message: "\u6587\u4EF6\u4E0A\u4F20\u5931\u8D25" }));
      }));
    }
    deleteFile({ fileList: e }) {
      const t2 = { method: "serverless.file.resource.delete", params: JSON.stringify({ fileList: e }) };
      return this.request(this.setupRequest(t2)).then((e2) => {
        if (e2.success)
          return e2.result;
        throw new Q({ code: "DELETE_FILE_FAILED", message: "\u5220\u9664\u6587\u4EF6\u5931\u8D25" });
      });
    }
    getTempFileURL({ fileList: e } = {}) {
      if (!Array.isArray(e) || 0 === e.length)
        throw new Q({ code: "INVALID_PARAM", message: "fileList\u7684\u5143\u7D20\u5FC5\u987B\u662F\u975E\u7A7A\u7684\u5B57\u7B26\u4E32" });
      const t2 = { method: "serverless.file.resource.getTempFileURL", params: JSON.stringify({ fileList: e }) };
      return this.request(this.setupRequest(t2)).then((e2) => {
        if (e2.success)
          return { fileList: e2.result.fileList.map((e3) => ({ fileID: e3.fileID, tempFileURL: e3.tempFileURL })) };
        throw new Q({ code: "GET_TEMP_FILE_URL_FAILED", message: "\u83B7\u53D6\u4E34\u65F6\u6587\u4EF6\u94FE\u63A5\u5931\u8D25" });
      });
    }
  };
  var vt = { init(e) {
    const t2 = new wt(e), n2 = { signInAnonymously: function() {
      return t2.authorize();
    }, getLoginState: function() {
      return Promise.resolve(false);
    } };
    return t2.auth = function() {
      return n2;
    }, t2.customAuth = t2.auth, t2;
  } };
  function St({ data: e }) {
    let t2;
    t2 = ae();
    const n2 = JSON.parse(JSON.stringify(e || {}));
    if (Object.assign(n2, { clientInfo: t2 }), !n2.uniIdToken) {
      const { token: e2 } = ee();
      e2 && (n2.uniIdToken = e2);
    }
    return n2;
  }
  function kt({ name: e, data: t2 } = {}) {
    const { localAddress: n2, localPort: s2 } = this.__dev__, r2 = { aliyun: "aliyun", tencent: "tcb" }[this.config.provider], i2 = this.config.spaceId, o2 = `http://${n2}:${s2}/system/check-function`, a2 = `http://${n2}:${s2}/cloudfunctions/${e}`;
    return new Promise((t3, n3) => {
      X.request({ method: "POST", url: o2, data: { name: e, platform: S$1, provider: r2, spaceId: i2 }, timeout: 3e3, success(e2) {
        t3(e2);
      }, fail() {
        t3({ data: { code: "NETWORK_ERROR", message: "\u8FDE\u63A5\u672C\u5730\u8C03\u8BD5\u670D\u52A1\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\u5BA2\u6237\u7AEF\u662F\u5426\u548C\u4E3B\u673A\u5728\u540C\u4E00\u5C40\u57DF\u7F51\u4E0B\uFF0C\u81EA\u52A8\u5207\u6362\u4E3A\u5DF2\u90E8\u7F72\u7684\u4E91\u51FD\u6570\u3002" } });
      } });
    }).then(({ data: e2 } = {}) => {
      const { code: t3, message: n3 } = e2 || {};
      return { code: 0 === t3 ? 0 : t3 || "SYS_ERR", message: n3 || "SYS_ERR" };
    }).then(({ code: n3, message: s3 }) => {
      if (0 !== n3) {
        switch (n3) {
          case "MODULE_ENCRYPTED":
            console.error(`\u6B64\u4E91\u51FD\u6570\uFF08${e}\uFF09\u4F9D\u8D56\u52A0\u5BC6\u516C\u5171\u6A21\u5757\u4E0D\u53EF\u672C\u5730\u8C03\u8BD5\uFF0C\u81EA\u52A8\u5207\u6362\u4E3A\u4E91\u7AEF\u5DF2\u90E8\u7F72\u7684\u4E91\u51FD\u6570`);
            break;
          case "FUNCTION_ENCRYPTED":
            console.error(`\u6B64\u4E91\u51FD\u6570\uFF08${e}\uFF09\u5DF2\u52A0\u5BC6\u4E0D\u53EF\u672C\u5730\u8C03\u8BD5\uFF0C\u81EA\u52A8\u5207\u6362\u4E3A\u4E91\u7AEF\u5DF2\u90E8\u7F72\u7684\u4E91\u51FD\u6570`);
            break;
          case "ACTION_ENCRYPTED":
            console.error(s3 || "\u9700\u8981\u8BBF\u95EE\u52A0\u5BC6\u7684uni-clientDB-action\uFF0C\u81EA\u52A8\u5207\u6362\u4E3A\u4E91\u7AEF\u73AF\u5883");
            break;
          case "NETWORK_ERROR": {
            const e2 = "\u8FDE\u63A5\u672C\u5730\u8C03\u8BD5\u670D\u52A1\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\u5BA2\u6237\u7AEF\u662F\u5426\u548C\u4E3B\u673A\u5728\u540C\u4E00\u5C40\u57DF\u7F51\u4E0B";
            throw console.error(e2), new Error(e2);
          }
          case "SWITCH_TO_CLOUD":
            break;
          default: {
            const e2 = `\u68C0\u6D4B\u672C\u5730\u8C03\u8BD5\u670D\u52A1\u51FA\u73B0\u9519\u8BEF\uFF1A${s3}\uFF0C\u8BF7\u68C0\u67E5\u7F51\u7EDC\u73AF\u5883\u6216\u91CD\u542F\u5BA2\u6237\u7AEF\u518D\u8BD5`;
            throw console.error(e2), new Error(e2);
          }
        }
        return this._callCloudFunction({ name: e, data: t2 });
      }
      return new Promise((e2, n4) => {
        const s4 = St.call(this, { data: t2 });
        X.request({ method: "POST", url: a2, data: { provider: r2, platform: S$1, param: s4 }, success: ({ statusCode: t3, data: s5 } = {}) => !t3 || t3 >= 400 ? n4(new Q({ code: s5.code || "SYS_ERR", message: s5.message || "request:fail" })) : e2({ result: s5 }), fail(e3) {
          n4(new Q({ code: e3.code || e3.errCode || "SYS_ERR", message: e3.message || e3.errMsg || "request:fail" }));
        } });
      });
    });
  }
  const It = [{ rule: /fc_function_not_found|FUNCTION_NOT_FOUND/, content: "\uFF0C\u4E91\u51FD\u6570[{functionName}]\u5728\u4E91\u7AEF\u4E0D\u5B58\u5728\uFF0C\u8BF7\u68C0\u67E5\u6B64\u4E91\u51FD\u6570\u540D\u79F0\u662F\u5426\u6B63\u786E\u4EE5\u53CA\u8BE5\u4E91\u51FD\u6570\u662F\u5426\u5DF2\u4E0A\u4F20\u5230\u670D\u52A1\u7A7A\u95F4", mode: "append" }];
  var bt = /[\\^$.*+?()[\]{}|]/g, Tt = RegExp(bt.source);
  function At(e, t2, n2) {
    return e.replace(new RegExp((s2 = t2) && Tt.test(s2) ? s2.replace(bt, "\\$&") : s2, "g"), n2);
    var s2;
  }
  const Pt = "request", Et = "response", Ot = "both";
  const fn = { code: 2e4, message: "System error" }, pn = { code: 20101, message: "Invalid client" };
  function yn(e) {
    const { errSubject: t2, subject: n2, errCode: s2, errMsg: r2, code: i2, message: o2, cause: a2 } = e || {};
    return new Q({ subject: t2 || n2 || "uni-secure-network", code: s2 || i2 || fn.code, message: r2 || o2, cause: a2 });
  }
  let wn;
  function bn({ secretType: e } = {}) {
    return e === Pt || e === Et || e === Ot;
  }
  function Tn({ name: e, data: t2 = {} } = {}) {
    return "app" === S$1 && "DCloud-clientDB" === e && "encryption" === t2.redirectTo && "getAppClientKey" === t2.action;
  }
  function An({ provider: e, spaceId: t2, functionName: n2 } = {}) {
    const { appId: s2, uniPlatform: r2, osName: i2 } = ie();
    let o2 = r2;
    "app" === r2 && (o2 = i2);
    const a2 = function({ provider: e2, spaceId: t3 } = {}) {
      const n3 = v;
      if (!n3)
        return {};
      e2 = function(e3) {
        return "tencent" === e3 ? "tcb" : e3;
      }(e2);
      const s3 = n3.find((n4) => n4.provider === e2 && n4.spaceId === t3);
      return s3 && s3.config;
    }({ provider: e, spaceId: t2 });
    if (!a2 || !a2.accessControl || !a2.accessControl.enable)
      return false;
    const c2 = a2.accessControl.function || {}, u2 = Object.keys(c2);
    if (0 === u2.length)
      return true;
    const l2 = function(e2, t3) {
      let n3, s3, r3;
      for (let i3 = 0; i3 < e2.length; i3++) {
        const o3 = e2[i3];
        o3 !== t3 ? "*" !== o3 ? o3.split(",").map((e3) => e3.trim()).indexOf(t3) > -1 && (s3 = o3) : r3 = o3 : n3 = o3;
      }
      return n3 || s3 || r3;
    }(u2, n2);
    if (!l2)
      return false;
    if ((c2[l2] || []).find((e2 = {}) => e2.appId === s2 && (e2.platform || "").toLowerCase() === o2.toLowerCase()))
      return true;
    throw console.error(`\u6B64\u5E94\u7528[appId: ${s2}, platform: ${o2}]\u4E0D\u5728\u4E91\u7AEF\u914D\u7F6E\u7684\u5141\u8BB8\u8BBF\u95EE\u7684\u5E94\u7528\u5217\u8868\u5185\uFF0C\u53C2\u8003\uFF1Ahttps://uniapp.dcloud.net.cn/uniCloud/secure-network.html#verify-client`), yn(pn);
  }
  function Cn({ functionName: e, result: t2, logPvd: n2 }) {
    if (this.__dev__.debugLog && t2 && t2.requestId) {
      const s2 = JSON.stringify({ spaceId: this.config.spaceId, functionName: e, requestId: t2.requestId });
      console.log(`[${n2}-request]${s2}[/${n2}-request]`);
    }
  }
  function Pn(e) {
    const t2 = e.callFunction, n2 = function(n3) {
      const s2 = n3.name;
      n3.data = St.call(e, { data: n3.data });
      const r2 = { aliyun: "aliyun", tencent: "tcb", tcb: "tcb" }[this.config.provider], i2 = bn(n3), o2 = Tn(n3), a2 = i2 || o2;
      return t2.call(this, n3).then((e2) => (e2.errCode = 0, !a2 && Cn.call(this, { functionName: s2, result: e2, logPvd: r2 }), Promise.resolve(e2)), (e2) => (!a2 && Cn.call(this, { functionName: s2, result: e2, logPvd: r2 }), e2 && e2.message && (e2.message = function({ message: e3 = "", extraInfo: t3 = {}, formatter: n4 = [] } = {}) {
        for (let s3 = 0; s3 < n4.length; s3++) {
          const { rule: r3, content: i3, mode: o3 } = n4[s3], a3 = e3.match(r3);
          if (!a3)
            continue;
          let c2 = i3;
          for (let e4 = 1; e4 < a3.length; e4++)
            c2 = At(c2, `{$${e4}}`, a3[e4]);
          for (const e4 in t3)
            c2 = At(c2, `{${e4}}`, t3[e4]);
          return "replace" === o3 ? c2 : e3 + c2;
        }
        return e3;
      }({ message: `[${n3.name}]: ${e2.message}`, formatter: It, extraInfo: { functionName: s2 } })), Promise.reject(e2)));
    };
    e.callFunction = function(t3) {
      const { provider: s2, spaceId: r2 } = e.config, i2 = t3.name;
      let o2, a2;
      if (t3.data = t3.data || {}, e.__dev__.debugInfo && !e.__dev__.debugInfo.forceRemote && I ? (e._callCloudFunction || (e._callCloudFunction = n2, e._callLocalFunction = kt), o2 = kt) : o2 = n2, o2 = o2.bind(e), Tn(t3))
        a2 = n2.call(e, t3);
      else if (function({ name: e2, data: t4 = {} }) {
        return "mp-weixin" === S$1 && "uni-id-co" === e2 && "secureNetworkHandshakeByWeixin" === t4.method;
      }(t3))
        a2 = o2.call(e, t3);
      else if (bn(t3)) {
        a2 = new wn({ secretType: t3.secretType, uniCloudIns: e }).wrapEncryptDataCallFunction(n2.bind(e))(t3);
      } else if (An({ provider: s2, spaceId: r2, functionName: i2 })) {
        a2 = new wn({ secretType: t3.secretType, uniCloudIns: e }).wrapVerifyClientCallFunction(n2.bind(e))(t3);
      } else
        a2 = o2(t3);
      return Object.defineProperty(a2, "result", { get: () => (console.warn("\u5F53\u524D\u8FD4\u56DE\u7ED3\u679C\u4E3APromise\u7C7B\u578B\uFF0C\u4E0D\u53EF\u76F4\u63A5\u8BBF\u95EE\u5176result\u5C5E\u6027\uFF0C\u8BE6\u60C5\u8BF7\u53C2\u8003\uFF1Ahttps://uniapp.dcloud.net.cn/uniCloud/faq?id=promise"), {}) }), a2;
    };
  }
  wn = "mp-weixin" !== S$1 && "app" !== S$1 ? class {
    constructor() {
      throw yn({ message: `Platform ${S$1} is not supported by secure network` });
    }
  } : class {
    constructor() {
      throw yn({ message: `Platform ${S$1} is not enabled, please check whether secure network module is enabled in your manifest.json` });
    }
  };
  const En = Symbol("CLIENT_DB_INTERNAL");
  function On(e, t2) {
    return e.then = "DoNotReturnProxyWithAFunctionNamedThen", e._internalType = En, e.inspect = null, e.__v_raw = void 0, new Proxy(e, { get(e2, n2, s2) {
      if ("_uniClient" === n2)
        return null;
      if ("symbol" == typeof n2)
        return e2[n2];
      if (n2 in e2 || "string" != typeof n2) {
        const t3 = e2[n2];
        return "function" == typeof t3 ? t3.bind(e2) : t3;
      }
      return t2.get(e2, n2, s2);
    } });
  }
  function xn(e) {
    return { on: (t2, n2) => {
      e[t2] = e[t2] || [], e[t2].indexOf(n2) > -1 || e[t2].push(n2);
    }, off: (t2, n2) => {
      e[t2] = e[t2] || [];
      const s2 = e[t2].indexOf(n2);
      -1 !== s2 && e[t2].splice(s2, 1);
    } };
  }
  const Un = ["db.Geo", "db.command", "command.aggregate"];
  function Rn(e, t2) {
    return Un.indexOf(`${e}.${t2}`) > -1;
  }
  function Ln(e) {
    switch (d(e = Z(e))) {
      case "array":
        return e.map((e2) => Ln(e2));
      case "object":
        return e._internalType === En || Object.keys(e).forEach((t2) => {
          e[t2] = Ln(e[t2]);
        }), e;
      case "regexp":
        return { $regexp: { source: e.source, flags: e.flags } };
      case "date":
        return { $date: e.toISOString() };
      default:
        return e;
    }
  }
  function Nn(e) {
    return e && e.content && e.content.$method;
  }
  class Dn {
    constructor(e, t2, n2) {
      this.content = e, this.prevStage = t2 || null, this.udb = null, this._database = n2;
    }
    toJSON() {
      let e = this;
      const t2 = [e.content];
      for (; e.prevStage; )
        e = e.prevStage, t2.push(e.content);
      return { $db: t2.reverse().map((e2) => ({ $method: e2.$method, $param: Ln(e2.$param) })) };
    }
    getAction() {
      const e = this.toJSON().$db.find((e2) => "action" === e2.$method);
      return e && e.$param && e.$param[0];
    }
    getCommand() {
      return { $db: this.toJSON().$db.filter((e) => "action" !== e.$method) };
    }
    get isAggregate() {
      let e = this;
      for (; e; ) {
        const t2 = Nn(e), n2 = Nn(e.prevStage);
        if ("aggregate" === t2 && "collection" === n2 || "pipeline" === t2)
          return true;
        e = e.prevStage;
      }
      return false;
    }
    get isCommand() {
      let e = this;
      for (; e; ) {
        if ("command" === Nn(e))
          return true;
        e = e.prevStage;
      }
      return false;
    }
    get isAggregateCommand() {
      let e = this;
      for (; e; ) {
        const t2 = Nn(e), n2 = Nn(e.prevStage);
        if ("aggregate" === t2 && "command" === n2)
          return true;
        e = e.prevStage;
      }
      return false;
    }
    getNextStageFn(e) {
      const t2 = this;
      return function() {
        return Fn({ $method: e, $param: Ln(Array.from(arguments)) }, t2, t2._database);
      };
    }
    get count() {
      return this.isAggregate ? this.getNextStageFn("count") : function() {
        return this._send("count", Array.from(arguments));
      };
    }
    get remove() {
      return this.isCommand ? this.getNextStageFn("remove") : function() {
        return this._send("remove", Array.from(arguments));
      };
    }
    get() {
      return this._send("get", Array.from(arguments));
    }
    get add() {
      return this.isCommand ? this.getNextStageFn("add") : function() {
        return this._send("add", Array.from(arguments));
      };
    }
    update() {
      return this._send("update", Array.from(arguments));
    }
    end() {
      return this._send("end", Array.from(arguments));
    }
    get set() {
      return this.isCommand ? this.getNextStageFn("set") : function() {
        throw new Error("JQL\u7981\u6B62\u4F7F\u7528set\u65B9\u6CD5");
      };
    }
    _send(e, t2) {
      const n2 = this.getAction(), s2 = this.getCommand();
      if (s2.$db.push({ $method: e, $param: Ln(t2) }), y) {
        const e2 = s2.$db.find((e3) => "collection" === e3.$method), t3 = e2 && e2.$param;
        t3 && 1 === t3.length && "string" == typeof e2.$param[0] && e2.$param[0].indexOf(",") > -1 && console.warn("\u68C0\u6D4B\u5230\u4F7F\u7528JQL\u8BED\u6CD5\u8054\u8868\u67E5\u8BE2\u65F6\uFF0C\u672A\u4F7F\u7528getTemp\u5148\u8FC7\u6EE4\u4E3B\u8868\u6570\u636E\uFF0C\u5728\u4E3B\u8868\u6570\u636E\u91CF\u5927\u7684\u60C5\u51B5\u4E0B\u53EF\u80FD\u4F1A\u67E5\u8BE2\u7F13\u6162\u3002\n- \u5982\u4F55\u4F18\u5316\u8BF7\u53C2\u8003\u6B64\u6587\u6863\uFF1Ahttps://uniapp.dcloud.net.cn/uniCloud/jql?id=lookup-with-temp \n- \u5982\u679C\u4E3B\u8868\u6570\u636E\u91CF\u5F88\u5C0F\u8BF7\u5FFD\u7565\u6B64\u4FE1\u606F\uFF0C\u9879\u76EE\u53D1\u884C\u65F6\u4E0D\u4F1A\u51FA\u73B0\u6B64\u63D0\u793A\u3002");
      }
      return this._database._callCloudFunction({ action: n2, command: s2 });
    }
  }
  function Fn(e, t2, n2) {
    return On(new Dn(e, t2, n2), { get(e2, t3) {
      let s2 = "db";
      return e2 && e2.content && (s2 = e2.content.$method), Rn(s2, t3) ? Fn({ $method: t3 }, e2, n2) : function() {
        return Fn({ $method: t3, $param: Ln(Array.from(arguments)) }, e2, n2);
      };
    } });
  }
  function qn({ path: e, method: t2 }) {
    return class {
      constructor() {
        this.param = Array.from(arguments);
      }
      toJSON() {
        return { $newDb: [...e.map((e2) => ({ $method: e2 })), { $method: t2, $param: this.param }] };
      }
    };
  }
  function Kn(e, t2 = {}) {
    return On(new e(t2), { get: (e2, t3) => Rn("db", t3) ? Fn({ $method: t3 }, null, e2) : function() {
      return Fn({ $method: t3, $param: Ln(Array.from(arguments)) }, null, e2);
    } });
  }
  class Mn extends class {
    constructor({ uniClient: e = {}, isJQL: t2 = false } = {}) {
      this._uniClient = e, this._authCallBacks = {}, this._dbCallBacks = {}, e.isDefault && (this._dbCallBacks = C("_globalUniCloudDatabaseCallback")), t2 || (this.auth = xn(this._authCallBacks)), this._isJQL = t2, Object.assign(this, xn(this._dbCallBacks)), this.env = On({}, { get: (e2, t3) => ({ $env: t3 }) }), this.Geo = On({}, { get: (e2, t3) => qn({ path: ["Geo"], method: t3 }) }), this.serverDate = qn({ path: [], method: "serverDate" }), this.RegExp = qn({ path: [], method: "RegExp" });
    }
    getCloudEnv(e) {
      if ("string" != typeof e || !e.trim())
        throw new Error("getCloudEnv\u53C2\u6570\u9519\u8BEF");
      return { $env: e.replace("$cloudEnv_", "") };
    }
    _callback(e, t2) {
      const n2 = this._dbCallBacks;
      n2[e] && n2[e].forEach((e2) => {
        e2(...t2);
      });
    }
    _callbackAuth(e, t2) {
      const n2 = this._authCallBacks;
      n2[e] && n2[e].forEach((e2) => {
        e2(...t2);
      });
    }
    multiSend() {
      const e = Array.from(arguments), t2 = e.map((e2) => {
        const t3 = e2.getAction(), n2 = e2.getCommand();
        if ("getTemp" !== n2.$db[n2.$db.length - 1].$method)
          throw new Error("multiSend\u53EA\u652F\u6301\u5B50\u547D\u4EE4\u5185\u4F7F\u7528getTemp");
        return { action: t3, command: n2 };
      });
      return this._callCloudFunction({ multiCommand: t2, queryList: e });
    }
  } {
    _parseResult(e) {
      return this._isJQL ? e.result : e;
    }
    _callCloudFunction({ action: e, command: t2, multiCommand: n2, queryList: s2 }) {
      function r2(e2, t3) {
        if (n2 && s2)
          for (let n3 = 0; n3 < s2.length; n3++) {
            const r3 = s2[n3];
            r3.udb && "function" == typeof r3.udb.setResult && (t3 ? r3.udb.setResult(t3) : r3.udb.setResult(e2.result.dataList[n3]));
          }
      }
      const i2 = this, o2 = this._isJQL ? "databaseForJQL" : "database";
      function a2(e2) {
        return i2._callback("error", [e2]), U(R(o2, "fail"), e2).then(() => U(R(o2, "complete"), e2)).then(() => (r2(null, e2), z(D, { type: K, content: e2 }), Promise.reject(e2)));
      }
      const c2 = U(R(o2, "invoke")), u2 = this._uniClient;
      return c2.then(() => u2.callFunction({ name: "DCloud-clientDB", type: h, data: { action: e, command: t2, multiCommand: n2 } })).then((e2) => {
        const { code: t3, message: n3, token: s3, tokenExpired: c3, systemInfo: u3 = [] } = e2.result;
        if (u3)
          for (let e3 = 0; e3 < u3.length; e3++) {
            const { level: t4, message: n4, detail: s4 } = u3[e3], r3 = console["app" === S$1 && "warn" === t4 ? "error" : t4] || console.log;
            let i3 = "[System Info]" + n4;
            s4 && (i3 = `${i3}
\u8BE6\u7EC6\u4FE1\u606F\uFF1A${s4}`), r3(i3);
          }
        if (t3) {
          return a2(new Q({ code: t3, message: n3, requestId: e2.requestId }));
        }
        e2.result.errCode = e2.result.errCode || e2.result.code, e2.result.errMsg = e2.result.errMsg || e2.result.message, s3 && c3 && (te({ token: s3, tokenExpired: c3 }), this._callbackAuth("refreshToken", [{ token: s3, tokenExpired: c3 }]), this._callback("refreshToken", [{ token: s3, tokenExpired: c3 }]), z(q, { token: s3, tokenExpired: c3 }));
        const l2 = [{ prop: "affectedDocs", tips: "affectedDocs\u4E0D\u518D\u63A8\u8350\u4F7F\u7528\uFF0C\u8BF7\u4F7F\u7528inserted/deleted/updated/data.length\u66FF\u4EE3" }, { prop: "code", tips: "code\u4E0D\u518D\u63A8\u8350\u4F7F\u7528\uFF0C\u8BF7\u4F7F\u7528errCode\u66FF\u4EE3" }, { prop: "message", tips: "message\u4E0D\u518D\u63A8\u8350\u4F7F\u7528\uFF0C\u8BF7\u4F7F\u7528errMsg\u66FF\u4EE3" }];
        for (let t4 = 0; t4 < l2.length; t4++) {
          const { prop: n4, tips: s4 } = l2[t4];
          if (n4 in e2.result) {
            const t5 = e2.result[n4];
            Object.defineProperty(e2.result, n4, { get: () => (console.warn(s4), t5) });
          }
        }
        return function(e3) {
          return U(R(o2, "success"), e3).then(() => U(R(o2, "complete"), e3)).then(() => {
            r2(e3, null);
            const t4 = i2._parseResult(e3);
            return z(D, { type: K, content: t4 }), Promise.resolve(t4);
          });
        }(e2);
      }, (e2) => {
        /fc_function_not_found|FUNCTION_NOT_FOUND/g.test(e2.message) && console.warn("clientDB\u672A\u521D\u59CB\u5316\uFF0C\u8BF7\u5728web\u63A7\u5236\u53F0\u4FDD\u5B58\u4E00\u6B21schema\u4EE5\u5F00\u542FclientDB");
        return a2(new Q({ code: e2.code || "SYSTEM_ERROR", message: e2.message, requestId: e2.requestId }));
      });
    }
  }
  const jn = "token\u65E0\u6548\uFF0C\u8DF3\u8F6C\u767B\u5F55\u9875\u9762", Bn = "token\u8FC7\u671F\uFF0C\u8DF3\u8F6C\u767B\u5F55\u9875\u9762", $n = { TOKEN_INVALID_TOKEN_EXPIRED: Bn, TOKEN_INVALID_INVALID_CLIENTID: jn, TOKEN_INVALID: jn, TOKEN_INVALID_WRONG_TOKEN: jn, TOKEN_INVALID_ANONYMOUS_USER: jn }, Wn = { "uni-id-token-expired": Bn, "uni-id-check-token-failed": jn, "uni-id-token-not-exist": jn, "uni-id-check-device-feature-failed": jn };
  function zn(e, t2) {
    let n2 = "";
    return n2 = e ? `${e}/${t2}` : t2, n2.replace(/^\//, "");
  }
  function Jn(e = [], t2 = "") {
    const n2 = [], s2 = [];
    return e.forEach((e2) => {
      true === e2.needLogin ? n2.push(zn(t2, e2.path)) : false === e2.needLogin && s2.push(zn(t2, e2.path));
    }), { needLoginPage: n2, notNeedLoginPage: s2 };
  }
  function Hn(e) {
    return e.split("?")[0].replace(/^\//, "");
  }
  function Gn() {
    return function(e) {
      let t2 = e && e.$page && e.$page.fullPath || "";
      return t2 ? ("/" !== t2.charAt(0) && (t2 = "/" + t2), t2) : t2;
    }(function() {
      const e = getCurrentPages();
      return e[e.length - 1];
    }());
  }
  function Vn() {
    return Hn(Gn());
  }
  function Yn(e = "", t2 = {}) {
    if (!e)
      return false;
    if (!(t2 && t2.list && t2.list.length))
      return false;
    const n2 = t2.list, s2 = Hn(e);
    return n2.some((e2) => e2.pagePath === s2);
  }
  const Qn = !!t.uniIdRouter;
  const { loginPage: Xn, routerNeedLogin: Zn, resToLogin: es, needLoginPage: ts, notNeedLoginPage: ns, loginPageInTabBar: ss } = function({ pages: e = [], subPackages: n2 = [], uniIdRouter: s2 = {}, tabBar: r2 = {} } = t) {
    const { loginPage: i2, needLogin: o2 = [], resToLogin: a2 = true } = s2, { needLoginPage: c2, notNeedLoginPage: u2 } = Jn(e), { needLoginPage: l2, notNeedLoginPage: h2 } = function(e2 = []) {
      const t2 = [], n3 = [];
      return e2.forEach((e3) => {
        const { root: s3, pages: r3 = [] } = e3, { needLoginPage: i3, notNeedLoginPage: o3 } = Jn(r3, s3);
        t2.push(...i3), n3.push(...o3);
      }), { needLoginPage: t2, notNeedLoginPage: n3 };
    }(n2);
    return { loginPage: i2, routerNeedLogin: o2, resToLogin: a2, needLoginPage: [...c2, ...l2], notNeedLoginPage: [...u2, ...h2], loginPageInTabBar: Yn(i2, r2) };
  }();
  if (ts.indexOf(Xn) > -1)
    throw new Error(`Login page [${Xn}] should not be "needLogin", please check your pages.json`);
  function rs(e) {
    const t2 = Vn();
    if ("/" === e.charAt(0))
      return e;
    const [n2, s2] = e.split("?"), r2 = n2.replace(/^\//, "").split("/"), i2 = t2.split("/");
    i2.pop();
    for (let e2 = 0; e2 < r2.length; e2++) {
      const t3 = r2[e2];
      ".." === t3 ? i2.pop() : "." !== t3 && i2.push(t3);
    }
    return "" === i2[0] && i2.shift(), "/" + i2.join("/") + (s2 ? "?" + s2 : "");
  }
  function is(e) {
    const t2 = Hn(rs(e));
    return !(ns.indexOf(t2) > -1) && (ts.indexOf(t2) > -1 || Zn.some((t3) => function(e2, t4) {
      return new RegExp(t4).test(e2);
    }(e, t3)));
  }
  function os({ redirect: e }) {
    const t2 = Hn(e), n2 = Hn(Xn);
    return Vn() !== n2 && t2 !== n2;
  }
  function as({ api: e, redirect: t2 } = {}) {
    if (!t2 || !os({ redirect: t2 }))
      return;
    const n2 = function(e2, t3) {
      return "/" !== e2.charAt(0) && (e2 = "/" + e2), t3 ? e2.indexOf("?") > -1 ? e2 + `&uniIdRedirectUrl=${encodeURIComponent(t3)}` : e2 + `?uniIdRedirectUrl=${encodeURIComponent(t3)}` : e2;
    }(Xn, t2);
    ss ? "navigateTo" !== e && "redirectTo" !== e || (e = "switchTab") : "switchTab" === e && (e = "navigateTo");
    const s2 = { navigateTo: uni.navigateTo, redirectTo: uni.redirectTo, switchTab: uni.switchTab, reLaunch: uni.reLaunch };
    setTimeout(() => {
      s2[e]({ url: n2 });
    });
  }
  function cs({ url: e } = {}) {
    const t2 = { abortLoginPageJump: false, autoToLoginPage: false }, n2 = function() {
      const { token: e2, tokenExpired: t3 } = ee();
      let n3;
      if (e2) {
        if (t3 < Date.now()) {
          const e3 = "uni-id-token-expired";
          n3 = { errCode: e3, errMsg: Wn[e3] };
        }
      } else {
        const e3 = "uni-id-check-token-failed";
        n3 = { errCode: e3, errMsg: Wn[e3] };
      }
      return n3;
    }();
    if (is(e) && n2) {
      n2.uniIdRedirectUrl = e;
      if (B(F).length > 0)
        return setTimeout(() => {
          z(F, n2);
        }, 0), t2.abortLoginPageJump = true, t2;
      t2.autoToLoginPage = true;
    }
    return t2;
  }
  function us() {
    !function() {
      const e2 = Gn(), { abortLoginPageJump: t2, autoToLoginPage: n2 } = cs({ url: e2 });
      t2 || n2 && as({ api: "redirectTo", redirect: e2 });
    }();
    const e = ["navigateTo", "redirectTo", "reLaunch", "switchTab"];
    for (let t2 = 0; t2 < e.length; t2++) {
      const n2 = e[t2];
      uni.addInterceptor(n2, { invoke(e2) {
        const { abortLoginPageJump: t3, autoToLoginPage: s2 } = cs({ url: e2.url });
        return t3 ? e2 : s2 ? (as({ api: n2, redirect: rs(e2.url) }), false) : e2;
      } });
    }
  }
  function ls() {
    this.onResponse((e) => {
      const { type: t2, content: n2 } = e;
      let s2 = false;
      switch (t2) {
        case "cloudobject":
          s2 = function(e2) {
            const { errCode: t3 } = e2;
            return t3 in Wn;
          }(n2);
          break;
        case "clientdb":
          s2 = function(e2) {
            const { errCode: t3 } = e2;
            return t3 in $n;
          }(n2);
      }
      s2 && function(e2 = {}) {
        const t3 = B(F);
        G().then(() => {
          const n3 = Gn();
          if (n3 && os({ redirect: n3 }))
            return t3.length > 0 ? z(F, Object.assign({ uniIdRedirectUrl: n3 }, e2)) : void (Xn && as({ api: "navigateTo", redirect: n3 }));
        });
      }(n2);
    });
  }
  function hs(e) {
    !function(e2) {
      e2.onResponse = function(e3) {
        $(D, e3);
      }, e2.offResponse = function(e3) {
        W(D, e3);
      };
    }(e), function(e2) {
      e2.onNeedLogin = function(e3) {
        $(F, e3);
      }, e2.offNeedLogin = function(e3) {
        W(F, e3);
      }, Qn && (C("_globalUniCloudStatus").needLoginInit || (C("_globalUniCloudStatus").needLoginInit = true, G().then(() => {
        us.call(e2);
      }), es && ls.call(e2)));
    }(e), function(e2) {
      e2.onRefreshToken = function(e3) {
        $(q, e3);
      }, e2.offRefreshToken = function(e3) {
        W(q, e3);
      };
    }(e);
  }
  let ds;
  const fs = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", ps = /^(?:[A-Za-z\d+/]{4})*?(?:[A-Za-z\d+/]{2}(?:==)?|[A-Za-z\d+/]{3}=?)?$/;
  function gs() {
    const e = ee().token || "", t2 = e.split(".");
    if (!e || 3 !== t2.length)
      return { uid: null, role: [], permission: [], tokenExpired: 0 };
    let n2;
    try {
      n2 = JSON.parse((s2 = t2[1], decodeURIComponent(ds(s2).split("").map(function(e2) {
        return "%" + ("00" + e2.charCodeAt(0).toString(16)).slice(-2);
      }).join(""))));
    } catch (e2) {
      throw new Error("\u83B7\u53D6\u5F53\u524D\u7528\u6237\u4FE1\u606F\u51FA\u9519\uFF0C\u8BE6\u7EC6\u9519\u8BEF\u4FE1\u606F\u4E3A\uFF1A" + e2.message);
    }
    var s2;
    return n2.tokenExpired = 1e3 * n2.exp, delete n2.exp, delete n2.iat, n2;
  }
  ds = "function" != typeof atob ? function(e) {
    if (e = String(e).replace(/[\t\n\f\r ]+/g, ""), !ps.test(e))
      throw new Error("Failed to execute 'atob' on 'Window': The string to be decoded is not correctly encoded.");
    var t2;
    e += "==".slice(2 - (3 & e.length));
    for (var n2, s2, r2 = "", i2 = 0; i2 < e.length; )
      t2 = fs.indexOf(e.charAt(i2++)) << 18 | fs.indexOf(e.charAt(i2++)) << 12 | (n2 = fs.indexOf(e.charAt(i2++))) << 6 | (s2 = fs.indexOf(e.charAt(i2++))), r2 += 64 === n2 ? String.fromCharCode(t2 >> 16 & 255) : 64 === s2 ? String.fromCharCode(t2 >> 16 & 255, t2 >> 8 & 255) : String.fromCharCode(t2 >> 16 & 255, t2 >> 8 & 255, 255 & t2);
    return r2;
  } : atob;
  var ms = s(function(e, t2) {
    Object.defineProperty(t2, "__esModule", { value: true });
    const n2 = "chooseAndUploadFile:ok", s2 = "chooseAndUploadFile:fail";
    function r2(e2, t3) {
      return e2.tempFiles.forEach((e3, n3) => {
        e3.name || (e3.name = e3.path.substring(e3.path.lastIndexOf("/") + 1)), t3 && (e3.fileType = t3), e3.cloudPath = Date.now() + "_" + n3 + e3.name.substring(e3.name.lastIndexOf("."));
      }), e2.tempFilePaths || (e2.tempFilePaths = e2.tempFiles.map((e3) => e3.path)), e2;
    }
    function i2(e2, t3, { onChooseFile: s3, onUploadProgress: r3 }) {
      return t3.then((e3) => {
        if (s3) {
          const t4 = s3(e3);
          if (void 0 !== t4)
            return Promise.resolve(t4).then((t5) => void 0 === t5 ? e3 : t5);
        }
        return e3;
      }).then((t4) => false === t4 ? { errMsg: n2, tempFilePaths: [], tempFiles: [] } : function(e3, t5, s4 = 5, r4) {
        (t5 = Object.assign({}, t5)).errMsg = n2;
        const i3 = t5.tempFiles, o2 = i3.length;
        let a2 = 0;
        return new Promise((n3) => {
          for (; a2 < s4; )
            c2();
          function c2() {
            const s5 = a2++;
            if (s5 >= o2)
              return void (!i3.find((e4) => !e4.url && !e4.errMsg) && n3(t5));
            const u2 = i3[s5];
            e3.uploadFile({ filePath: u2.path, cloudPath: u2.cloudPath, fileType: u2.fileType, onUploadProgress(e4) {
              e4.index = s5, e4.tempFile = u2, e4.tempFilePath = u2.path, r4 && r4(e4);
            } }).then((e4) => {
              u2.url = e4.fileID, s5 < o2 && c2();
            }).catch((e4) => {
              u2.errMsg = e4.errMsg || e4.message, s5 < o2 && c2();
            });
          }
        });
      }(e2, t4, 5, r3));
    }
    t2.initChooseAndUploadFile = function(e2) {
      return function(t3 = { type: "all" }) {
        return "image" === t3.type ? i2(e2, function(e3) {
          const { count: t4, sizeType: n3, sourceType: i3 = ["album", "camera"], extension: o2 } = e3;
          return new Promise((e4, a2) => {
            uni.chooseImage({ count: t4, sizeType: n3, sourceType: i3, extension: o2, success(t5) {
              e4(r2(t5, "image"));
            }, fail(e5) {
              a2({ errMsg: e5.errMsg.replace("chooseImage:fail", s2) });
            } });
          });
        }(t3), t3) : "video" === t3.type ? i2(e2, function(e3) {
          const { camera: t4, compressed: n3, maxDuration: i3, sourceType: o2 = ["album", "camera"], extension: a2 } = e3;
          return new Promise((e4, c2) => {
            uni.chooseVideo({ camera: t4, compressed: n3, maxDuration: i3, sourceType: o2, extension: a2, success(t5) {
              const { tempFilePath: n4, duration: s3, size: i4, height: o3, width: a3 } = t5;
              e4(r2({ errMsg: "chooseVideo:ok", tempFilePaths: [n4], tempFiles: [{ name: t5.tempFile && t5.tempFile.name || "", path: n4, size: i4, type: t5.tempFile && t5.tempFile.type || "", width: a3, height: o3, duration: s3, fileType: "video", cloudPath: "" }] }, "video"));
            }, fail(e5) {
              c2({ errMsg: e5.errMsg.replace("chooseVideo:fail", s2) });
            } });
          });
        }(t3), t3) : i2(e2, function(e3) {
          const { count: t4, extension: n3 } = e3;
          return new Promise((e4, i3) => {
            let o2 = uni.chooseFile;
            if ("undefined" != typeof wx && "function" == typeof wx.chooseMessageFile && (o2 = wx.chooseMessageFile), "function" != typeof o2)
              return i3({ errMsg: s2 + " \u8BF7\u6307\u5B9A type \u7C7B\u578B\uFF0C\u8BE5\u5E73\u53F0\u4EC5\u652F\u6301\u9009\u62E9 image \u6216 video\u3002" });
            o2({ type: "all", count: t4, extension: n3, success(t5) {
              e4(r2(t5));
            }, fail(e5) {
              i3({ errMsg: e5.errMsg.replace("chooseFile:fail", s2) });
            } });
          });
        }(t3), t3);
      };
    };
  }), ys = n$1(ms);
  const _s = "manual";
  function ws(e) {
    return { props: { localdata: { type: Array, default: () => [] }, options: { type: [Object, Array], default: () => ({}) }, spaceInfo: { type: Object, default: () => ({}) }, collection: { type: [String, Array], default: "" }, action: { type: String, default: "" }, field: { type: String, default: "" }, orderby: { type: String, default: "" }, where: { type: [String, Object], default: "" }, pageData: { type: String, default: "add" }, pageCurrent: { type: Number, default: 1 }, pageSize: { type: Number, default: 20 }, getcount: { type: [Boolean, String], default: false }, gettree: { type: [Boolean, String], default: false }, gettreepath: { type: [Boolean, String], default: false }, startwith: { type: String, default: "" }, limitlevel: { type: Number, default: 10 }, groupby: { type: String, default: "" }, groupField: { type: String, default: "" }, distinct: { type: [Boolean, String], default: false }, foreignKey: { type: String, default: "" }, loadtime: { type: String, default: "auto" }, manual: { type: Boolean, default: false } }, data: () => ({ mixinDatacomLoading: false, mixinDatacomHasMore: false, mixinDatacomResData: [], mixinDatacomErrorMessage: "", mixinDatacomPage: {} }), created() {
      this.mixinDatacomPage = { current: this.pageCurrent, size: this.pageSize, count: 0 }, this.$watch(() => {
        var e2 = [];
        return ["pageCurrent", "pageSize", "localdata", "collection", "action", "field", "orderby", "where", "getont", "getcount", "gettree", "groupby", "groupField", "distinct"].forEach((t2) => {
          e2.push(this[t2]);
        }), e2;
      }, (e2, t2) => {
        if (this.loadtime === _s)
          return;
        let n2 = false;
        const s2 = [];
        for (let r2 = 2; r2 < e2.length; r2++)
          e2[r2] !== t2[r2] && (s2.push(e2[r2]), n2 = true);
        e2[0] !== t2[0] && (this.mixinDatacomPage.current = this.pageCurrent), this.mixinDatacomPage.size = this.pageSize, this.onMixinDatacomPropsChange(n2, s2);
      });
    }, methods: { onMixinDatacomPropsChange(e2, t2) {
    }, mixinDatacomEasyGet({ getone: e2 = false, success: t2, fail: n2 } = {}) {
      this.mixinDatacomLoading || (this.mixinDatacomLoading = true, this.mixinDatacomErrorMessage = "", this.mixinDatacomGet().then((n3) => {
        this.mixinDatacomLoading = false;
        const { data: s2, count: r2 } = n3.result;
        this.getcount && (this.mixinDatacomPage.count = r2), this.mixinDatacomHasMore = s2.length < this.pageSize;
        const i2 = e2 ? s2.length ? s2[0] : void 0 : s2;
        this.mixinDatacomResData = i2, t2 && t2(i2);
      }).catch((e3) => {
        this.mixinDatacomLoading = false, this.mixinDatacomErrorMessage = e3, n2 && n2(e3);
      }));
    }, mixinDatacomGet(t2 = {}) {
      let n2 = e.database(this.spaceInfo);
      const s2 = t2.action || this.action;
      s2 && (n2 = n2.action(s2));
      const r2 = t2.collection || this.collection;
      n2 = Array.isArray(r2) ? n2.collection(...r2) : n2.collection(r2);
      const i2 = t2.where || this.where;
      i2 && Object.keys(i2).length && (n2 = n2.where(i2));
      const o2 = t2.field || this.field;
      o2 && (n2 = n2.field(o2));
      const a2 = t2.foreignKey || this.foreignKey;
      a2 && (n2 = n2.foreignKey(a2));
      const c2 = t2.groupby || this.groupby;
      c2 && (n2 = n2.groupBy(c2));
      const u2 = t2.groupField || this.groupField;
      u2 && (n2 = n2.groupField(u2));
      true === (void 0 !== t2.distinct ? t2.distinct : this.distinct) && (n2 = n2.distinct());
      const l2 = t2.orderby || this.orderby;
      l2 && (n2 = n2.orderBy(l2));
      const h2 = void 0 !== t2.pageCurrent ? t2.pageCurrent : this.mixinDatacomPage.current, d2 = void 0 !== t2.pageSize ? t2.pageSize : this.mixinDatacomPage.size, f2 = void 0 !== t2.getcount ? t2.getcount : this.getcount, p2 = void 0 !== t2.gettree ? t2.gettree : this.gettree, g2 = void 0 !== t2.gettreepath ? t2.gettreepath : this.gettreepath, m2 = { getCount: f2 }, y2 = { limitLevel: void 0 !== t2.limitlevel ? t2.limitlevel : this.limitlevel, startWith: void 0 !== t2.startwith ? t2.startwith : this.startwith };
      return p2 && (m2.getTree = y2), g2 && (m2.getTreePath = y2), n2 = n2.skip(d2 * (h2 - 1)).limit(d2).get(m2), n2;
    } } };
  }
  function vs(e) {
    return function(t2, n2 = {}) {
      n2 = function(e2, t3 = {}) {
        return e2.customUI = t3.customUI || e2.customUI, e2.parseSystemError = t3.parseSystemError || e2.parseSystemError, Object.assign(e2.loadingOptions, t3.loadingOptions), Object.assign(e2.errorOptions, t3.errorOptions), "object" == typeof t3.secretMethods && (e2.secretMethods = t3.secretMethods), e2;
      }({ customUI: false, loadingOptions: { title: "\u52A0\u8F7D\u4E2D...", mask: true }, errorOptions: { type: "modal", retry: false } }, n2);
      const { customUI: s2, loadingOptions: r2, errorOptions: i2, parseSystemError: o2 } = n2, a2 = !s2;
      return new Proxy({}, { get: (s3, c2) => function({ fn: e2, interceptorName: t3, getCallbackArgs: n3 } = {}) {
        return async function(...s4) {
          const r3 = n3 ? n3({ params: s4 }) : {};
          let i3, o3;
          try {
            return await U(R(t3, "invoke"), { ...r3 }), i3 = await e2(...s4), await U(R(t3, "success"), { ...r3, result: i3 }), i3;
          } catch (e3) {
            throw o3 = e3, await U(R(t3, "fail"), { ...r3, error: o3 }), o3;
          } finally {
            await U(R(t3, "complete"), o3 ? { ...r3, error: o3 } : { ...r3, result: i3 });
          }
        };
      }({ fn: async function s4(...u2) {
        let h2;
        a2 && uni.showLoading({ title: r2.title, mask: r2.mask });
        const d2 = { name: t2, type: l, data: { method: c2, params: u2 } };
        "object" == typeof n2.secretMethods && function(e2, t3) {
          const n3 = t3.data.method, s5 = e2.secretMethods || {}, r3 = s5[n3] || s5["*"];
          r3 && (t3.secretType = r3);
        }(n2, d2);
        let f2 = false;
        try {
          h2 = await e.callFunction(d2);
        } catch (e2) {
          f2 = true, h2 = { result: new Q(e2) };
        }
        const { errSubject: p2, errCode: g2, errMsg: m2, newToken: y2 } = h2.result || {};
        if (a2 && uni.hideLoading(), y2 && y2.token && y2.tokenExpired && (te(y2), z(q, { ...y2 })), g2) {
          let e2 = m2;
          if (f2 && o2) {
            e2 = (await o2({ objectName: t2, methodName: c2, params: u2, errSubject: p2, errCode: g2, errMsg: m2 })).errMsg || m2;
          }
          if (a2)
            if ("toast" === i2.type)
              uni.showToast({ title: e2, icon: "none" });
            else {
              if ("modal" !== i2.type)
                throw new Error(`Invalid errorOptions.type: ${i2.type}`);
              {
                const { confirm: t3 } = await async function({ title: e3, content: t4, showCancel: n4, cancelText: s5, confirmText: r3 } = {}) {
                  return new Promise((i3, o3) => {
                    uni.showModal({ title: e3, content: t4, showCancel: n4, cancelText: s5, confirmText: r3, success(e4) {
                      i3(e4);
                    }, fail() {
                      i3({ confirm: false, cancel: true });
                    } });
                  });
                }({ title: "\u63D0\u793A", content: e2, showCancel: i2.retry, cancelText: "\u53D6\u6D88", confirmText: i2.retry ? "\u91CD\u8BD5" : "\u786E\u5B9A" });
                if (i2.retry && t3)
                  return s4(...u2);
              }
            }
          const n3 = new Q({ subject: p2, code: g2, message: m2, requestId: h2.requestId });
          throw n3.detail = h2.result, z(D, { type: j, content: n3 }), n3;
        }
        return z(D, { type: j, content: h2.result }), h2.result;
      }, interceptorName: "callObject", getCallbackArgs: function({ params: e2 } = {}) {
        return { objectName: t2, methodName: c2, params: e2 };
      } }) });
    };
  }
  function Ss(e) {
    return C("_globalUniCloudSecureNetworkCache__{spaceId}".replace("{spaceId}", e.config.spaceId));
  }
  async function ks({ callLoginByWeixin: e = false } = {}) {
    const t2 = Ss(this);
    if ("mp-weixin" !== S$1)
      throw new Error(`[SecureNetwork] API \`initSecureNetworkByWeixin\` is not supported on platform \`${S$1}\``);
    const n2 = await new Promise((e2, t3) => {
      uni.login({ success(t4) {
        e2(t4.code);
      }, fail(e3) {
        t3(new Error(e3.errMsg));
      } });
    }), s2 = this.importObject("uni-id-co", { customUI: true });
    return await s2.secureNetworkHandshakeByWeixin({ code: n2, callLoginByWeixin: e }), t2.mpWeixinCode = n2, { code: n2 };
  }
  async function Is(e) {
    const t2 = Ss(this);
    return t2.initPromise || (t2.initPromise = ks.call(this, e)), t2.initPromise;
  }
  function bs(e) {
    return function({ callLoginByWeixin: t2 = false } = {}) {
      return Is.call(e, { callLoginByWeixin: t2 });
    };
  }
  async function Ts(e, t2) {
    const n2 = `http://${e}:${t2}/system/ping`;
    try {
      const e2 = await (s2 = { url: n2, timeout: 500 }, new Promise((e3, t3) => {
        X.request({ ...s2, success(t4) {
          e3(t4);
        }, fail(e4) {
          t3(e4);
        } });
      }));
      return !(!e2.data || 0 !== e2.data.code);
    } catch (e2) {
      return false;
    }
    var s2;
  }
  function As(e) {
    if (e.initUniCloudStatus && "rejected" !== e.initUniCloudStatus)
      return;
    let t2 = Promise.resolve();
    var n2;
    n2 = 1, t2 = new Promise((e2) => {
      setTimeout(() => {
        e2();
      }, n2);
    }), e.isReady = false, e.isDefault = false;
    const s2 = e.auth();
    e.initUniCloudStatus = "pending", e.initUniCloud = t2.then(() => s2.getLoginState()).then((e2) => e2 ? Promise.resolve() : s2.signInAnonymously()).then(() => {
      if ("app" === S$1) {
        const { osName: e2, osVersion: t3 } = ie();
        "ios" === e2 && function(e3) {
          if (!e3 || "string" != typeof e3)
            return 0;
          const t4 = e3.match(/^(\d+)./);
          return t4 && t4[1] ? parseInt(t4[1]) : 0;
        }(t3) >= 14 && console.warn("iOS 14\u53CA\u4EE5\u4E0A\u7248\u672C\u8FDE\u63A5uniCloud\u672C\u5730\u8C03\u8BD5\u670D\u52A1\u9700\u8981\u5141\u8BB8\u5BA2\u6237\u7AEF\u67E5\u627E\u5E76\u8FDE\u63A5\u5230\u672C\u5730\u7F51\u7EDC\u4E0A\u7684\u8BBE\u5907\uFF08\u4EC5\u5F00\u53D1\u6A21\u5F0F\u751F\u6548\uFF0C\u53D1\u884C\u6A21\u5F0F\u4F1A\u8FDE\u63A5uniCloud\u4E91\u7AEF\u670D\u52A1\uFF09");
      }
      if (e.__dev__.debugInfo) {
        const { address: t3, servePort: n3 } = e.__dev__.debugInfo;
        return async function(e2, t4) {
          let n4;
          for (let s3 = 0; s3 < e2.length; s3++) {
            const r2 = e2[s3];
            if (await Ts(r2, t4)) {
              n4 = r2;
              break;
            }
          }
          return { address: n4, port: t4 };
        }(t3, n3);
      }
    }).then(({ address: t3, port: n3 } = {}) => {
      const s3 = console["app" === S$1 ? "error" : "warn"];
      if (t3)
        e.__dev__.localAddress = t3, e.__dev__.localPort = n3;
      else if (e.__dev__.debugInfo) {
        let t4 = "";
        "remote" === e.__dev__.debugInfo.initialLaunchType ? (e.__dev__.debugInfo.forceRemote = true, t4 = "\u5F53\u524D\u5BA2\u6237\u7AEF\u548CHBuilderX\u4E0D\u5728\u540C\u4E00\u5C40\u57DF\u7F51\u4E0B\uFF08\u6216\u5176\u4ED6\u7F51\u7EDC\u539F\u56E0\u65E0\u6CD5\u8FDE\u63A5HBuilderX\uFF09\uFF0CuniCloud\u672C\u5730\u8C03\u8BD5\u670D\u52A1\u4E0D\u5BF9\u5F53\u524D\u5BA2\u6237\u7AEF\u751F\u6548\u3002\n- \u5982\u679C\u4E0D\u4F7F\u7528uniCloud\u672C\u5730\u8C03\u8BD5\u670D\u52A1\uFF0C\u8BF7\u76F4\u63A5\u5FFD\u7565\u6B64\u4FE1\u606F\u3002\n- \u5982\u9700\u4F7F\u7528uniCloud\u672C\u5730\u8C03\u8BD5\u670D\u52A1\uFF0C\u8BF7\u5C06\u5BA2\u6237\u7AEF\u4E0E\u4E3B\u673A\u8FDE\u63A5\u5230\u540C\u4E00\u5C40\u57DF\u7F51\u4E0B\u5E76\u91CD\u65B0\u8FD0\u884C\u5230\u5BA2\u6237\u7AEF\u3002") : t4 = "\u65E0\u6CD5\u8FDE\u63A5uniCloud\u672C\u5730\u8C03\u8BD5\u670D\u52A1\uFF0C\u8BF7\u68C0\u67E5\u5F53\u524D\u5BA2\u6237\u7AEF\u662F\u5426\u4E0E\u4E3B\u673A\u5728\u540C\u4E00\u5C40\u57DF\u7F51\u4E0B\u3002\n- \u5982\u9700\u4F7F\u7528uniCloud\u672C\u5730\u8C03\u8BD5\u670D\u52A1\uFF0C\u8BF7\u5C06\u5BA2\u6237\u7AEF\u4E0E\u4E3B\u673A\u8FDE\u63A5\u5230\u540C\u4E00\u5C40\u57DF\u7F51\u4E0B\u5E76\u91CD\u65B0\u8FD0\u884C\u5230\u5BA2\u6237\u7AEF\u3002", t4 += "\n- \u5982\u679C\u5728HBuilderX\u5F00\u542F\u7684\u72B6\u6001\u4E0B\u5207\u6362\u8FC7\u7F51\u7EDC\u73AF\u5883\uFF0C\u8BF7\u91CD\u542FHBuilderX\u540E\u518D\u8BD5\n- \u68C0\u67E5\u7CFB\u7EDF\u9632\u706B\u5899\u662F\u5426\u62E6\u622A\u4E86HBuilderX\u81EA\u5E26\u7684nodejs\n- \u68C0\u67E5\u662F\u5426\u9519\u8BEF\u7684\u4F7F\u7528\u62E6\u622A\u5668\u4FEE\u6539uni.request\u65B9\u6CD5\u7684\u53C2\u6570", "web" === S$1 && (t4 += "\n- \u90E8\u5206\u6D4F\u89C8\u5668\u5F00\u542F\u8282\u6D41\u6A21\u5F0F\u4E4B\u540E\u8BBF\u95EE\u672C\u5730\u5730\u5740\u53D7\u9650\uFF0C\u8BF7\u68C0\u67E5\u662F\u5426\u542F\u7528\u4E86\u8282\u6D41\u6A21\u5F0F"), 0 === S$1.indexOf("mp-") && (t4 += "\n- \u5C0F\u7A0B\u5E8F\u4E2D\u5982\u4F55\u4F7F\u7528uniCloud\uFF0C\u8BF7\u53C2\u8003\uFF1Ahttps://uniapp.dcloud.net.cn/uniCloud/publish.html#useinmp"), s3(t4);
      }
    }).then(() => {
      ne(), e.isReady = true, e.initUniCloudStatus = "fulfilled";
    }).catch((t3) => {
      console.error(t3), e.initUniCloudStatus = "rejected";
    });
  }
  const Cs = { tcb: _t, tencent: _t, aliyun: de, private: vt };
  let Ps = new class {
    init(e) {
      let t2 = {};
      const n2 = Cs[e.provider];
      if (!n2)
        throw new Error("\u672A\u63D0\u4F9B\u6B63\u786E\u7684provider\u53C2\u6570");
      t2 = n2.init(e), t2.__dev__ = {}, t2.__dev__.debugLog = "web" === S$1 && navigator.userAgent.indexOf("HBuilderX") > 0 || "app" === S$1;
      const s2 = k;
      s2 && !s2.code && (t2.__dev__.debugInfo = s2), As(t2), t2.reInit = function() {
        As(this);
      }, Pn(t2), function(e2) {
        const t3 = e2.uploadFile;
        e2.uploadFile = function(e3) {
          return t3.call(this, e3);
        };
      }(t2), function(e2) {
        e2.database = function(t3) {
          if (t3 && Object.keys(t3).length > 0)
            return e2.init(t3).database();
          if (this._database)
            return this._database;
          const n3 = Kn(Mn, { uniClient: e2 });
          return this._database = n3, n3;
        }, e2.databaseForJQL = function(t3) {
          if (t3 && Object.keys(t3).length > 0)
            return e2.init(t3).databaseForJQL();
          if (this._databaseForJQL)
            return this._databaseForJQL;
          const n3 = Kn(Mn, { uniClient: e2, isJQL: true });
          return this._databaseForJQL = n3, n3;
        };
      }(t2), function(e2) {
        e2.getCurrentUserInfo = gs, e2.chooseAndUploadFile = ys.initChooseAndUploadFile(e2), Object.assign(e2, { get mixinDatacom() {
          return ws(e2);
        } }), e2.importObject = vs(e2), e2.initSecureNetworkByWeixin = bs(e2);
      }(t2);
      return ["callFunction", "uploadFile", "deleteFile", "getTempFileURL", "downloadFile", "chooseAndUploadFile"].forEach((e2) => {
        if (!t2[e2])
          return;
        const n3 = t2[e2];
        t2[e2] = function() {
          return t2.reInit(), n3.apply(t2, Array.from(arguments));
        }, t2[e2] = Y(t2[e2], e2).bind(t2);
      }), t2.init = this.init, t2;
    }
  }();
  (() => {
    const e = I;
    let t2 = {};
    if (e && 1 === e.length)
      t2 = e[0], Ps = Ps.init(t2), Ps.isDefault = true;
    else {
      const t3 = ["auth", "callFunction", "uploadFile", "deleteFile", "getTempFileURL", "downloadFile", "database", "getCurrentUSerInfo", "importObject"];
      let n2;
      n2 = e && e.length > 0 ? "\u5E94\u7528\u6709\u591A\u4E2A\u670D\u52A1\u7A7A\u95F4\uFF0C\u8BF7\u901A\u8FC7uniCloud.init\u65B9\u6CD5\u6307\u5B9A\u8981\u4F7F\u7528\u7684\u670D\u52A1\u7A7A\u95F4" : "\u5E94\u7528\u672A\u5173\u8054\u670D\u52A1\u7A7A\u95F4\uFF0C\u8BF7\u5728uniCloud\u76EE\u5F55\u53F3\u952E\u5173\u8054\u670D\u52A1\u7A7A\u95F4", t3.forEach((e2) => {
        Ps[e2] = function() {
          return console.error(n2), Promise.reject(new Q({ code: "SYS_ERR", message: n2 }));
        };
      });
    }
    Object.assign(Ps, { get mixinDatacom() {
      return ws(Ps);
    } }), hs(Ps), Ps.addInterceptor = O, Ps.removeInterceptor = x, Ps.interceptObject = L, "web" === S$1 && (window.uniCloud = Ps);
  })();
  var Es = Ps;
  const collection = "hello";
  const _sfc_main$e = {
    data() {
      return {
        name: ""
      };
    },
    methods: {
      add() {
        uni.showLoading();
        let db = Es.database();
        db.collection(collection).add({
          name: this.name
        }).then((res) => {
          uni.showToast({
            title: this.$t("schema.add-success")
          });
        }).catch((err) => {
          uni.showModal({
            content: err.message,
            showCancel: false
          });
        }).finally(() => {
          uni.hideLoading();
        });
      }
    }
  };
  function _sfc_render$d(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "container" }, [
      vue.createElementVNode("view", null, vue.toDisplayString(_ctx.$t("schema.name")), 1),
      vue.withDirectives(vue.createElementVNode("input", {
        class: "input",
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.name = $event)
      }, null, 512), [
        [vue.vModelText, $data.name]
      ]),
      vue.createElementVNode("button", {
        type: "primary",
        onClick: _cache[1] || (_cache[1] = (...args) => $options.add && $options.add(...args))
      }, vue.toDisplayString(_ctx.$t("schema.add")), 1)
    ]);
  }
  const PagesSchemaSchema = /* @__PURE__ */ _export_sfc(_sfc_main$e, [["render", _sfc_render$d], ["__file", "C:/Users/baba/Documents/HBuilderProjects/hello_demo/pages/schema/schema.vue"]]);
  const _sfc_main$d = {
    data() {
      return {};
    },
    methods: {}
  };
  function _sfc_render$c(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view");
  }
  const PagesVerifyUnlockUnlock = /* @__PURE__ */ _export_sfc(_sfc_main$d, [["render", _sfc_render$c], ["__file", "C:/Users/baba/Documents/HBuilderProjects/hello_demo/pages/verify/unlock/unlock.vue"]]);
  const _sfc_main$c = {
    data() {
      return {};
    },
    onShow() {
    },
    methods: {
      createWallet: function() {
        uni.redirectTo({
          url: "/pages/setup-wallet/create-pin?scene=new",
          success: function(res) {
            formatAppLog("log", "at pages/setup-wallet/setup.vue:46", res);
          },
          fail: function(res) {
            formatAppLog("log", "at pages/setup-wallet/setup.vue:49", res);
          }
        });
      }
    }
  };
  function _sfc_render$b(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "container" }, [
      vue.createElementVNode("view", { class: "icon-container" }, [
        vue.createElementVNode("image", {
          class: "image",
          mode: "widthFix",
          src: "/static/img/wallet.png"
        })
      ]),
      vue.createElementVNode("view", { class: "setup-container" }, [
        vue.createElementVNode("view", { class: "setup-text" }, [
          vue.createElementVNode("view", { class: "setup-text-title font-first-title" }, "Set up your wallet"),
          vue.createElementVNode("view", { class: "setup-text-desc font-desc-black" }, "Turtle Wallet currently only supports Ethereum tokens")
        ]),
        vue.createElementVNode("view", { class: "setup-func-list" }, [
          vue.createElementVNode("view", {
            class: "setup-func",
            onClick: _cache[0] || (_cache[0] = (...args) => $options.createWallet && $options.createWallet(...args))
          }, [
            vue.createElementVNode("view", { class: "func-icon" }, [
              vue.createElementVNode("image", {
                class: "image",
                mode: "widthFix",
                src: "/static/img/create_wallet.png"
              })
            ]),
            vue.createElementVNode("view", { class: "func-title-desc" }, [
              vue.createElementVNode("view", { class: "func-title font-second-title" }, "Create new crypto wallet"),
              vue.createElementVNode("view", { class: "func-desc font-desc-black" }, "to store,send & receive")
            ])
          ]),
          vue.createElementVNode("view", { class: "setup-func" }, [
            vue.createElementVNode("view", { class: "func-icon" }, [
              vue.createElementVNode("image", {
                class: "image",
                mode: "widthFix",
                src: "/static/img/import_wallet.png"
              })
            ]),
            vue.createElementVNode("view", { class: "func-title-desc" }, [
              vue.createElementVNode("view", { class: "func-title font-second-title" }, "Import your wallet"),
              vue.createElementVNode("view", { class: "func-desc font-desc-black" }, "by Recovery Phrase or Private key")
            ])
          ])
        ])
      ])
    ]);
  }
  const PagesSetupWalletSetup = /* @__PURE__ */ _export_sfc(_sfc_main$c, [["render", _sfc_render$b], ["__file", "C:/Users/baba/Documents/HBuilderProjects/hello_demo/pages/setup-wallet/setup.vue"]]);
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  function getAugmentedNamespace(n2) {
    var f2 = n2.default;
    if (typeof f2 == "function") {
      var a2 = function() {
        return f2.apply(this, arguments);
      };
      a2.prototype = f2.prototype;
    } else
      a2 = {};
    Object.defineProperty(a2, "__esModule", { value: true });
    Object.keys(n2).forEach(function(k2) {
      var d2 = Object.getOwnPropertyDescriptor(n2, k2);
      Object.defineProperty(a2, k2, d2.get ? d2 : {
        enumerable: true,
        get: function() {
          return n2[k2];
        }
      });
    });
    return a2;
  }
  var md5$2 = { exports: {} };
  /**
   * [js-md5]{@link https://github.com/emn178/js-md5}
   *
   * @namespace md5
   * @version 0.7.3
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2014-2017
   * @license MIT
   */
  (function(module) {
    (function() {
      var ERROR = "input is invalid type";
      var WINDOW = typeof window === "object";
      var root = WINDOW ? window : {};
      if (root.JS_MD5_NO_WINDOW) {
        WINDOW = false;
      }
      var WEB_WORKER = !WINDOW && typeof self === "object";
      var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
      if (NODE_JS) {
        root = commonjsGlobal;
      } else if (WEB_WORKER) {
        root = self;
      }
      var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && true && module.exports;
      var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
      var HEX_CHARS = "0123456789abcdef".split("");
      var EXTRA = [128, 32768, 8388608, -2147483648];
      var SHIFT = [0, 8, 16, 24];
      var OUTPUT_TYPES = ["hex", "array", "digest", "buffer", "arrayBuffer", "base64"];
      var BASE64_ENCODE_CHAR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
      var blocks = [], buffer8;
      if (ARRAY_BUFFER) {
        var buffer = new ArrayBuffer(68);
        buffer8 = new Uint8Array(buffer);
        blocks = new Uint32Array(buffer);
      }
      if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {
        Array.isArray = function(obj) {
          return Object.prototype.toString.call(obj) === "[object Array]";
        };
      }
      if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
        ArrayBuffer.isView = function(obj) {
          return typeof obj === "object" && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        };
      }
      var createOutputMethod = function(outputType) {
        return function(message) {
          return new Md5(true).update(message)[outputType]();
        };
      };
      var createMethod = function() {
        var method2 = createOutputMethod("hex");
        if (NODE_JS) {
          method2 = nodeWrap(method2);
        }
        method2.create = function() {
          return new Md5();
        };
        method2.update = function(message) {
          return method2.create().update(message);
        };
        for (var i2 = 0; i2 < OUTPUT_TYPES.length; ++i2) {
          var type = OUTPUT_TYPES[i2];
          method2[type] = createOutputMethod(type);
        }
        return method2;
      };
      var nodeWrap = function(method) {
        var crypto = eval("require('crypto')");
        var Buffer = eval("require('buffer').Buffer");
        var nodeMethod = function(message) {
          if (typeof message === "string") {
            return crypto.createHash("md5").update(message, "utf8").digest("hex");
          } else {
            if (message === null || message === void 0) {
              throw ERROR;
            } else if (message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            }
          }
          if (Array.isArray(message) || ArrayBuffer.isView(message) || message.constructor === Buffer) {
            return crypto.createHash("md5").update(new Buffer(message)).digest("hex");
          } else {
            return method(message);
          }
        };
        return nodeMethod;
      };
      function Md5(sharedMemory) {
        if (sharedMemory) {
          blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
          this.blocks = blocks;
          this.buffer8 = buffer8;
        } else {
          if (ARRAY_BUFFER) {
            var buffer2 = new ArrayBuffer(68);
            this.buffer8 = new Uint8Array(buffer2);
            this.blocks = new Uint32Array(buffer2);
          } else {
            this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
          }
        }
        this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;
        this.finalized = this.hashed = false;
        this.first = true;
      }
      Md5.prototype.update = function(message) {
        if (this.finalized) {
          return;
        }
        var notString, type = typeof message;
        if (type !== "string") {
          if (type === "object") {
            if (message === null) {
              throw ERROR;
            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            } else if (!Array.isArray(message)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                throw ERROR;
              }
            }
          } else {
            throw ERROR;
          }
          notString = true;
        }
        var code, index = 0, i2, length = message.length, blocks2 = this.blocks;
        var buffer82 = this.buffer8;
        while (index < length) {
          if (this.hashed) {
            this.hashed = false;
            blocks2[0] = blocks2[16];
            blocks2[16] = blocks2[1] = blocks2[2] = blocks2[3] = blocks2[4] = blocks2[5] = blocks2[6] = blocks2[7] = blocks2[8] = blocks2[9] = blocks2[10] = blocks2[11] = blocks2[12] = blocks2[13] = blocks2[14] = blocks2[15] = 0;
          }
          if (notString) {
            if (ARRAY_BUFFER) {
              for (i2 = this.start; index < length && i2 < 64; ++index) {
                buffer82[i2++] = message[index];
              }
            } else {
              for (i2 = this.start; index < length && i2 < 64; ++index) {
                blocks2[i2 >> 2] |= message[index] << SHIFT[i2++ & 3];
              }
            }
          } else {
            if (ARRAY_BUFFER) {
              for (i2 = this.start; index < length && i2 < 64; ++index) {
                code = message.charCodeAt(index);
                if (code < 128) {
                  buffer82[i2++] = code;
                } else if (code < 2048) {
                  buffer82[i2++] = 192 | code >> 6;
                  buffer82[i2++] = 128 | code & 63;
                } else if (code < 55296 || code >= 57344) {
                  buffer82[i2++] = 224 | code >> 12;
                  buffer82[i2++] = 128 | code >> 6 & 63;
                  buffer82[i2++] = 128 | code & 63;
                } else {
                  code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);
                  buffer82[i2++] = 240 | code >> 18;
                  buffer82[i2++] = 128 | code >> 12 & 63;
                  buffer82[i2++] = 128 | code >> 6 & 63;
                  buffer82[i2++] = 128 | code & 63;
                }
              }
            } else {
              for (i2 = this.start; index < length && i2 < 64; ++index) {
                code = message.charCodeAt(index);
                if (code < 128) {
                  blocks2[i2 >> 2] |= code << SHIFT[i2++ & 3];
                } else if (code < 2048) {
                  blocks2[i2 >> 2] |= (192 | code >> 6) << SHIFT[i2++ & 3];
                  blocks2[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
                } else if (code < 55296 || code >= 57344) {
                  blocks2[i2 >> 2] |= (224 | code >> 12) << SHIFT[i2++ & 3];
                  blocks2[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];
                  blocks2[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
                } else {
                  code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);
                  blocks2[i2 >> 2] |= (240 | code >> 18) << SHIFT[i2++ & 3];
                  blocks2[i2 >> 2] |= (128 | code >> 12 & 63) << SHIFT[i2++ & 3];
                  blocks2[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];
                  blocks2[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
                }
              }
            }
          }
          this.lastByteIndex = i2;
          this.bytes += i2 - this.start;
          if (i2 >= 64) {
            this.start = i2 - 64;
            this.hash();
            this.hashed = true;
          } else {
            this.start = i2;
          }
        }
        if (this.bytes > 4294967295) {
          this.hBytes += this.bytes / 4294967296 << 0;
          this.bytes = this.bytes % 4294967296;
        }
        return this;
      };
      Md5.prototype.finalize = function() {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks2 = this.blocks, i2 = this.lastByteIndex;
        blocks2[i2 >> 2] |= EXTRA[i2 & 3];
        if (i2 >= 56) {
          if (!this.hashed) {
            this.hash();
          }
          blocks2[0] = blocks2[16];
          blocks2[16] = blocks2[1] = blocks2[2] = blocks2[3] = blocks2[4] = blocks2[5] = blocks2[6] = blocks2[7] = blocks2[8] = blocks2[9] = blocks2[10] = blocks2[11] = blocks2[12] = blocks2[13] = blocks2[14] = blocks2[15] = 0;
        }
        blocks2[14] = this.bytes << 3;
        blocks2[15] = this.hBytes << 3 | this.bytes >>> 29;
        this.hash();
      };
      Md5.prototype.hash = function() {
        var a2, b2, c2, d2, bc, da, blocks2 = this.blocks;
        if (this.first) {
          a2 = blocks2[0] - 680876937;
          a2 = (a2 << 7 | a2 >>> 25) - 271733879 << 0;
          d2 = (-1732584194 ^ a2 & 2004318071) + blocks2[1] - 117830708;
          d2 = (d2 << 12 | d2 >>> 20) + a2 << 0;
          c2 = (-271733879 ^ d2 & (a2 ^ -271733879)) + blocks2[2] - 1126478375;
          c2 = (c2 << 17 | c2 >>> 15) + d2 << 0;
          b2 = (a2 ^ c2 & (d2 ^ a2)) + blocks2[3] - 1316259209;
          b2 = (b2 << 22 | b2 >>> 10) + c2 << 0;
        } else {
          a2 = this.h0;
          b2 = this.h1;
          c2 = this.h2;
          d2 = this.h3;
          a2 += (d2 ^ b2 & (c2 ^ d2)) + blocks2[0] - 680876936;
          a2 = (a2 << 7 | a2 >>> 25) + b2 << 0;
          d2 += (c2 ^ a2 & (b2 ^ c2)) + blocks2[1] - 389564586;
          d2 = (d2 << 12 | d2 >>> 20) + a2 << 0;
          c2 += (b2 ^ d2 & (a2 ^ b2)) + blocks2[2] + 606105819;
          c2 = (c2 << 17 | c2 >>> 15) + d2 << 0;
          b2 += (a2 ^ c2 & (d2 ^ a2)) + blocks2[3] - 1044525330;
          b2 = (b2 << 22 | b2 >>> 10) + c2 << 0;
        }
        a2 += (d2 ^ b2 & (c2 ^ d2)) + blocks2[4] - 176418897;
        a2 = (a2 << 7 | a2 >>> 25) + b2 << 0;
        d2 += (c2 ^ a2 & (b2 ^ c2)) + blocks2[5] + 1200080426;
        d2 = (d2 << 12 | d2 >>> 20) + a2 << 0;
        c2 += (b2 ^ d2 & (a2 ^ b2)) + blocks2[6] - 1473231341;
        c2 = (c2 << 17 | c2 >>> 15) + d2 << 0;
        b2 += (a2 ^ c2 & (d2 ^ a2)) + blocks2[7] - 45705983;
        b2 = (b2 << 22 | b2 >>> 10) + c2 << 0;
        a2 += (d2 ^ b2 & (c2 ^ d2)) + blocks2[8] + 1770035416;
        a2 = (a2 << 7 | a2 >>> 25) + b2 << 0;
        d2 += (c2 ^ a2 & (b2 ^ c2)) + blocks2[9] - 1958414417;
        d2 = (d2 << 12 | d2 >>> 20) + a2 << 0;
        c2 += (b2 ^ d2 & (a2 ^ b2)) + blocks2[10] - 42063;
        c2 = (c2 << 17 | c2 >>> 15) + d2 << 0;
        b2 += (a2 ^ c2 & (d2 ^ a2)) + blocks2[11] - 1990404162;
        b2 = (b2 << 22 | b2 >>> 10) + c2 << 0;
        a2 += (d2 ^ b2 & (c2 ^ d2)) + blocks2[12] + 1804603682;
        a2 = (a2 << 7 | a2 >>> 25) + b2 << 0;
        d2 += (c2 ^ a2 & (b2 ^ c2)) + blocks2[13] - 40341101;
        d2 = (d2 << 12 | d2 >>> 20) + a2 << 0;
        c2 += (b2 ^ d2 & (a2 ^ b2)) + blocks2[14] - 1502002290;
        c2 = (c2 << 17 | c2 >>> 15) + d2 << 0;
        b2 += (a2 ^ c2 & (d2 ^ a2)) + blocks2[15] + 1236535329;
        b2 = (b2 << 22 | b2 >>> 10) + c2 << 0;
        a2 += (c2 ^ d2 & (b2 ^ c2)) + blocks2[1] - 165796510;
        a2 = (a2 << 5 | a2 >>> 27) + b2 << 0;
        d2 += (b2 ^ c2 & (a2 ^ b2)) + blocks2[6] - 1069501632;
        d2 = (d2 << 9 | d2 >>> 23) + a2 << 0;
        c2 += (a2 ^ b2 & (d2 ^ a2)) + blocks2[11] + 643717713;
        c2 = (c2 << 14 | c2 >>> 18) + d2 << 0;
        b2 += (d2 ^ a2 & (c2 ^ d2)) + blocks2[0] - 373897302;
        b2 = (b2 << 20 | b2 >>> 12) + c2 << 0;
        a2 += (c2 ^ d2 & (b2 ^ c2)) + blocks2[5] - 701558691;
        a2 = (a2 << 5 | a2 >>> 27) + b2 << 0;
        d2 += (b2 ^ c2 & (a2 ^ b2)) + blocks2[10] + 38016083;
        d2 = (d2 << 9 | d2 >>> 23) + a2 << 0;
        c2 += (a2 ^ b2 & (d2 ^ a2)) + blocks2[15] - 660478335;
        c2 = (c2 << 14 | c2 >>> 18) + d2 << 0;
        b2 += (d2 ^ a2 & (c2 ^ d2)) + blocks2[4] - 405537848;
        b2 = (b2 << 20 | b2 >>> 12) + c2 << 0;
        a2 += (c2 ^ d2 & (b2 ^ c2)) + blocks2[9] + 568446438;
        a2 = (a2 << 5 | a2 >>> 27) + b2 << 0;
        d2 += (b2 ^ c2 & (a2 ^ b2)) + blocks2[14] - 1019803690;
        d2 = (d2 << 9 | d2 >>> 23) + a2 << 0;
        c2 += (a2 ^ b2 & (d2 ^ a2)) + blocks2[3] - 187363961;
        c2 = (c2 << 14 | c2 >>> 18) + d2 << 0;
        b2 += (d2 ^ a2 & (c2 ^ d2)) + blocks2[8] + 1163531501;
        b2 = (b2 << 20 | b2 >>> 12) + c2 << 0;
        a2 += (c2 ^ d2 & (b2 ^ c2)) + blocks2[13] - 1444681467;
        a2 = (a2 << 5 | a2 >>> 27) + b2 << 0;
        d2 += (b2 ^ c2 & (a2 ^ b2)) + blocks2[2] - 51403784;
        d2 = (d2 << 9 | d2 >>> 23) + a2 << 0;
        c2 += (a2 ^ b2 & (d2 ^ a2)) + blocks2[7] + 1735328473;
        c2 = (c2 << 14 | c2 >>> 18) + d2 << 0;
        b2 += (d2 ^ a2 & (c2 ^ d2)) + blocks2[12] - 1926607734;
        b2 = (b2 << 20 | b2 >>> 12) + c2 << 0;
        bc = b2 ^ c2;
        a2 += (bc ^ d2) + blocks2[5] - 378558;
        a2 = (a2 << 4 | a2 >>> 28) + b2 << 0;
        d2 += (bc ^ a2) + blocks2[8] - 2022574463;
        d2 = (d2 << 11 | d2 >>> 21) + a2 << 0;
        da = d2 ^ a2;
        c2 += (da ^ b2) + blocks2[11] + 1839030562;
        c2 = (c2 << 16 | c2 >>> 16) + d2 << 0;
        b2 += (da ^ c2) + blocks2[14] - 35309556;
        b2 = (b2 << 23 | b2 >>> 9) + c2 << 0;
        bc = b2 ^ c2;
        a2 += (bc ^ d2) + blocks2[1] - 1530992060;
        a2 = (a2 << 4 | a2 >>> 28) + b2 << 0;
        d2 += (bc ^ a2) + blocks2[4] + 1272893353;
        d2 = (d2 << 11 | d2 >>> 21) + a2 << 0;
        da = d2 ^ a2;
        c2 += (da ^ b2) + blocks2[7] - 155497632;
        c2 = (c2 << 16 | c2 >>> 16) + d2 << 0;
        b2 += (da ^ c2) + blocks2[10] - 1094730640;
        b2 = (b2 << 23 | b2 >>> 9) + c2 << 0;
        bc = b2 ^ c2;
        a2 += (bc ^ d2) + blocks2[13] + 681279174;
        a2 = (a2 << 4 | a2 >>> 28) + b2 << 0;
        d2 += (bc ^ a2) + blocks2[0] - 358537222;
        d2 = (d2 << 11 | d2 >>> 21) + a2 << 0;
        da = d2 ^ a2;
        c2 += (da ^ b2) + blocks2[3] - 722521979;
        c2 = (c2 << 16 | c2 >>> 16) + d2 << 0;
        b2 += (da ^ c2) + blocks2[6] + 76029189;
        b2 = (b2 << 23 | b2 >>> 9) + c2 << 0;
        bc = b2 ^ c2;
        a2 += (bc ^ d2) + blocks2[9] - 640364487;
        a2 = (a2 << 4 | a2 >>> 28) + b2 << 0;
        d2 += (bc ^ a2) + blocks2[12] - 421815835;
        d2 = (d2 << 11 | d2 >>> 21) + a2 << 0;
        da = d2 ^ a2;
        c2 += (da ^ b2) + blocks2[15] + 530742520;
        c2 = (c2 << 16 | c2 >>> 16) + d2 << 0;
        b2 += (da ^ c2) + blocks2[2] - 995338651;
        b2 = (b2 << 23 | b2 >>> 9) + c2 << 0;
        a2 += (c2 ^ (b2 | ~d2)) + blocks2[0] - 198630844;
        a2 = (a2 << 6 | a2 >>> 26) + b2 << 0;
        d2 += (b2 ^ (a2 | ~c2)) + blocks2[7] + 1126891415;
        d2 = (d2 << 10 | d2 >>> 22) + a2 << 0;
        c2 += (a2 ^ (d2 | ~b2)) + blocks2[14] - 1416354905;
        c2 = (c2 << 15 | c2 >>> 17) + d2 << 0;
        b2 += (d2 ^ (c2 | ~a2)) + blocks2[5] - 57434055;
        b2 = (b2 << 21 | b2 >>> 11) + c2 << 0;
        a2 += (c2 ^ (b2 | ~d2)) + blocks2[12] + 1700485571;
        a2 = (a2 << 6 | a2 >>> 26) + b2 << 0;
        d2 += (b2 ^ (a2 | ~c2)) + blocks2[3] - 1894986606;
        d2 = (d2 << 10 | d2 >>> 22) + a2 << 0;
        c2 += (a2 ^ (d2 | ~b2)) + blocks2[10] - 1051523;
        c2 = (c2 << 15 | c2 >>> 17) + d2 << 0;
        b2 += (d2 ^ (c2 | ~a2)) + blocks2[1] - 2054922799;
        b2 = (b2 << 21 | b2 >>> 11) + c2 << 0;
        a2 += (c2 ^ (b2 | ~d2)) + blocks2[8] + 1873313359;
        a2 = (a2 << 6 | a2 >>> 26) + b2 << 0;
        d2 += (b2 ^ (a2 | ~c2)) + blocks2[15] - 30611744;
        d2 = (d2 << 10 | d2 >>> 22) + a2 << 0;
        c2 += (a2 ^ (d2 | ~b2)) + blocks2[6] - 1560198380;
        c2 = (c2 << 15 | c2 >>> 17) + d2 << 0;
        b2 += (d2 ^ (c2 | ~a2)) + blocks2[13] + 1309151649;
        b2 = (b2 << 21 | b2 >>> 11) + c2 << 0;
        a2 += (c2 ^ (b2 | ~d2)) + blocks2[4] - 145523070;
        a2 = (a2 << 6 | a2 >>> 26) + b2 << 0;
        d2 += (b2 ^ (a2 | ~c2)) + blocks2[11] - 1120210379;
        d2 = (d2 << 10 | d2 >>> 22) + a2 << 0;
        c2 += (a2 ^ (d2 | ~b2)) + blocks2[2] + 718787259;
        c2 = (c2 << 15 | c2 >>> 17) + d2 << 0;
        b2 += (d2 ^ (c2 | ~a2)) + blocks2[9] - 343485551;
        b2 = (b2 << 21 | b2 >>> 11) + c2 << 0;
        if (this.first) {
          this.h0 = a2 + 1732584193 << 0;
          this.h1 = b2 - 271733879 << 0;
          this.h2 = c2 - 1732584194 << 0;
          this.h3 = d2 + 271733878 << 0;
          this.first = false;
        } else {
          this.h0 = this.h0 + a2 << 0;
          this.h1 = this.h1 + b2 << 0;
          this.h2 = this.h2 + c2 << 0;
          this.h3 = this.h3 + d2 << 0;
        }
      };
      Md5.prototype.hex = function() {
        this.finalize();
        var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;
        return HEX_CHARS[h0 >> 4 & 15] + HEX_CHARS[h0 & 15] + HEX_CHARS[h0 >> 12 & 15] + HEX_CHARS[h0 >> 8 & 15] + HEX_CHARS[h0 >> 20 & 15] + HEX_CHARS[h0 >> 16 & 15] + HEX_CHARS[h0 >> 28 & 15] + HEX_CHARS[h0 >> 24 & 15] + HEX_CHARS[h1 >> 4 & 15] + HEX_CHARS[h1 & 15] + HEX_CHARS[h1 >> 12 & 15] + HEX_CHARS[h1 >> 8 & 15] + HEX_CHARS[h1 >> 20 & 15] + HEX_CHARS[h1 >> 16 & 15] + HEX_CHARS[h1 >> 28 & 15] + HEX_CHARS[h1 >> 24 & 15] + HEX_CHARS[h2 >> 4 & 15] + HEX_CHARS[h2 & 15] + HEX_CHARS[h2 >> 12 & 15] + HEX_CHARS[h2 >> 8 & 15] + HEX_CHARS[h2 >> 20 & 15] + HEX_CHARS[h2 >> 16 & 15] + HEX_CHARS[h2 >> 28 & 15] + HEX_CHARS[h2 >> 24 & 15] + HEX_CHARS[h3 >> 4 & 15] + HEX_CHARS[h3 & 15] + HEX_CHARS[h3 >> 12 & 15] + HEX_CHARS[h3 >> 8 & 15] + HEX_CHARS[h3 >> 20 & 15] + HEX_CHARS[h3 >> 16 & 15] + HEX_CHARS[h3 >> 28 & 15] + HEX_CHARS[h3 >> 24 & 15];
      };
      Md5.prototype.toString = Md5.prototype.hex;
      Md5.prototype.digest = function() {
        this.finalize();
        var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;
        return [
          h0 & 255,
          h0 >> 8 & 255,
          h0 >> 16 & 255,
          h0 >> 24 & 255,
          h1 & 255,
          h1 >> 8 & 255,
          h1 >> 16 & 255,
          h1 >> 24 & 255,
          h2 & 255,
          h2 >> 8 & 255,
          h2 >> 16 & 255,
          h2 >> 24 & 255,
          h3 & 255,
          h3 >> 8 & 255,
          h3 >> 16 & 255,
          h3 >> 24 & 255
        ];
      };
      Md5.prototype.array = Md5.prototype.digest;
      Md5.prototype.arrayBuffer = function() {
        this.finalize();
        var buffer2 = new ArrayBuffer(16);
        var blocks2 = new Uint32Array(buffer2);
        blocks2[0] = this.h0;
        blocks2[1] = this.h1;
        blocks2[2] = this.h2;
        blocks2[3] = this.h3;
        return buffer2;
      };
      Md5.prototype.buffer = Md5.prototype.arrayBuffer;
      Md5.prototype.base64 = function() {
        var v1, v2, v3, base64Str = "", bytes2 = this.array();
        for (var i2 = 0; i2 < 15; ) {
          v1 = bytes2[i2++];
          v2 = bytes2[i2++];
          v3 = bytes2[i2++];
          base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] + BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] + BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] + BASE64_ENCODE_CHAR[v3 & 63];
        }
        v1 = bytes2[i2];
        base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] + BASE64_ENCODE_CHAR[v1 << 4 & 63] + "==";
        return base64Str;
      };
      var exports = createMethod();
      if (COMMON_JS) {
        module.exports = exports;
      } else {
        root.md5 = exports;
      }
    })();
  })(md5$2);
  const md5$1 = md5$2.exports;
  const pin = {
    pin_store_key: "storage_pin_code",
    setPIN: function(pin_code) {
      try {
        uni.setStorageSync(this.pin_store_key, md5$1(pin_code));
      } catch (e) {
        uni.showToast({
          title: "failed to storage pin"
        });
      }
    },
    getPIN: function() {
      try {
        const pin_code = uni.getStorageSync(this.pin_store_key);
        return pin_code;
      } catch (e) {
        return false;
      }
    },
    checkPinStatus: function() {
      var pin_code = this.getPIN();
      if (pin_code) {
        return pin_code;
      }
      setTimeout(() => {
        uni.showModal({
          title: "Can't find the PIN, Please reset wallet",
          showCancel: false,
          confirmText: "Got it",
          success: function(res) {
            if (res.confirm) {
              uni.redirectTo({
                url: "../setup-wallet/setup",
                success: function() {
                },
                fail: function(res2) {
                  formatAppLog("log", "at common/pin.js:42", res2);
                }
              });
            } else if (res.cancel)
              ;
          }
        });
        formatAppLog("log", "at common/pin.js:49", "\u672A\u627E\u5230PIN\uFF0C\u8BF7\u91CD\u65B0\u8BBE\u7F6E\u94B1\u5305");
      }, 1e3);
      return false;
    }
  };
  const _sfc_main$b = {
    data() {
      return {
        scene: "new",
        create_pin_title: "Create a PIN",
        create_pin_desc: "This PIN will unlock your wallet only on this device",
        pin_code: "",
        pin_code_length: 0,
        pin_code_max_length: CONFIG.pin_code_max_length,
        keyboard_value: [],
        animationData: ["", "", "", "", "", "", "", "", "", "", "", ""],
        animation: ["", "", "", "", "", "", "", "", "", "", "", ""]
      };
    },
    onLoad(param) {
      for (var i2 = 0; i2 < CONFIG.pin_keyboard_value.length; i2++) {
        let ob = { "value": CONFIG.pin_keyboard_value[i2], "key": i2 };
        this.keyboard_value.push(ob);
      }
      formatAppLog("log", "at pages/setup-wallet/create-pin.vue:48", this.keyboard_value);
      this.scene = param.scene == "confirm" ? param.scene : "new";
      if ("confirm" == this.scene) {
        this.create_pin_title = "Type your PIN again";
        this.create_pin_desc = "Make sure remember it all time";
      }
      for (var i2 = 0; i2 < this.animation.length; i2++) {
        this.animation[i2] = uni.createAnimation();
      }
    },
    onUnload() {
      this.animationData = ["", "", "", "", "", "", "", "", "", "", "", ""];
    },
    onShow() {
    },
    methods: {
      clickKeyboard: function(n2) {
        formatAppLog("log", "at pages/setup-wallet/create-pin.vue:72", n2);
        if ("{$del}" == n2.value && this.pin_code.length > 0) {
          this.pin_code = this.pin_code.substr(0, this.pin_code.length - 1);
          this.pin_code_length = this.pin_code.length;
          formatAppLog("log", "at pages/setup-wallet/create-pin.vue:76", this.pin_code);
        }
        if (this.pin_code_max_length > this.pin_code.length && n2.value != "{$del}") {
          this.pin_code += n2.value;
          this.pin_code_length = this.pin_code.length;
          formatAppLog("log", "at pages/setup-wallet/create-pin.vue:81", this.pin_code);
        }
        if (this.pin_code_max_length == this.pin_code.length) {
          if ("confirm" == this.scene) {
            const first_pin_code = pin.getPIN();
            if (first_pin_code != md5$1(this.pin_code)) {
              uni.showToast({
                title: "\u4E24\u6B21\u8F93\u5165\u4E0D\u4E00\u81F4",
                icon: "error"
              });
              return;
            }
            uni.redirectTo({
              url: "/pages/setup-wallet/wallet-phrase"
            });
            return;
          }
          pin.setPIN(this.pin_code);
          uni.redirectTo({
            url: "/pages/setup-wallet/create-pin?scene=confirm"
          });
          return;
        }
        this.animation[n2.key].opacity(0.1).step().opacity(1).step();
        this.animationData[n2.key] = this.animation[n2.key].export();
      }
    }
  };
  function _sfc_render$a(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "container" }, [
      vue.createElementVNode("view", { class: "create-pin-text" }, [
        vue.createElementVNode("view", { class: "create-pin-title font-first-title" }, vue.toDisplayString($data.create_pin_title), 1),
        vue.createElementVNode("view", { class: "create-pin-desc font-desc-black" }, vue.toDisplayString($data.create_pin_desc), 1)
      ]),
      vue.createElementVNode("view", { class: "create-pin-code" }, [
        (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($data.pin_code_max_length, (index) => {
          return vue.openBlock(), vue.createElementBlock("view", {
            class: vue.normalizeClass(["code-item", [$data.pin_code_length > index - 1 ? "active" : ""]])
          }, null, 2);
        }), 256))
      ]),
      vue.createElementVNode("view", { class: "create-pin-keyboard" }, [
        (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($data.keyboard_value, (item, index) => {
          return vue.openBlock(), vue.createElementBlock("view", {
            class: "keyboard-item",
            animation: $data.animationData[item.key],
            onClick: ($event) => $options.clickKeyboard(item)
          }, [
            item.value != "{$del}" ? (vue.openBlock(), vue.createElementBlock("view", { key: 0 }, vue.toDisplayString(item.value), 1)) : item.value == "{$del}" ? (vue.openBlock(), vue.createElementBlock("view", { key: 1 }, [
              vue.createElementVNode("image", {
                class: "del-icon",
                mode: "widthFix",
                src: "/static/img/keyboard_del.png"
              })
            ])) : vue.createCommentVNode("v-if", true)
          ], 8, ["animation", "onClick"]);
        }), 256))
      ])
    ]);
  }
  const PagesSetupWalletCreatePin = /* @__PURE__ */ _export_sfc(_sfc_main$b, [["render", _sfc_render$a], ["__file", "C:/Users/baba/Documents/HBuilderProjects/hello_demo/pages/setup-wallet/create-pin.vue"]]);
  const _sfc_main$a = {
    data() {
      return {};
    },
    methods: {}
  };
  function _sfc_render$9(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view");
  }
  const PagesSetupWalletImportWallet = /* @__PURE__ */ _export_sfc(_sfc_main$a, [["render", _sfc_render$9], ["__file", "C:/Users/baba/Documents/HBuilderProjects/hello_demo/pages/setup-wallet/import-wallet.vue"]]);
  const version = "6.0.2";
  function checkType(value, type, name) {
    const types = type.split("|").map((t2) => t2.trim());
    for (let i2 = 0; i2 < types.length; i2++) {
      switch (type) {
        case "any":
          return;
        case "bigint":
        case "boolean":
        case "number":
        case "string":
          if (typeof value === type) {
            return;
          }
      }
    }
    const error = new Error(`invalid value for type ${type}`);
    error.code = "INVALID_ARGUMENT";
    error.argument = `value.${name}`;
    error.value = value;
    throw error;
  }
  async function resolveProperties(value) {
    const keys = Object.keys(value);
    const results = await Promise.all(keys.map((k2) => Promise.resolve(value[k2])));
    return results.reduce((accum, v2, index) => {
      accum[keys[index]] = v2;
      return accum;
    }, {});
  }
  function defineProperties(target, values, types) {
    for (let key in values) {
      let value = values[key];
      const type = types ? types[key] : null;
      if (type) {
        checkType(value, type, key);
      }
      Object.defineProperty(target, key, { enumerable: true, value, writable: false });
    }
  }
  function stringify(value) {
    if (value == null) {
      return "null";
    }
    if (Array.isArray(value)) {
      return "[ " + value.map(stringify).join(", ") + " ]";
    }
    if (value instanceof Uint8Array) {
      const HEX = "0123456789abcdef";
      let result = "0x";
      for (let i2 = 0; i2 < value.length; i2++) {
        result += HEX[value[i2] >> 4];
        result += HEX[value[i2] & 15];
      }
      return result;
    }
    if (typeof value === "object" && typeof value.toJSON === "function") {
      return stringify(value.toJSON());
    }
    switch (typeof value) {
      case "boolean":
      case "symbol":
        return value.toString();
      case "bigint":
        return BigInt(value).toString();
      case "number":
        return value.toString();
      case "string":
        return JSON.stringify(value);
      case "object": {
        const keys = Object.keys(value);
        keys.sort();
        return "{ " + keys.map((k2) => `${stringify(k2)}: ${stringify(value[k2])}`).join(", ") + " }";
      }
    }
    return `[ COULD NOT SERIALIZE ]`;
  }
  function isError(error, code) {
    return error && error.code === code;
  }
  function isCallException(error) {
    return isError(error, "CALL_EXCEPTION");
  }
  function makeError(message, code, info) {
    {
      const details = [];
      if (info) {
        if ("message" in info || "code" in info || "name" in info) {
          throw new Error(`value will overwrite populated values: ${stringify(info)}`);
        }
        for (const key in info) {
          const value = info[key];
          details.push(key + "=" + stringify(value));
        }
      }
      details.push(`code=${code}`);
      details.push(`version=${version}`);
      if (details.length) {
        message += " (" + details.join(", ") + ")";
      }
    }
    let error;
    switch (code) {
      case "INVALID_ARGUMENT":
        error = new TypeError(message);
        break;
      case "NUMERIC_FAULT":
      case "BUFFER_OVERRUN":
        error = new RangeError(message);
        break;
      default:
        error = new Error(message);
    }
    defineProperties(error, { code });
    if (info) {
      defineProperties(error, info);
    }
    return error;
  }
  function assert$1(check, message, code, info) {
    if (!check) {
      throw makeError(message, code, info);
    }
  }
  function assertArgument(check, message, name, value) {
    assert$1(check, message, "INVALID_ARGUMENT", { argument: name, value });
  }
  function assertArgumentCount(count, expectedCount, message) {
    if (message == null) {
      message = "";
    }
    if (message) {
      message = ": " + message;
    }
    assert$1(count >= expectedCount, "missing arguemnt" + message, "MISSING_ARGUMENT", {
      count,
      expectedCount
    });
    assert$1(count <= expectedCount, "too many arguemnts" + message, "UNEXPECTED_ARGUMENT", {
      count,
      expectedCount
    });
  }
  const _normalizeForms = ["NFD", "NFC", "NFKD", "NFKC"].reduce((accum, form) => {
    try {
      if ("test".normalize(form) !== "test") {
        throw new Error("bad");
      }
      ;
      if (form === "NFD") {
        const check = String.fromCharCode(233).normalize("NFD");
        const expected = String.fromCharCode(101, 769);
        if (check !== expected) {
          throw new Error("broken");
        }
      }
      accum.push(form);
    } catch (error) {
    }
    return accum;
  }, []);
  function assertNormalize(form) {
    assert$1(_normalizeForms.indexOf(form) >= 0, "platform missing String.prototype.normalize", "UNSUPPORTED_OPERATION", {
      operation: "String.prototype.normalize",
      info: { form }
    });
  }
  function assertPrivate(givenGuard, guard, className) {
    if (className == null) {
      className = "";
    }
    if (givenGuard !== guard) {
      let method2 = className, operation = "new";
      if (className) {
        method2 += ".";
        operation += " " + className;
      }
      assert$1(false, `private constructor; use ${method2}from* methods`, "UNSUPPORTED_OPERATION", {
        operation
      });
    }
  }
  function _getBytes(value, name, copy2) {
    if (value instanceof Uint8Array) {
      if (copy2) {
        return new Uint8Array(value);
      }
      return value;
    }
    if (typeof value === "string" && value.match(/^0x([0-9a-f][0-9a-f])*$/i)) {
      const result = new Uint8Array((value.length - 2) / 2);
      let offset = 2;
      for (let i2 = 0; i2 < result.length; i2++) {
        result[i2] = parseInt(value.substring(offset, offset + 2), 16);
        offset += 2;
      }
      return result;
    }
    assertArgument(false, "invalid BytesLike value", name || "value", value);
  }
  function getBytes(value, name) {
    return _getBytes(value, name, false);
  }
  function getBytesCopy(value, name) {
    return _getBytes(value, name, true);
  }
  function isHexString(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }
    if (typeof length === "number" && value.length !== 2 + 2 * length) {
      return false;
    }
    if (length === true && value.length % 2 !== 0) {
      return false;
    }
    return true;
  }
  function isBytesLike(value) {
    return isHexString(value, true) || value instanceof Uint8Array;
  }
  const HexCharacters = "0123456789abcdef";
  function hexlify(data) {
    const bytes2 = getBytes(data);
    let result = "0x";
    for (let i2 = 0; i2 < bytes2.length; i2++) {
      const v2 = bytes2[i2];
      result += HexCharacters[(v2 & 240) >> 4] + HexCharacters[v2 & 15];
    }
    return result;
  }
  function concat(datas) {
    return "0x" + datas.map((d2) => hexlify(d2).substring(2)).join("");
  }
  function dataLength(data) {
    if (isHexString(data, true)) {
      return (data.length - 2) / 2;
    }
    return getBytes(data).length;
  }
  function dataSlice(data, start, end) {
    const bytes2 = getBytes(data);
    if (end != null && end > bytes2.length) {
      assert$1(false, "cannot slice beyond data bounds", "BUFFER_OVERRUN", {
        buffer: bytes2,
        length: bytes2.length,
        offset: end
      });
    }
    return hexlify(bytes2.slice(start == null ? 0 : start, end == null ? bytes2.length : end));
  }
  function zeroPad(data, length, left) {
    const bytes2 = getBytes(data);
    assert$1(length >= bytes2.length, "padding exceeds data length", "BUFFER_OVERRUN", {
      buffer: new Uint8Array(bytes2),
      length,
      offset: length + 1
    });
    const result = new Uint8Array(length);
    result.fill(0);
    if (left) {
      result.set(bytes2, length - bytes2.length);
    } else {
      result.set(bytes2, 0);
    }
    return hexlify(result);
  }
  function zeroPadValue(data, length) {
    return zeroPad(data, length, true);
  }
  const BN_0$a = BigInt(0);
  const BN_1$4 = BigInt(1);
  const maxValue = 9007199254740991;
  function fromTwos(_value2, _width) {
    const value = getUint(_value2, "value");
    const width = BigInt(getNumber(_width, "width"));
    assert$1(value >> width === BN_0$a, "overflow", "NUMERIC_FAULT", {
      operation: "fromTwos",
      fault: "overflow",
      value: _value2
    });
    if (value >> width - BN_1$4) {
      const mask2 = (BN_1$4 << width) - BN_1$4;
      return -((~value & mask2) + BN_1$4);
    }
    return value;
  }
  function toTwos(_value2, _width) {
    let value = getBigInt(_value2, "value");
    const width = BigInt(getNumber(_width, "width"));
    const limit = BN_1$4 << width - BN_1$4;
    if (value < BN_0$a) {
      value = -value;
      assert$1(value <= limit, "too low", "NUMERIC_FAULT", {
        operation: "toTwos",
        fault: "overflow",
        value: _value2
      });
      const mask2 = (BN_1$4 << width) - BN_1$4;
      return (~value & mask2) + BN_1$4;
    } else {
      assert$1(value < limit, "too high", "NUMERIC_FAULT", {
        operation: "toTwos",
        fault: "overflow",
        value: _value2
      });
    }
    return value;
  }
  function mask(_value2, _bits) {
    const value = getUint(_value2, "value");
    const bits = BigInt(getNumber(_bits, "bits"));
    return value & (BN_1$4 << bits) - BN_1$4;
  }
  function getBigInt(value, name) {
    switch (typeof value) {
      case "bigint":
        return value;
      case "number":
        assertArgument(Number.isInteger(value), "underflow", name || "value", value);
        assertArgument(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
        return BigInt(value);
      case "string":
        try {
          if (value === "") {
            throw new Error("empty string");
          }
          if (value[0] === "-" && value[1] !== "-") {
            return -BigInt(value.substring(1));
          }
          return BigInt(value);
        } catch (e) {
          assertArgument(false, `invalid BigNumberish string: ${e.message}`, name || "value", value);
        }
    }
    assertArgument(false, "invalid BigNumberish value", name || "value", value);
  }
  function getUint(value, name) {
    const result = getBigInt(value, name);
    assert$1(result >= BN_0$a, "unsigned value cannot be negative", "NUMERIC_FAULT", {
      fault: "overflow",
      operation: "getUint",
      value
    });
    return result;
  }
  const Nibbles$1 = "0123456789abcdef";
  function toBigInt(value) {
    if (value instanceof Uint8Array) {
      let result = "0x0";
      for (const v2 of value) {
        result += Nibbles$1[v2 >> 4];
        result += Nibbles$1[v2 & 15];
      }
      return BigInt(result);
    }
    return getBigInt(value);
  }
  function getNumber(value, name) {
    switch (typeof value) {
      case "bigint":
        assertArgument(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
        return Number(value);
      case "number":
        assertArgument(Number.isInteger(value), "underflow", name || "value", value);
        assertArgument(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
        return value;
      case "string":
        try {
          if (value === "") {
            throw new Error("empty string");
          }
          return getNumber(BigInt(value), name);
        } catch (e) {
          assertArgument(false, `invalid numeric string: ${e.message}`, name || "value", value);
        }
    }
    assertArgument(false, "invalid numeric value", name || "value", value);
  }
  function toNumber(value) {
    return getNumber(toBigInt(value));
  }
  function toBeHex(_value2, _width) {
    const value = getUint(_value2, "value");
    let result = value.toString(16);
    if (_width == null) {
      if (result.length % 2) {
        result = "0" + result;
      }
    } else {
      const width = getNumber(_width, "width");
      assert$1(width * 2 >= result.length, `value exceeds width (${width} bits)`, "NUMERIC_FAULT", {
        operation: "toBeHex",
        fault: "overflow",
        value: _value2
      });
      while (result.length < width * 2) {
        result = "0" + result;
      }
    }
    return "0x" + result;
  }
  function toBeArray(_value2) {
    const value = getUint(_value2, "value");
    if (value === BN_0$a) {
      return new Uint8Array([]);
    }
    let hex = value.toString(16);
    if (hex.length % 2) {
      hex = "0" + hex;
    }
    const result = new Uint8Array(hex.length / 2);
    for (let i2 = 0; i2 < result.length; i2++) {
      const offset = i2 * 2;
      result[i2] = parseInt(hex.substring(offset, offset + 2), 16);
    }
    return result;
  }
  function toQuantity(value) {
    let result = hexlify(isBytesLike(value) ? value : toBeArray(value)).substring(2);
    while (result.substring(0, 1) === "0") {
      result = result.substring(1);
    }
    if (result === "") {
      result = "0";
    }
    return "0x" + result;
  }
  const Alphabet = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
  let Lookup = null;
  function getAlpha(letter) {
    if (Lookup == null) {
      Lookup = {};
      for (let i2 = 0; i2 < Alphabet.length; i2++) {
        Lookup[Alphabet[i2]] = BigInt(i2);
      }
    }
    const result = Lookup[letter];
    assertArgument(result != null, `invalid base58 value`, "letter", letter);
    return result;
  }
  const BN_0$9 = BigInt(0);
  const BN_58 = BigInt(58);
  function encodeBase58(_value2) {
    let value = toBigInt(getBytes(_value2));
    let result = "";
    while (value) {
      result = Alphabet[Number(value % BN_58)] + result;
      value /= BN_58;
    }
    return result;
  }
  function decodeBase58(value) {
    let result = BN_0$9;
    for (let i2 = 0; i2 < value.length; i2++) {
      result *= BN_58;
      result += getAlpha(value[i2]);
    }
    return result;
  }
  function decodeBase64(textData) {
    textData = atob(textData);
    const data = new Uint8Array(textData.length);
    for (let i2 = 0; i2 < textData.length; i2++) {
      data[i2] = textData.charCodeAt(i2);
    }
    return getBytes(data);
  }
  function encodeBase64(_data5) {
    const data = getBytes(_data5);
    let textData = "";
    for (let i2 = 0; i2 < data.length; i2++) {
      textData += String.fromCharCode(data[i2]);
    }
    return btoa(textData);
  }
  class EventPayload {
    constructor(emitter, listener, filter) {
      __privateAdd(this, _listener, void 0);
      __privateSet(this, _listener, listener);
      defineProperties(this, { emitter, filter });
    }
    async removeListener() {
      if (__privateGet(this, _listener) == null) {
        return;
      }
      await this.emitter.off(this.filter, __privateGet(this, _listener));
    }
  }
  _listener = new WeakMap();
  function errorFunc(reason, offset, bytes2, output2, badCodepoint) {
    assertArgument(false, `invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes2);
  }
  function ignoreFunc(reason, offset, bytes2, output2, badCodepoint) {
    if (reason === "BAD_PREFIX" || reason === "UNEXPECTED_CONTINUE") {
      let i2 = 0;
      for (let o2 = offset + 1; o2 < bytes2.length; o2++) {
        if (bytes2[o2] >> 6 !== 2) {
          break;
        }
        i2++;
      }
      return i2;
    }
    if (reason === "OVERRUN") {
      return bytes2.length - offset - 1;
    }
    return 0;
  }
  function replaceFunc(reason, offset, bytes2, output2, badCodepoint) {
    if (reason === "OVERLONG") {
      assertArgument(typeof badCodepoint === "number", "invalid bad code point for replacement", "badCodepoint", badCodepoint);
      output2.push(badCodepoint);
      return 0;
    }
    output2.push(65533);
    return ignoreFunc(reason, offset, bytes2);
  }
  const Utf8ErrorFuncs = Object.freeze({
    error: errorFunc,
    ignore: ignoreFunc,
    replace: replaceFunc
  });
  function getUtf8CodePoints(_bytes, onError) {
    if (onError == null) {
      onError = Utf8ErrorFuncs.error;
    }
    const bytes2 = getBytes(_bytes, "bytes");
    const result = [];
    let i2 = 0;
    while (i2 < bytes2.length) {
      const c2 = bytes2[i2++];
      if (c2 >> 7 === 0) {
        result.push(c2);
        continue;
      }
      let extraLength = null;
      let overlongMask = null;
      if ((c2 & 224) === 192) {
        extraLength = 1;
        overlongMask = 127;
      } else if ((c2 & 240) === 224) {
        extraLength = 2;
        overlongMask = 2047;
      } else if ((c2 & 248) === 240) {
        extraLength = 3;
        overlongMask = 65535;
      } else {
        if ((c2 & 192) === 128) {
          i2 += onError("UNEXPECTED_CONTINUE", i2 - 1, bytes2, result);
        } else {
          i2 += onError("BAD_PREFIX", i2 - 1, bytes2, result);
        }
        continue;
      }
      if (i2 - 1 + extraLength >= bytes2.length) {
        i2 += onError("OVERRUN", i2 - 1, bytes2, result);
        continue;
      }
      let res = c2 & (1 << 8 - extraLength - 1) - 1;
      for (let j2 = 0; j2 < extraLength; j2++) {
        let nextChar = bytes2[i2];
        if ((nextChar & 192) != 128) {
          i2 += onError("MISSING_CONTINUE", i2, bytes2, result);
          res = null;
          break;
        }
        res = res << 6 | nextChar & 63;
        i2++;
      }
      if (res === null) {
        continue;
      }
      if (res > 1114111) {
        i2 += onError("OUT_OF_RANGE", i2 - 1 - extraLength, bytes2, result, res);
        continue;
      }
      if (res >= 55296 && res <= 57343) {
        i2 += onError("UTF16_SURROGATE", i2 - 1 - extraLength, bytes2, result, res);
        continue;
      }
      if (res <= overlongMask) {
        i2 += onError("OVERLONG", i2 - 1 - extraLength, bytes2, result, res);
        continue;
      }
      result.push(res);
    }
    return result;
  }
  function toUtf8Bytes(str, form) {
    if (form != null) {
      assertNormalize(form);
      str = str.normalize(form);
    }
    let result = [];
    for (let i2 = 0; i2 < str.length; i2++) {
      const c2 = str.charCodeAt(i2);
      if (c2 < 128) {
        result.push(c2);
      } else if (c2 < 2048) {
        result.push(c2 >> 6 | 192);
        result.push(c2 & 63 | 128);
      } else if ((c2 & 64512) == 55296) {
        i2++;
        const c22 = str.charCodeAt(i2);
        assertArgument(i2 < str.length && (c22 & 64512) === 56320, "invalid surrogate pair", "str", str);
        const pair = 65536 + ((c2 & 1023) << 10) + (c22 & 1023);
        result.push(pair >> 18 | 240);
        result.push(pair >> 12 & 63 | 128);
        result.push(pair >> 6 & 63 | 128);
        result.push(pair & 63 | 128);
      } else {
        result.push(c2 >> 12 | 224);
        result.push(c2 >> 6 & 63 | 128);
        result.push(c2 & 63 | 128);
      }
    }
    return new Uint8Array(result);
  }
  function _toUtf8String(codePoints) {
    return codePoints.map((codePoint) => {
      if (codePoint <= 65535) {
        return String.fromCharCode(codePoint);
      }
      codePoint -= 65536;
      return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);
    }).join("");
  }
  function toUtf8String(bytes2, onError) {
    return _toUtf8String(getUtf8CodePoints(bytes2, onError));
  }
  async function getUrl(req, _signal2) {
    const protocol = req.url.split(":")[0].toLowerCase();
    assert$1(protocol === "http" || protocol === "https", `unsupported protocol ${protocol}`, "UNSUPPORTED_OPERATION", {
      info: { protocol },
      operation: "request"
    });
    assert$1(!req.credentials || req.allowInsecureAuthentication, "insecure authorized connections unsupported", "UNSUPPORTED_OPERATION", {
      operation: "request"
    });
    let signal = void 0;
    if (_signal2) {
      const controller = new AbortController();
      signal = controller.signal;
      _signal2.addListener(() => {
        controller.abort();
      });
    }
    const init = {
      method: req.method,
      headers: new Headers(Array.from(req)),
      body: req.body || void 0,
      signal
    };
    const resp = await fetch(req.url, init);
    const headers = {};
    resp.headers.forEach((value, key) => {
      headers[key.toLowerCase()] = value;
    });
    const respBody = await resp.arrayBuffer();
    const body = respBody == null ? null : new Uint8Array(respBody);
    return {
      statusCode: resp.status,
      statusMessage: resp.statusText,
      headers,
      body
    };
  }
  const MAX_ATTEMPTS = 12;
  const SLOT_INTERVAL = 250;
  let getUrlFunc = getUrl;
  const reData = new RegExp("^data:([^;:]*)?(;base64)?,(.*)$", "i");
  const reIpfs = new RegExp("^ipfs://(ipfs/)?(.*)$", "i");
  let locked$5 = false;
  async function dataGatewayFunc(url, signal) {
    try {
      const match = url.match(reData);
      if (!match) {
        throw new Error("invalid data");
      }
      return new FetchResponse(200, "OK", {
        "content-type": match[1] || "text/plain"
      }, match[2] ? decodeBase64(match[3]) : unpercent(match[3]));
    } catch (error) {
      return new FetchResponse(599, "BAD REQUEST (invalid data: URI)", {}, null, new FetchRequest(url));
    }
  }
  function getIpfsGatewayFunc(baseUrl) {
    async function gatewayIpfs(url, signal) {
      try {
        const match = url.match(reIpfs);
        if (!match) {
          throw new Error("invalid link");
        }
        return new FetchRequest(`${baseUrl}${match[2]}`);
      } catch (error) {
        return new FetchResponse(599, "BAD REQUEST (invalid IPFS URI)", {}, null, new FetchRequest(url));
      }
    }
    return gatewayIpfs;
  }
  const Gateways = {
    "data": dataGatewayFunc,
    "ipfs": getIpfsGatewayFunc("https://gateway.ipfs.io/ipfs/")
  };
  const fetchSignals = /* @__PURE__ */ new WeakMap();
  class FetchCancelSignal {
    constructor(request2) {
      __privateAdd(this, _listeners, void 0);
      __privateAdd(this, _cancelled, void 0);
      __privateSet(this, _listeners, []);
      __privateSet(this, _cancelled, false);
      fetchSignals.set(request2, () => {
        if (__privateGet(this, _cancelled)) {
          return;
        }
        __privateSet(this, _cancelled, true);
        for (const listener of __privateGet(this, _listeners)) {
          setTimeout(() => {
            listener();
          }, 0);
        }
        __privateSet(this, _listeners, []);
      });
    }
    addListener(listener) {
      assert$1(!__privateGet(this, _cancelled), "singal already cancelled", "UNSUPPORTED_OPERATION", {
        operation: "fetchCancelSignal.addCancelListener"
      });
      __privateGet(this, _listeners).push(listener);
    }
    get cancelled() {
      return __privateGet(this, _cancelled);
    }
    checkSignal() {
      assert$1(!this.cancelled, "cancelled", "CANCELLED", {});
    }
  }
  _listeners = new WeakMap();
  _cancelled = new WeakMap();
  function checkSignal(signal) {
    if (signal == null) {
      throw new Error("missing signal; should not happen");
    }
    signal.checkSignal();
    return signal;
  }
  const _FetchRequest = class {
    constructor(url) {
      __privateAdd(this, _send);
      __privateAdd(this, _allowInsecure, void 0);
      __privateAdd(this, _gzip, void 0);
      __privateAdd(this, _headers, void 0);
      __privateAdd(this, _method, void 0);
      __privateAdd(this, _timeout, void 0);
      __privateAdd(this, _url, void 0);
      __privateAdd(this, _body, void 0);
      __privateAdd(this, _bodyType, void 0);
      __privateAdd(this, _creds, void 0);
      __privateAdd(this, _preflight, void 0);
      __privateAdd(this, _process, void 0);
      __privateAdd(this, _retry, void 0);
      __privateAdd(this, _signal, void 0);
      __privateAdd(this, _throttle, void 0);
      __privateSet(this, _url, String(url));
      __privateSet(this, _allowInsecure, false);
      __privateSet(this, _gzip, true);
      __privateSet(this, _headers, {});
      __privateSet(this, _method, "");
      __privateSet(this, _timeout, 3e5);
      __privateSet(this, _throttle, {
        slotInterval: SLOT_INTERVAL,
        maxAttempts: MAX_ATTEMPTS
      });
    }
    get url() {
      return __privateGet(this, _url);
    }
    set url(url) {
      __privateSet(this, _url, String(url));
    }
    get body() {
      if (__privateGet(this, _body) == null) {
        return null;
      }
      return new Uint8Array(__privateGet(this, _body));
    }
    set body(body) {
      if (body == null) {
        __privateSet(this, _body, void 0);
        __privateSet(this, _bodyType, void 0);
      } else if (typeof body === "string") {
        __privateSet(this, _body, toUtf8Bytes(body));
        __privateSet(this, _bodyType, "text/plain");
      } else if (body instanceof Uint8Array) {
        __privateSet(this, _body, body);
        __privateSet(this, _bodyType, "application/octet-stream");
      } else if (typeof body === "object") {
        __privateSet(this, _body, toUtf8Bytes(JSON.stringify(body)));
        __privateSet(this, _bodyType, "application/json");
      } else {
        throw new Error("invalid body");
      }
    }
    hasBody() {
      return __privateGet(this, _body) != null;
    }
    get method() {
      if (__privateGet(this, _method)) {
        return __privateGet(this, _method);
      }
      if (this.hasBody()) {
        return "POST";
      }
      return "GET";
    }
    set method(method2) {
      if (method2 == null) {
        method2 = "";
      }
      __privateSet(this, _method, String(method2).toUpperCase());
    }
    get headers() {
      const headers = Object.assign({}, __privateGet(this, _headers));
      if (__privateGet(this, _creds)) {
        headers["authorization"] = `Basic ${encodeBase64(toUtf8Bytes(__privateGet(this, _creds)))}`;
      }
      if (this.allowGzip) {
        headers["accept-encoding"] = "gzip";
      }
      if (headers["content-type"] == null && __privateGet(this, _bodyType)) {
        headers["content-type"] = __privateGet(this, _bodyType);
      }
      if (this.body) {
        headers["content-length"] = String(this.body.length);
      }
      return headers;
    }
    getHeader(key) {
      return this.headers[key.toLowerCase()];
    }
    setHeader(key, value) {
      __privateGet(this, _headers)[String(key).toLowerCase()] = String(value);
    }
    clearHeaders() {
      __privateSet(this, _headers, {});
    }
    [Symbol.iterator]() {
      const headers = this.headers;
      const keys = Object.keys(headers);
      let index = 0;
      return {
        next: () => {
          if (index < keys.length) {
            const key = keys[index++];
            return {
              value: [key, headers[key]],
              done: false
            };
          }
          return { value: void 0, done: true };
        }
      };
    }
    get credentials() {
      return __privateGet(this, _creds) || null;
    }
    setCredentials(username, password) {
      assertArgument(!username.match(/:/), "invalid basic authentication username", "username", "[REDACTED]");
      __privateSet(this, _creds, `${username}:${password}`);
    }
    get allowGzip() {
      return __privateGet(this, _gzip);
    }
    set allowGzip(value) {
      __privateSet(this, _gzip, !!value);
    }
    get allowInsecureAuthentication() {
      return !!__privateGet(this, _allowInsecure);
    }
    set allowInsecureAuthentication(value) {
      __privateSet(this, _allowInsecure, !!value);
    }
    get timeout() {
      return __privateGet(this, _timeout);
    }
    set timeout(timeout) {
      assertArgument(timeout >= 0, "timeout must be non-zero", "timeout", timeout);
      __privateSet(this, _timeout, timeout);
    }
    get preflightFunc() {
      return __privateGet(this, _preflight) || null;
    }
    set preflightFunc(preflight) {
      __privateSet(this, _preflight, preflight);
    }
    get processFunc() {
      return __privateGet(this, _process) || null;
    }
    set processFunc(process2) {
      __privateSet(this, _process, process2);
    }
    get retryFunc() {
      return __privateGet(this, _retry) || null;
    }
    set retryFunc(retry) {
      __privateSet(this, _retry, retry);
    }
    toString() {
      return `<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${__privateGet(this, _body) ? hexlify(__privateGet(this, _body)) : "null"}>`;
    }
    setThrottleParams(params) {
      if (params.slotInterval != null) {
        __privateGet(this, _throttle).slotInterval = params.slotInterval;
      }
      if (params.maxAttempts != null) {
        __privateGet(this, _throttle).maxAttempts = params.maxAttempts;
      }
    }
    send() {
      assert$1(__privateGet(this, _signal) == null, "request already sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.send" });
      __privateSet(this, _signal, new FetchCancelSignal(this));
      return __privateMethod(this, _send, send_fn).call(this, 0, getTime$1() + this.timeout, 0, this, new FetchResponse(0, "", {}, null, this));
    }
    cancel() {
      assert$1(__privateGet(this, _signal) != null, "request has not been sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.cancel" });
      const signal = fetchSignals.get(this);
      if (!signal) {
        throw new Error("missing signal; should not happen");
      }
      signal();
    }
    redirect(location2) {
      const current = this.url.split(":")[0].toLowerCase();
      const target = location2.split(":")[0].toLowerCase();
      assert$1(this.method === "GET" && (current !== "https" || target !== "http") && location2.match(/^https?:/), `unsupported redirect`, "UNSUPPORTED_OPERATION", {
        operation: `redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(location2)})`
      });
      const req = new _FetchRequest(location2);
      req.method = "GET";
      req.allowGzip = this.allowGzip;
      req.timeout = this.timeout;
      __privateSet(req, _headers, Object.assign({}, __privateGet(this, _headers)));
      if (__privateGet(this, _body)) {
        __privateSet(req, _body, new Uint8Array(__privateGet(this, _body)));
      }
      __privateSet(req, _bodyType, __privateGet(this, _bodyType));
      return req;
    }
    clone() {
      const clone = new _FetchRequest(this.url);
      __privateSet(clone, _method, __privateGet(this, _method));
      if (__privateGet(this, _body)) {
        __privateSet(clone, _body, __privateGet(this, _body));
      }
      __privateSet(clone, _bodyType, __privateGet(this, _bodyType));
      __privateSet(clone, _headers, Object.assign({}, __privateGet(this, _headers)));
      __privateSet(clone, _creds, __privateGet(this, _creds));
      if (this.allowGzip) {
        clone.allowGzip = true;
      }
      clone.timeout = this.timeout;
      if (this.allowInsecureAuthentication) {
        clone.allowInsecureAuthentication = true;
      }
      __privateSet(clone, _preflight, __privateGet(this, _preflight));
      __privateSet(clone, _process, __privateGet(this, _process));
      __privateSet(clone, _retry, __privateGet(this, _retry));
      return clone;
    }
    static lockConfig() {
      locked$5 = true;
    }
    static getGateway(scheme) {
      return Gateways[scheme.toLowerCase()] || null;
    }
    static registerGateway(scheme, func) {
      scheme = scheme.toLowerCase();
      if (scheme === "http" || scheme === "https") {
        throw new Error(`cannot intercept ${scheme}; use registerGetUrl`);
      }
      if (locked$5) {
        throw new Error("gateways locked");
      }
      Gateways[scheme] = func;
    }
    static registerGetUrl(getUrl2) {
      if (locked$5) {
        throw new Error("gateways locked");
      }
      getUrlFunc = getUrl2;
    }
    static createDataGateway() {
      return dataGatewayFunc;
    }
    static createIpfsGatewayFunc(baseUrl) {
      return getIpfsGatewayFunc(baseUrl);
    }
  };
  let FetchRequest = _FetchRequest;
  _allowInsecure = new WeakMap();
  _gzip = new WeakMap();
  _headers = new WeakMap();
  _method = new WeakMap();
  _timeout = new WeakMap();
  _url = new WeakMap();
  _body = new WeakMap();
  _bodyType = new WeakMap();
  _creds = new WeakMap();
  _preflight = new WeakMap();
  _process = new WeakMap();
  _retry = new WeakMap();
  _signal = new WeakMap();
  _throttle = new WeakMap();
  _send = new WeakSet();
  send_fn = async function(attempt, expires, delay, _request2, _response) {
    var _a, _b, _c;
    if (attempt >= __privateGet(this, _throttle).maxAttempts) {
      return _response.makeServerError("exceeded maximum retry limit");
    }
    assert$1(getTime$1() <= expires, "timeout", "TIMEOUT", {
      operation: "request.send",
      reason: "timeout",
      request: _request2
    });
    if (delay > 0) {
      await wait(delay);
    }
    let req = this.clone();
    const scheme = (req.url.split(":")[0] || "").toLowerCase();
    if (scheme in Gateways) {
      const result = await Gateways[scheme](req.url, checkSignal(__privateGet(_request2, _signal)));
      if (result instanceof FetchResponse) {
        let response2 = result;
        if (this.processFunc) {
          checkSignal(__privateGet(_request2, _signal));
          try {
            response2 = await this.processFunc(req, response2);
          } catch (error) {
            if (error.throttle == null || typeof error.stall !== "number") {
              response2.makeServerError("error in post-processing function", error).assertOk();
            }
          }
        }
        return response2;
      }
      req = result;
    }
    if (this.preflightFunc) {
      req = await this.preflightFunc(req);
    }
    const resp = await getUrlFunc(req, checkSignal(__privateGet(_request2, _signal)));
    let response = new FetchResponse(resp.statusCode, resp.statusMessage, resp.headers, resp.body, _request2);
    if (response.statusCode === 301 || response.statusCode === 302) {
      try {
        const location2 = response.headers.location || "";
        return __privateMethod(_a = req.redirect(location2), _send, send_fn).call(_a, attempt + 1, expires, 0, _request2, response);
      } catch (error) {
      }
      return response;
    } else if (response.statusCode === 429) {
      if (this.retryFunc == null || await this.retryFunc(req, response, attempt)) {
        const retryAfter = response.headers["retry-after"];
        let delay2 = __privateGet(this, _throttle).slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));
        if (typeof retryAfter === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
          delay2 = parseInt(retryAfter);
        }
        return __privateMethod(_b = req.clone(), _send, send_fn).call(_b, attempt + 1, expires, delay2, _request2, response);
      }
    }
    if (this.processFunc) {
      checkSignal(__privateGet(_request2, _signal));
      try {
        response = await this.processFunc(req, response);
      } catch (error) {
        if (error.throttle == null || typeof error.stall !== "number") {
          response.makeServerError("error in post-processing function", error).assertOk();
        }
        let delay2 = __privateGet(this, _throttle).slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));
        if (error.stall >= 0) {
          delay2 = error.stall;
        }
        return __privateMethod(_c = req.clone(), _send, send_fn).call(_c, attempt + 1, expires, delay2, _request2, response);
      }
    }
    return response;
  };
  const _FetchResponse = class {
    constructor(statusCode, statusMessage, headers, body, request2) {
      __privateAdd(this, _statusCode, void 0);
      __privateAdd(this, _statusMessage, void 0);
      __privateAdd(this, _headers2, void 0);
      __privateAdd(this, _body2, void 0);
      __privateAdd(this, _request, void 0);
      __privateAdd(this, _error, void 0);
      __privateSet(this, _statusCode, statusCode);
      __privateSet(this, _statusMessage, statusMessage);
      __privateSet(this, _headers2, Object.keys(headers).reduce((accum, k2) => {
        accum[k2.toLowerCase()] = String(headers[k2]);
        return accum;
      }, {}));
      __privateSet(this, _body2, body == null ? null : new Uint8Array(body));
      __privateSet(this, _request, request2 || null);
      __privateSet(this, _error, { message: "" });
    }
    toString() {
      return `<FetchResponse status=${this.statusCode} body=${__privateGet(this, _body2) ? hexlify(__privateGet(this, _body2)) : "null"}>`;
    }
    get statusCode() {
      return __privateGet(this, _statusCode);
    }
    get statusMessage() {
      return __privateGet(this, _statusMessage);
    }
    get headers() {
      return Object.assign({}, __privateGet(this, _headers2));
    }
    get body() {
      return __privateGet(this, _body2) == null ? null : new Uint8Array(__privateGet(this, _body2));
    }
    get bodyText() {
      try {
        return __privateGet(this, _body2) == null ? "" : toUtf8String(__privateGet(this, _body2));
      } catch (error) {
        assert$1(false, "response body is not valid UTF-8 data", "UNSUPPORTED_OPERATION", {
          operation: "bodyText",
          info: { response: this }
        });
      }
    }
    get bodyJson() {
      try {
        return JSON.parse(this.bodyText);
      } catch (error) {
        assert$1(false, "response body is not valid JSON", "UNSUPPORTED_OPERATION", {
          operation: "bodyJson",
          info: { response: this }
        });
      }
    }
    [Symbol.iterator]() {
      const headers = this.headers;
      const keys = Object.keys(headers);
      let index = 0;
      return {
        next: () => {
          if (index < keys.length) {
            const key = keys[index++];
            return {
              value: [key, headers[key]],
              done: false
            };
          }
          return { value: void 0, done: true };
        }
      };
    }
    makeServerError(message, error) {
      let statusMessage;
      if (!message) {
        message = `${this.statusCode} ${this.statusMessage}`;
        statusMessage = `CLIENT ESCALATED SERVER ERROR (${message})`;
      } else {
        statusMessage = `CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${message})`;
      }
      const response = new _FetchResponse(599, statusMessage, this.headers, this.body, __privateGet(this, _request) || void 0);
      __privateSet(response, _error, { message, error });
      return response;
    }
    throwThrottleError(message, stall2) {
      if (stall2 == null) {
        stall2 = -1;
      } else {
        assertArgument(Number.isInteger(stall2) && stall2 >= 0, "invalid stall timeout", "stall", stall2);
      }
      const error = new Error(message || "throttling requests");
      defineProperties(error, { stall: stall2, throttle: true });
      throw error;
    }
    getHeader(key) {
      return this.headers[key.toLowerCase()];
    }
    hasBody() {
      return __privateGet(this, _body2) != null;
    }
    get request() {
      return __privateGet(this, _request);
    }
    ok() {
      return __privateGet(this, _error).message === "" && this.statusCode >= 200 && this.statusCode < 300;
    }
    assertOk() {
      if (this.ok()) {
        return;
      }
      let { message, error } = __privateGet(this, _error);
      if (message === "") {
        message = `server response ${this.statusCode} ${this.statusMessage}`;
      }
      assert$1(false, message, "SERVER_ERROR", {
        request: this.request || "unknown request",
        response: this,
        error
      });
    }
  };
  let FetchResponse = _FetchResponse;
  _statusCode = new WeakMap();
  _statusMessage = new WeakMap();
  _headers2 = new WeakMap();
  _body2 = new WeakMap();
  _request = new WeakMap();
  _error = new WeakMap();
  function getTime$1() {
    return new Date().getTime();
  }
  function unpercent(value) {
    return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {
      return String.fromCharCode(parseInt(code, 16));
    }));
  }
  function wait(delay) {
    return new Promise((resolve) => setTimeout(resolve, delay));
  }
  const BN_N1 = BigInt(-1);
  const BN_0$8 = BigInt(0);
  const BN_1$3 = BigInt(1);
  const BN_5 = BigInt(5);
  const _guard$5 = {};
  let Zeros$1 = "0000";
  while (Zeros$1.length < 80) {
    Zeros$1 += Zeros$1;
  }
  function getTens(decimals) {
    let result = Zeros$1;
    while (result.length < decimals) {
      result += result;
    }
    return BigInt("1" + result.substring(0, decimals));
  }
  function checkValue(val, format2, safeOp) {
    const width = BigInt(format2.width);
    if (format2.signed) {
      const limit = BN_1$3 << width - BN_1$3;
      assert$1(safeOp == null || val >= -limit && val < limit, "overflow", "NUMERIC_FAULT", {
        operation: safeOp,
        fault: "overflow",
        value: val
      });
      if (val > BN_0$8) {
        val = fromTwos(mask(val, width), width);
      } else {
        val = -fromTwos(mask(-val, width), width);
      }
    } else {
      const limit = BN_1$3 << width;
      assert$1(safeOp == null || val >= 0 && val < limit, "overflow", "NUMERIC_FAULT", {
        operation: safeOp,
        fault: "overflow",
        value: val
      });
      val = (val % limit + limit) % limit & limit - BN_1$3;
    }
    return val;
  }
  function getFormat(value) {
    if (typeof value === "number") {
      value = `fixed128x${value}`;
    }
    let signed2 = true;
    let width = 128;
    let decimals = 18;
    if (typeof value === "string") {
      if (value === "fixed")
        ;
      else if (value === "ufixed") {
        signed2 = false;
      } else {
        const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
        assertArgument(match, "invalid fixed format", "format", value);
        signed2 = match[1] !== "u";
        width = parseInt(match[2]);
        decimals = parseInt(match[3]);
      }
    } else if (value) {
      const v2 = value;
      const check = (key, type, defaultValue) => {
        if (v2[key] == null) {
          return defaultValue;
        }
        assertArgument(typeof v2[key] === type, "invalid fixed format (" + key + " not " + type + ")", "format." + key, v2[key]);
        return v2[key];
      };
      signed2 = check("signed", "boolean", signed2);
      width = check("width", "number", width);
      decimals = check("decimals", "number", decimals);
    }
    assertArgument(width % 8 === 0, "invalid FixedNumber width (not byte aligned)", "format.width", width);
    assertArgument(decimals <= 80, "invalid FixedNumber decimals (too large)", "format.decimals", decimals);
    const name = (signed2 ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
    return { signed: signed2, width, decimals, name };
  }
  function toString(val, decimals) {
    let negative = "";
    if (val < BN_0$8) {
      negative = "-";
      val *= BN_N1;
    }
    let str = val.toString();
    if (decimals === 0) {
      return negative + str;
    }
    while (str.length <= decimals) {
      str = Zeros$1 + str;
    }
    const index = str.length - decimals;
    str = str.substring(0, index) + "." + str.substring(index);
    while (str[0] === "0" && str[1] !== ".") {
      str = str.substring(1);
    }
    while (str[str.length - 1] === "0" && str[str.length - 2] !== ".") {
      str = str.substring(0, str.length - 1);
    }
    return negative + str;
  }
  const _FixedNumber = class {
    constructor(guard, value, format2) {
      __privateAdd(this, _checkFormat);
      __privateAdd(this, _checkValue);
      __privateAdd(this, _add);
      __privateAdd(this, _sub);
      __privateAdd(this, _mul);
      __privateAdd(this, _div);
      __privateAdd(this, _format, void 0);
      __privateAdd(this, _val, void 0);
      __privateAdd(this, _tens, void 0);
      assertPrivate(guard, _guard$5, "FixedNumber");
      __privateSet(this, _val, value);
      __privateSet(this, _format, format2);
      const _value2 = toString(value, format2.decimals);
      defineProperties(this, { format: format2.name, _value: _value2 });
      __privateSet(this, _tens, getTens(format2.decimals));
    }
    get signed() {
      return __privateGet(this, _format).signed;
    }
    get width() {
      return __privateGet(this, _format).width;
    }
    get decimals() {
      return __privateGet(this, _format).decimals;
    }
    get value() {
      return __privateGet(this, _val);
    }
    addUnsafe(other) {
      return __privateMethod(this, _add, add_fn).call(this, other);
    }
    add(other) {
      return __privateMethod(this, _add, add_fn).call(this, other, "add");
    }
    subUnsafe(other) {
      return __privateMethod(this, _sub, sub_fn).call(this, other);
    }
    sub(other) {
      return __privateMethod(this, _sub, sub_fn).call(this, other, "sub");
    }
    mulUnsafe(other) {
      return __privateMethod(this, _mul, mul_fn).call(this, other);
    }
    mul(other) {
      return __privateMethod(this, _mul, mul_fn).call(this, other, "mul");
    }
    mulSignal(other) {
      __privateMethod(this, _checkFormat, checkFormat_fn).call(this, other);
      const value = __privateGet(this, _val) * __privateGet(other, _val);
      assert$1(value % __privateGet(this, _tens) === BN_0$8, "precision lost during signalling mul", "NUMERIC_FAULT", {
        operation: "mulSignal",
        fault: "underflow",
        value: this
      });
      return __privateMethod(this, _checkValue, checkValue_fn).call(this, value / __privateGet(this, _tens), "mulSignal");
    }
    divUnsafe(other) {
      return __privateMethod(this, _div, div_fn).call(this, other);
    }
    div(other) {
      return __privateMethod(this, _div, div_fn).call(this, other, "div");
    }
    divSignal(other) {
      assert$1(__privateGet(other, _val) !== BN_0$8, "division by zero", "NUMERIC_FAULT", {
        operation: "div",
        fault: "divide-by-zero",
        value: this
      });
      __privateMethod(this, _checkFormat, checkFormat_fn).call(this, other);
      const value = __privateGet(this, _val) * __privateGet(this, _tens);
      assert$1(value % __privateGet(other, _val) === BN_0$8, "precision lost during signalling div", "NUMERIC_FAULT", {
        operation: "divSignal",
        fault: "underflow",
        value: this
      });
      return __privateMethod(this, _checkValue, checkValue_fn).call(this, value / __privateGet(other, _val), "divSignal");
    }
    cmp(other) {
      let a2 = this.value, b2 = other.value;
      const delta = this.decimals - other.decimals;
      if (delta > 0) {
        b2 *= getTens(delta);
      } else if (delta < 0) {
        a2 *= getTens(-delta);
      }
      if (a2 < b2) {
        return -1;
      }
      if (a2 > b2) {
        return -1;
      }
      return 0;
    }
    eq(other) {
      return this.cmp(other) === 0;
    }
    lt(other) {
      return this.cmp(other) < 0;
    }
    lte(other) {
      return this.cmp(other) <= 0;
    }
    gt(other) {
      return this.cmp(other) > 0;
    }
    gte(other) {
      return this.cmp(other) >= 0;
    }
    floor() {
      let val = __privateGet(this, _val);
      if (__privateGet(this, _val) < BN_0$8) {
        val -= __privateGet(this, _tens) - BN_1$3;
      }
      val = __privateGet(this, _val) / __privateGet(this, _tens) * __privateGet(this, _tens);
      return __privateMethod(this, _checkValue, checkValue_fn).call(this, val, "floor");
    }
    ceiling() {
      let val = __privateGet(this, _val);
      if (__privateGet(this, _val) > BN_0$8) {
        val += __privateGet(this, _tens) - BN_1$3;
      }
      val = __privateGet(this, _val) / __privateGet(this, _tens) * __privateGet(this, _tens);
      return __privateMethod(this, _checkValue, checkValue_fn).call(this, val, "ceiling");
    }
    round(decimals) {
      if (decimals == null) {
        decimals = 0;
      }
      if (decimals >= this.decimals) {
        return this;
      }
      const delta = this.decimals - decimals;
      const bump = BN_5 * getTens(delta - 1);
      let value = this.value + bump;
      const tens = getTens(delta);
      value = value / tens * tens;
      checkValue(value, __privateGet(this, _format), "round");
      return new _FixedNumber(_guard$5, value, __privateGet(this, _format));
    }
    isZero() {
      return __privateGet(this, _val) === BN_0$8;
    }
    isNegative() {
      return __privateGet(this, _val) < BN_0$8;
    }
    toString() {
      return this._value;
    }
    toUnsafeFloat() {
      return parseFloat(this.toString());
    }
    toFormat(format2) {
      return _FixedNumber.fromString(this.toString(), format2);
    }
    static fromValue(_value2, decimals, _format2) {
      if (decimals == null) {
        decimals = 0;
      }
      const format2 = getFormat(_format2);
      let value = getBigInt(_value2, "value");
      const delta = decimals - format2.decimals;
      if (delta > 0) {
        const tens = getTens(delta);
        assert$1(value % tens === BN_0$8, "value loses precision for format", "NUMERIC_FAULT", {
          operation: "fromValue",
          fault: "underflow",
          value: _value2
        });
        value /= tens;
      } else if (delta < 0) {
        value *= getTens(-delta);
      }
      checkValue(value, format2, "fromValue");
      return new _FixedNumber(_guard$5, value, format2);
    }
    static fromString(_value2, _format2) {
      const match = _value2.match(/^(-?)([0-9]*)\.?([0-9]*)$/);
      assertArgument(match && match[2].length + match[3].length > 0, "invalid FixedNumber string value", "value", _value2);
      const format2 = getFormat(_format2);
      let whole = match[2] || "0", decimal = match[3] || "";
      while (decimal.length < format2.decimals) {
        decimal += Zeros$1;
      }
      assert$1(decimal.substring(format2.decimals).match(/^0*$/), "too many decimals for format", "NUMERIC_FAULT", {
        operation: "fromString",
        fault: "underflow",
        value: _value2
      });
      decimal = decimal.substring(0, format2.decimals);
      const value = BigInt(match[1] + whole + decimal);
      checkValue(value, format2, "fromString");
      return new _FixedNumber(_guard$5, value, format2);
    }
    static fromBytes(_value2, _format2) {
      let value = toBigInt(getBytes(_value2, "value"));
      const format2 = getFormat(_format2);
      if (format2.signed) {
        value = fromTwos(value, format2.width);
      }
      checkValue(value, format2, "fromBytes");
      return new _FixedNumber(_guard$5, value, format2);
    }
  };
  let FixedNumber = _FixedNumber;
  _format = new WeakMap();
  _val = new WeakMap();
  _tens = new WeakMap();
  _checkFormat = new WeakSet();
  checkFormat_fn = function(other) {
    assertArgument(this.format === other.format, "incompatible format; use fixedNumber.toFormat", "other", other);
  };
  _checkValue = new WeakSet();
  checkValue_fn = function(val, safeOp) {
    val = checkValue(val, __privateGet(this, _format), safeOp);
    return new _FixedNumber(_guard$5, val, __privateGet(this, _format));
  };
  _add = new WeakSet();
  add_fn = function(o2, safeOp) {
    __privateMethod(this, _checkFormat, checkFormat_fn).call(this, o2);
    return __privateMethod(this, _checkValue, checkValue_fn).call(this, __privateGet(this, _val) + __privateGet(o2, _val), safeOp);
  };
  _sub = new WeakSet();
  sub_fn = function(o2, safeOp) {
    __privateMethod(this, _checkFormat, checkFormat_fn).call(this, o2);
    return __privateMethod(this, _checkValue, checkValue_fn).call(this, __privateGet(this, _val) - __privateGet(o2, _val), safeOp);
  };
  _mul = new WeakSet();
  mul_fn = function(o2, safeOp) {
    __privateMethod(this, _checkFormat, checkFormat_fn).call(this, o2);
    return __privateMethod(this, _checkValue, checkValue_fn).call(this, __privateGet(this, _val) * __privateGet(o2, _val) / __privateGet(this, _tens), safeOp);
  };
  _div = new WeakSet();
  div_fn = function(o2, safeOp) {
    assert$1(__privateGet(o2, _val) !== BN_0$8, "division by zero", "NUMERIC_FAULT", {
      operation: "div",
      fault: "divide-by-zero",
      value: this
    });
    __privateMethod(this, _checkFormat, checkFormat_fn).call(this, o2);
    return __privateMethod(this, _checkValue, checkValue_fn).call(this, __privateGet(this, _val) * __privateGet(this, _tens) / __privateGet(o2, _val), safeOp);
  };
  function hexlifyByte(value) {
    let result = value.toString(16);
    while (result.length < 2) {
      result = "0" + result;
    }
    return "0x" + result;
  }
  function unarrayifyInteger(data, offset, length) {
    let result = 0;
    for (let i2 = 0; i2 < length; i2++) {
      result = result * 256 + data[offset + i2];
    }
    return result;
  }
  function _decodeChildren(data, offset, childOffset, length) {
    const result = [];
    while (childOffset < offset + 1 + length) {
      const decoded = _decode(data, childOffset);
      result.push(decoded.result);
      childOffset += decoded.consumed;
      assert$1(childOffset <= offset + 1 + length, "child data too short", "BUFFER_OVERRUN", {
        buffer: data,
        length,
        offset
      });
    }
    return { consumed: 1 + length, result };
  }
  function _decode(data, offset) {
    assert$1(data.length !== 0, "data too short", "BUFFER_OVERRUN", {
      buffer: data,
      length: 0,
      offset: 1
    });
    const checkOffset = (offset2) => {
      assert$1(offset2 <= data.length, "data short segment too short", "BUFFER_OVERRUN", {
        buffer: data,
        length: data.length,
        offset: offset2
      });
    };
    if (data[offset] >= 248) {
      const lengthLength = data[offset] - 247;
      checkOffset(offset + 1 + lengthLength);
      const length = unarrayifyInteger(data, offset + 1, lengthLength);
      checkOffset(offset + 1 + lengthLength + length);
      return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
    } else if (data[offset] >= 192) {
      const length = data[offset] - 192;
      checkOffset(offset + 1 + length);
      return _decodeChildren(data, offset, offset + 1, length);
    } else if (data[offset] >= 184) {
      const lengthLength = data[offset] - 183;
      checkOffset(offset + 1 + lengthLength);
      const length = unarrayifyInteger(data, offset + 1, lengthLength);
      checkOffset(offset + 1 + lengthLength + length);
      const result = hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
      return { consumed: 1 + lengthLength + length, result };
    } else if (data[offset] >= 128) {
      const length = data[offset] - 128;
      checkOffset(offset + 1 + length);
      const result = hexlify(data.slice(offset + 1, offset + 1 + length));
      return { consumed: 1 + length, result };
    }
    return { consumed: 1, result: hexlifyByte(data[offset]) };
  }
  function decodeRlp(_data5) {
    const data = getBytes(_data5, "data");
    const decoded = _decode(data, 0);
    assertArgument(decoded.consumed === data.length, "unexpected junk after rlp payload", "data", _data5);
    return decoded.result;
  }
  function arrayifyInteger(value) {
    const result = [];
    while (value) {
      result.unshift(value & 255);
      value >>= 8;
    }
    return result;
  }
  function _encode(object2) {
    if (Array.isArray(object2)) {
      let payload = [];
      object2.forEach(function(child) {
        payload = payload.concat(_encode(child));
      });
      if (payload.length <= 55) {
        payload.unshift(192 + payload.length);
        return payload;
      }
      const length2 = arrayifyInteger(payload.length);
      length2.unshift(247 + length2.length);
      return length2.concat(payload);
    }
    const data = Array.prototype.slice.call(getBytes(object2, "object"));
    if (data.length === 1 && data[0] <= 127) {
      return data;
    } else if (data.length <= 55) {
      data.unshift(128 + data.length);
      return data;
    }
    const length = arrayifyInteger(data.length);
    length.unshift(183 + length.length);
    return length.concat(data);
  }
  const nibbles = "0123456789abcdef";
  function encodeRlp(object2) {
    let result = "0x";
    for (const v2 of _encode(object2)) {
      result += nibbles[v2 >> 4];
      result += nibbles[v2 & 15];
    }
    return result;
  }
  const names = [
    "wei",
    "kwei",
    "mwei",
    "gwei",
    "szabo",
    "finney",
    "ether"
  ];
  function formatUnits(value, unit) {
    let decimals = 18;
    if (typeof unit === "string") {
      const index = names.indexOf(unit);
      assertArgument(index >= 0, "invalid unit", "unit", unit);
      decimals = 3 * index;
    } else if (unit != null) {
      decimals = getNumber(unit, "unit");
    }
    return FixedNumber.fromValue(value, decimals, { decimals }).toString();
  }
  function parseUnits(value, unit) {
    assertArgument(typeof value === "string", "value must be a string", "value", value);
    let decimals = 18;
    if (typeof unit === "string") {
      const index = names.indexOf(unit);
      assertArgument(index >= 0, "invalid unit", "unit", unit);
      decimals = 3 * index;
    } else if (unit != null) {
      decimals = getNumber(unit, "unit");
    }
    return FixedNumber.fromString(value, { decimals }).value;
  }
  function formatEther(wei) {
    return formatUnits(wei, 18);
  }
  function parseEther(ether) {
    return parseUnits(ether, 18);
  }
  function uuidV4(randomBytes2) {
    const bytes2 = getBytes(randomBytes2, "randomBytes");
    bytes2[6] = bytes2[6] & 15 | 64;
    bytes2[8] = bytes2[8] & 63 | 128;
    const value = hexlify(bytes2);
    return [
      value.substring(2, 10),
      value.substring(10, 14),
      value.substring(14, 18),
      value.substring(18, 22),
      value.substring(22, 34)
    ].join("-");
  }
  const WordSize = 32;
  const Padding = new Uint8Array(WordSize);
  const passProperties$1 = ["then"];
  const _guard$4 = {};
  function throwError(name, error) {
    const wrapped = new Error(`deferred error during ABI decoding triggered accessing ${name}`);
    wrapped.error = error;
    throw wrapped;
  }
  const _Result = class extends Array {
    constructor(...args) {
      const guard = args[0];
      let items = args[1];
      let names2 = (args[2] || []).slice();
      let wrap = true;
      if (guard !== _guard$4) {
        items = args;
        names2 = [];
        wrap = false;
      }
      super(items.length);
      __privateAdd(this, _names, void 0);
      items.forEach((item, index) => {
        this[index] = item;
      });
      const nameCounts = names2.reduce((accum, name) => {
        if (typeof name === "string") {
          accum.set(name, (accum.get(name) || 0) + 1);
        }
        return accum;
      }, /* @__PURE__ */ new Map());
      __privateSet(this, _names, Object.freeze(items.map((item, index) => {
        const name = names2[index];
        if (name != null && nameCounts.get(name) === 1) {
          return name;
        }
        return null;
      })));
      if (!wrap) {
        return;
      }
      Object.freeze(this);
      return new Proxy(this, {
        get: (target, prop, receiver) => {
          if (typeof prop === "string") {
            if (prop.match(/^[0-9]+$/)) {
              const index = getNumber(prop, "%index");
              if (index < 0 || index >= this.length) {
                throw new RangeError("out of result range");
              }
              const item = target[index];
              if (item instanceof Error) {
                throwError(`index ${index}`, item);
              }
              return item;
            }
            if (passProperties$1.indexOf(prop) >= 0) {
              return Reflect.get(target, prop, receiver);
            }
            const value = target[prop];
            if (value instanceof Function) {
              return function(...args2) {
                return value.apply(this === receiver ? target : this, args2);
              };
            } else if (!(prop in target)) {
              return target.getValue.apply(this === receiver ? target : this, [prop]);
            }
          }
          return Reflect.get(target, prop, receiver);
        }
      });
    }
    toArray() {
      this.forEach((item, index) => {
        if (item instanceof Error) {
          throwError(`index ${index}`, item);
        }
      });
      return Array.of(this);
    }
    toObject() {
      return __privateGet(this, _names).reduce((accum, name, index) => {
        assert$1(name != null, "value at index ${ index } unnamed", "UNSUPPORTED_OPERATION", {
          operation: "toObject()"
        });
        if (!(name in accum)) {
          accum[name] = this.getValue(name);
        }
        return accum;
      }, {});
    }
    slice(start, end) {
      if (start == null) {
        start = 0;
      }
      if (end == null) {
        end = this.length;
      }
      const result = [], names2 = [];
      for (let i2 = start; i2 < end; i2++) {
        result.push(this[i2]);
        names2.push(__privateGet(this, _names)[i2]);
      }
      return new _Result(_guard$4, result, names2);
    }
    filter(callback, thisArg) {
      const result = [], names2 = [];
      for (let i2 = 0; i2 < this.length; i2++) {
        const item = this[i2];
        if (item instanceof Error) {
          throwError(`index ${i2}`, item);
        }
        if (callback.call(thisArg, item, i2, this)) {
          result.push(item);
          names2.push(__privateGet(this, _names)[i2]);
        }
      }
      return new _Result(_guard$4, result, names2);
    }
    getValue(name) {
      const index = __privateGet(this, _names).indexOf(name);
      if (index === -1) {
        return void 0;
      }
      const value = this[index];
      if (value instanceof Error) {
        throwError(`property ${JSON.stringify(name)}`, value.error);
      }
      return value;
    }
    static fromItems(items, keys) {
      return new _Result(_guard$4, items, keys);
    }
  };
  let Result = _Result;
  _names = new WeakMap();
  function getValue$1(value) {
    let bytes2 = toBeArray(value);
    assert$1(bytes2.length <= WordSize, "value out-of-bounds", "BUFFER_OVERRUN", { buffer: bytes2, length: WordSize, offset: bytes2.length });
    if (bytes2.length !== WordSize) {
      bytes2 = getBytesCopy(concat([Padding.slice(bytes2.length % WordSize), bytes2]));
    }
    return bytes2;
  }
  class Coder {
    constructor(name, type, localName, dynamic) {
      defineProperties(this, { name, type, localName, dynamic }, {
        name: "string",
        type: "string",
        localName: "string",
        dynamic: "boolean"
      });
    }
    _throwError(message, value) {
      assertArgument(false, message, this.localName, value);
    }
  }
  class Writer {
    constructor() {
      __privateAdd(this, _writeData);
      __privateAdd(this, _data, void 0);
      __privateAdd(this, _dataLength, void 0);
      __privateSet(this, _data, []);
      __privateSet(this, _dataLength, 0);
    }
    get data() {
      return concat(__privateGet(this, _data));
    }
    get length() {
      return __privateGet(this, _dataLength);
    }
    appendWriter(writer) {
      return __privateMethod(this, _writeData, writeData_fn).call(this, getBytesCopy(writer.data));
    }
    writeBytes(value) {
      let bytes2 = getBytesCopy(value);
      const paddingOffset = bytes2.length % WordSize;
      if (paddingOffset) {
        bytes2 = getBytesCopy(concat([bytes2, Padding.slice(paddingOffset)]));
      }
      return __privateMethod(this, _writeData, writeData_fn).call(this, bytes2);
    }
    writeValue(value) {
      return __privateMethod(this, _writeData, writeData_fn).call(this, getValue$1(value));
    }
    writeUpdatableValue() {
      const offset = __privateGet(this, _data).length;
      __privateGet(this, _data).push(Padding);
      __privateSet(this, _dataLength, __privateGet(this, _dataLength) + WordSize);
      return (value) => {
        __privateGet(this, _data)[offset] = getValue$1(value);
      };
    }
  }
  _data = new WeakMap();
  _dataLength = new WeakMap();
  _writeData = new WeakSet();
  writeData_fn = function(data) {
    __privateGet(this, _data).push(data);
    __privateSet(this, _dataLength, __privateGet(this, _dataLength) + data.length);
    return data.length;
  };
  const _Reader = class {
    constructor(data, allowLoose) {
      __privateAdd(this, _peekBytes);
      __privateAdd(this, _data2, void 0);
      __privateAdd(this, _offset, void 0);
      defineProperties(this, { allowLoose: !!allowLoose });
      __privateSet(this, _data2, getBytesCopy(data));
      __privateSet(this, _offset, 0);
    }
    get data() {
      return hexlify(__privateGet(this, _data2));
    }
    get dataLength() {
      return __privateGet(this, _data2).length;
    }
    get consumed() {
      return __privateGet(this, _offset);
    }
    get bytes() {
      return new Uint8Array(__privateGet(this, _data2));
    }
    subReader(offset) {
      return new _Reader(__privateGet(this, _data2).slice(__privateGet(this, _offset) + offset), this.allowLoose);
    }
    readBytes(length, loose) {
      let bytes2 = __privateMethod(this, _peekBytes, peekBytes_fn).call(this, 0, length, !!loose);
      __privateSet(this, _offset, __privateGet(this, _offset) + bytes2.length);
      return bytes2.slice(0, length);
    }
    readValue() {
      return toBigInt(this.readBytes(WordSize));
    }
    readIndex() {
      return toNumber(this.readBytes(WordSize));
    }
  };
  let Reader = _Reader;
  _data2 = new WeakMap();
  _offset = new WeakMap();
  _peekBytes = new WeakSet();
  peekBytes_fn = function(offset, length, loose) {
    let alignedLength = Math.ceil(length / WordSize) * WordSize;
    if (__privateGet(this, _offset) + alignedLength > __privateGet(this, _data2).length) {
      if (this.allowLoose && loose && __privateGet(this, _offset) + length <= __privateGet(this, _data2).length) {
        alignedLength = length;
      } else {
        assert$1(false, "data out-of-bounds", "BUFFER_OVERRUN", {
          buffer: getBytesCopy(__privateGet(this, _data2)),
          length: __privateGet(this, _data2).length,
          offset: __privateGet(this, _offset) + alignedLength
        });
      }
    }
    return __privateGet(this, _data2).slice(__privateGet(this, _offset), __privateGet(this, _offset) + alignedLength);
  };
  function number$1(n2) {
    if (!Number.isSafeInteger(n2) || n2 < 0)
      throw new Error(`Wrong positive integer: ${n2}`);
  }
  function bool(b2) {
    if (typeof b2 !== "boolean")
      throw new Error(`Expected boolean, not ${b2}`);
  }
  function bytes(b2, ...lengths) {
    if (!(b2 instanceof Uint8Array))
      throw new TypeError("Expected Uint8Array");
    if (lengths.length > 0 && !lengths.includes(b2.length))
      throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b2.length}`);
  }
  function hash(hash2) {
    if (typeof hash2 !== "function" || typeof hash2.create !== "function")
      throw new Error("Hash should be wrapped by utils.wrapConstructor");
    number$1(hash2.outputLen);
    number$1(hash2.blockLen);
  }
  function exists(instance, checkFinished = true) {
    if (instance.destroyed)
      throw new Error("Hash instance has been destroyed");
    if (checkFinished && instance.finished)
      throw new Error("Hash#digest() has already been called");
  }
  function output(out, instance) {
    bytes(out);
    const min = instance.outputLen;
    if (out.length < min) {
      throw new Error(`digestInto() expects output buffer of length at least ${min}`);
    }
  }
  const assert = {
    number: number$1,
    bool,
    bytes,
    hash,
    exists,
    output
  };
  /*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
  const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
  const rotr = (word, shift) => word << 32 - shift | word >>> shift;
  const isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
  if (!isLE)
    throw new Error("Non little-endian hardware is not supported");
  Array.from({ length: 256 }, (v2, i2) => i2.toString(16).padStart(2, "0"));
  const nextTick = async () => {
  };
  async function asyncLoop(iters, tick, cb) {
    let ts2 = Date.now();
    for (let i2 = 0; i2 < iters; i2++) {
      cb(i2);
      const diff = Date.now() - ts2;
      if (diff >= 0 && diff < tick)
        continue;
      await nextTick();
      ts2 += diff;
    }
  }
  function utf8ToBytes(str) {
    if (typeof str !== "string") {
      throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);
    }
    return new TextEncoder().encode(str);
  }
  function toBytes(data) {
    if (typeof data === "string")
      data = utf8ToBytes(data);
    if (!(data instanceof Uint8Array))
      throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);
    return data;
  }
  class Hash {
    clone() {
      return this._cloneInto();
    }
  }
  const isPlainObject$1 = (obj) => Object.prototype.toString.call(obj) === "[object Object]" && obj.constructor === Object;
  function checkOpts(defaults, opts) {
    if (opts !== void 0 && (typeof opts !== "object" || !isPlainObject$1(opts)))
      throw new TypeError("Options should be object or undefined");
    const merged = Object.assign(defaults, opts);
    return merged;
  }
  function wrapConstructor(hashConstructor) {
    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();
    const tmp = hashConstructor();
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = () => hashConstructor();
    return hashC;
  }
  function wrapConstructorWithOpts(hashCons) {
    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
    const tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts) => hashCons(opts);
    return hashC;
  }
  class HMAC extends Hash {
    constructor(hash2, _key) {
      super();
      this.finished = false;
      this.destroyed = false;
      assert.hash(hash2);
      const key = toBytes(_key);
      this.iHash = hash2.create();
      if (!(this.iHash instanceof Hash))
        throw new TypeError("Expected instance of class which extends utils.Hash");
      const blockLen = this.blockLen = this.iHash.blockLen;
      this.outputLen = this.iHash.outputLen;
      const pad = new Uint8Array(blockLen);
      pad.set(key.length > this.iHash.blockLen ? hash2.create().update(key).digest() : key);
      for (let i2 = 0; i2 < pad.length; i2++)
        pad[i2] ^= 54;
      this.iHash.update(pad);
      this.oHash = hash2.create();
      for (let i2 = 0; i2 < pad.length; i2++)
        pad[i2] ^= 54 ^ 92;
      this.oHash.update(pad);
      pad.fill(0);
    }
    update(buf) {
      assert.exists(this);
      this.iHash.update(buf);
      return this;
    }
    digestInto(out) {
      assert.exists(this);
      assert.bytes(out, this.outputLen);
      this.finished = true;
      this.iHash.digestInto(out);
      this.oHash.update(out);
      this.oHash.digestInto(out);
      this.destroy();
    }
    digest() {
      const out = new Uint8Array(this.oHash.outputLen);
      this.digestInto(out);
      return out;
    }
    _cloneInto(to) {
      to || (to = Object.create(Object.getPrototypeOf(this), {}));
      const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
      to = to;
      to.finished = finished;
      to.destroyed = destroyed;
      to.blockLen = blockLen;
      to.outputLen = outputLen;
      to.oHash = oHash._cloneInto(to.oHash);
      to.iHash = iHash._cloneInto(to.iHash);
      return to;
    }
    destroy() {
      this.destroyed = true;
      this.oHash.destroy();
      this.iHash.destroy();
    }
  }
  const hmac$1 = (hash2, key, message) => new HMAC(hash2, key).update(message).digest();
  hmac$1.create = (hash2, key) => new HMAC(hash2, key);
  function pbkdf2Init(hash2, _password, _salt, _opts) {
    assert.hash(hash2);
    const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);
    const { c: c2, dkLen, asyncTick } = opts;
    assert.number(c2);
    assert.number(dkLen);
    assert.number(asyncTick);
    if (c2 < 1)
      throw new Error("PBKDF2: iterations (c) should be >= 1");
    const password = toBytes(_password);
    const salt = toBytes(_salt);
    const DK = new Uint8Array(dkLen);
    const PRF = hmac$1.create(hash2, password);
    const PRFSalt = PRF._cloneInto().update(salt);
    return { c: c2, dkLen, asyncTick, DK, PRF, PRFSalt };
  }
  function pbkdf2Output(PRF, PRFSalt, DK, prfW, u2) {
    PRF.destroy();
    PRFSalt.destroy();
    if (prfW)
      prfW.destroy();
    u2.fill(0);
    return DK;
  }
  function pbkdf2$2(hash2, password, salt, opts) {
    const { c: c2, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash2, password, salt, opts);
    let prfW;
    const arr = new Uint8Array(4);
    const view = createView(arr);
    const u2 = new Uint8Array(PRF.outputLen);
    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
      const Ti = DK.subarray(pos, pos + PRF.outputLen);
      view.setInt32(0, ti, false);
      (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u2);
      Ti.set(u2.subarray(0, Ti.length));
      for (let ui = 1; ui < c2; ui++) {
        PRF._cloneInto(prfW).update(u2).digestInto(u2);
        for (let i2 = 0; i2 < Ti.length; i2++)
          Ti[i2] ^= u2[i2];
      }
    }
    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u2);
  }
  function setBigUint64(view, byteOffset, value, isLE2) {
    if (typeof view.setBigUint64 === "function")
      return view.setBigUint64(byteOffset, value, isLE2);
    const _32n2 = BigInt(32);
    const _u32_max = BigInt(4294967295);
    const wh = Number(value >> _32n2 & _u32_max);
    const wl = Number(value & _u32_max);
    const h2 = isLE2 ? 4 : 0;
    const l2 = isLE2 ? 0 : 4;
    view.setUint32(byteOffset + h2, wh, isLE2);
    view.setUint32(byteOffset + l2, wl, isLE2);
  }
  class SHA2 extends Hash {
    constructor(blockLen, outputLen, padOffset, isLE2) {
      super();
      this.blockLen = blockLen;
      this.outputLen = outputLen;
      this.padOffset = padOffset;
      this.isLE = isLE2;
      this.finished = false;
      this.length = 0;
      this.pos = 0;
      this.destroyed = false;
      this.buffer = new Uint8Array(blockLen);
      this.view = createView(this.buffer);
    }
    update(data) {
      assert.exists(this);
      const { view, buffer: buffer2, blockLen } = this;
      data = toBytes(data);
      const len = data.length;
      for (let pos = 0; pos < len; ) {
        const take = Math.min(blockLen - this.pos, len - pos);
        if (take === blockLen) {
          const dataView = createView(data);
          for (; blockLen <= len - pos; pos += blockLen)
            this.process(dataView, pos);
          continue;
        }
        buffer2.set(data.subarray(pos, pos + take), this.pos);
        this.pos += take;
        pos += take;
        if (this.pos === blockLen) {
          this.process(view, 0);
          this.pos = 0;
        }
      }
      this.length += data.length;
      this.roundClean();
      return this;
    }
    digestInto(out) {
      assert.exists(this);
      assert.output(out, this);
      this.finished = true;
      const { buffer: buffer2, view, blockLen, isLE: isLE2 } = this;
      let { pos } = this;
      buffer2[pos++] = 128;
      this.buffer.subarray(pos).fill(0);
      if (this.padOffset > blockLen - pos) {
        this.process(view, 0);
        pos = 0;
      }
      for (let i2 = pos; i2 < blockLen; i2++)
        buffer2[i2] = 0;
      setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE2);
      this.process(view, 0);
      const oview = createView(out);
      this.get().forEach((v2, i2) => oview.setUint32(4 * i2, v2, isLE2));
    }
    digest() {
      const { buffer: buffer2, outputLen } = this;
      this.digestInto(buffer2);
      const res = buffer2.slice(0, outputLen);
      this.destroy();
      return res;
    }
    _cloneInto(to) {
      to || (to = new this.constructor());
      to.set(...this.get());
      const { blockLen, buffer: buffer2, length, finished, destroyed, pos } = this;
      to.length = length;
      to.pos = pos;
      to.finished = finished;
      to.destroyed = destroyed;
      if (length % blockLen)
        to.buffer.set(buffer2);
      return to;
    }
  }
  const Chi = (a2, b2, c2) => a2 & b2 ^ ~a2 & c2;
  const Maj = (a2, b2, c2) => a2 & b2 ^ a2 & c2 ^ b2 & c2;
  const SHA256_K = new Uint32Array([
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
  ]);
  const IV = new Uint32Array([
    1779033703,
    3144134277,
    1013904242,
    2773480762,
    1359893119,
    2600822924,
    528734635,
    1541459225
  ]);
  const SHA256_W = new Uint32Array(64);
  class SHA256 extends SHA2 {
    constructor() {
      super(64, 32, 8, false);
      this.A = IV[0] | 0;
      this.B = IV[1] | 0;
      this.C = IV[2] | 0;
      this.D = IV[3] | 0;
      this.E = IV[4] | 0;
      this.F = IV[5] | 0;
      this.G = IV[6] | 0;
      this.H = IV[7] | 0;
    }
    get() {
      const { A: A2, B: B2, C: C2, D: D2, E: E2, F: F2, G: G2, H: H2 } = this;
      return [A2, B2, C2, D2, E2, F2, G2, H2];
    }
    set(A2, B2, C2, D2, E2, F2, G2, H2) {
      this.A = A2 | 0;
      this.B = B2 | 0;
      this.C = C2 | 0;
      this.D = D2 | 0;
      this.E = E2 | 0;
      this.F = F2 | 0;
      this.G = G2 | 0;
      this.H = H2 | 0;
    }
    process(view, offset) {
      for (let i2 = 0; i2 < 16; i2++, offset += 4)
        SHA256_W[i2] = view.getUint32(offset, false);
      for (let i2 = 16; i2 < 64; i2++) {
        const W15 = SHA256_W[i2 - 15];
        const W2 = SHA256_W[i2 - 2];
        const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;
        const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ W2 >>> 10;
        SHA256_W[i2] = s1 + SHA256_W[i2 - 7] + s0 + SHA256_W[i2 - 16] | 0;
      }
      let { A: A2, B: B2, C: C2, D: D2, E: E2, F: F2, G: G2, H: H2 } = this;
      for (let i2 = 0; i2 < 64; i2++) {
        const sigma1 = rotr(E2, 6) ^ rotr(E2, 11) ^ rotr(E2, 25);
        const T12 = H2 + sigma1 + Chi(E2, F2, G2) + SHA256_K[i2] + SHA256_W[i2] | 0;
        const sigma0 = rotr(A2, 2) ^ rotr(A2, 13) ^ rotr(A2, 22);
        const T22 = sigma0 + Maj(A2, B2, C2) | 0;
        H2 = G2;
        G2 = F2;
        F2 = E2;
        E2 = D2 + T12 | 0;
        D2 = C2;
        C2 = B2;
        B2 = A2;
        A2 = T12 + T22 | 0;
      }
      A2 = A2 + this.A | 0;
      B2 = B2 + this.B | 0;
      C2 = C2 + this.C | 0;
      D2 = D2 + this.D | 0;
      E2 = E2 + this.E | 0;
      F2 = F2 + this.F | 0;
      G2 = G2 + this.G | 0;
      H2 = H2 + this.H | 0;
      this.set(A2, B2, C2, D2, E2, F2, G2, H2);
    }
    roundClean() {
      SHA256_W.fill(0);
    }
    destroy() {
      this.set(0, 0, 0, 0, 0, 0, 0, 0);
      this.buffer.fill(0);
    }
  }
  const sha256$2 = wrapConstructor(() => new SHA256());
  const U32_MASK64 = BigInt(2 ** 32 - 1);
  const _32n = BigInt(32);
  function fromBig(n2, le2 = false) {
    if (le2)
      return { h: Number(n2 & U32_MASK64), l: Number(n2 >> _32n & U32_MASK64) };
    return { h: Number(n2 >> _32n & U32_MASK64) | 0, l: Number(n2 & U32_MASK64) | 0 };
  }
  function split(lst, le2 = false) {
    let Ah = new Uint32Array(lst.length);
    let Al = new Uint32Array(lst.length);
    for (let i2 = 0; i2 < lst.length; i2++) {
      const { h: h2, l: l2 } = fromBig(lst[i2], le2);
      [Ah[i2], Al[i2]] = [h2, l2];
    }
    return [Ah, Al];
  }
  const toBig = (h2, l2) => BigInt(h2 >>> 0) << _32n | BigInt(l2 >>> 0);
  const shrSH = (h2, l2, s2) => h2 >>> s2;
  const shrSL = (h2, l2, s2) => h2 << 32 - s2 | l2 >>> s2;
  const rotrSH = (h2, l2, s2) => h2 >>> s2 | l2 << 32 - s2;
  const rotrSL = (h2, l2, s2) => h2 << 32 - s2 | l2 >>> s2;
  const rotrBH = (h2, l2, s2) => h2 << 64 - s2 | l2 >>> s2 - 32;
  const rotrBL = (h2, l2, s2) => h2 >>> s2 - 32 | l2 << 64 - s2;
  const rotr32H = (h2, l2) => l2;
  const rotr32L = (h2, l2) => h2;
  const rotlSH = (h2, l2, s2) => h2 << s2 | l2 >>> 32 - s2;
  const rotlSL = (h2, l2, s2) => l2 << s2 | h2 >>> 32 - s2;
  const rotlBH = (h2, l2, s2) => l2 << s2 - 32 | h2 >>> 64 - s2;
  const rotlBL = (h2, l2, s2) => h2 << s2 - 32 | l2 >>> 64 - s2;
  function add(Ah, Al, Bh, Bl) {
    const l2 = (Al >>> 0) + (Bl >>> 0);
    return { h: Ah + Bh + (l2 / 2 ** 32 | 0) | 0, l: l2 | 0 };
  }
  const add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
  const add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
  const add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
  const add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
  const add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
  const add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
  const u64 = {
    fromBig,
    split,
    toBig,
    shrSH,
    shrSL,
    rotrSH,
    rotrSL,
    rotrBH,
    rotrBL,
    rotr32H,
    rotr32L,
    rotlSH,
    rotlSL,
    rotlBH,
    rotlBL,
    add,
    add3L,
    add3H,
    add4L,
    add4H,
    add5H,
    add5L
  };
  const [SHA512_Kh, SHA512_Kl] = u64.split([
    "0x428a2f98d728ae22",
    "0x7137449123ef65cd",
    "0xb5c0fbcfec4d3b2f",
    "0xe9b5dba58189dbbc",
    "0x3956c25bf348b538",
    "0x59f111f1b605d019",
    "0x923f82a4af194f9b",
    "0xab1c5ed5da6d8118",
    "0xd807aa98a3030242",
    "0x12835b0145706fbe",
    "0x243185be4ee4b28c",
    "0x550c7dc3d5ffb4e2",
    "0x72be5d74f27b896f",
    "0x80deb1fe3b1696b1",
    "0x9bdc06a725c71235",
    "0xc19bf174cf692694",
    "0xe49b69c19ef14ad2",
    "0xefbe4786384f25e3",
    "0x0fc19dc68b8cd5b5",
    "0x240ca1cc77ac9c65",
    "0x2de92c6f592b0275",
    "0x4a7484aa6ea6e483",
    "0x5cb0a9dcbd41fbd4",
    "0x76f988da831153b5",
    "0x983e5152ee66dfab",
    "0xa831c66d2db43210",
    "0xb00327c898fb213f",
    "0xbf597fc7beef0ee4",
    "0xc6e00bf33da88fc2",
    "0xd5a79147930aa725",
    "0x06ca6351e003826f",
    "0x142929670a0e6e70",
    "0x27b70a8546d22ffc",
    "0x2e1b21385c26c926",
    "0x4d2c6dfc5ac42aed",
    "0x53380d139d95b3df",
    "0x650a73548baf63de",
    "0x766a0abb3c77b2a8",
    "0x81c2c92e47edaee6",
    "0x92722c851482353b",
    "0xa2bfe8a14cf10364",
    "0xa81a664bbc423001",
    "0xc24b8b70d0f89791",
    "0xc76c51a30654be30",
    "0xd192e819d6ef5218",
    "0xd69906245565a910",
    "0xf40e35855771202a",
    "0x106aa07032bbd1b8",
    "0x19a4c116b8d2d0c8",
    "0x1e376c085141ab53",
    "0x2748774cdf8eeb99",
    "0x34b0bcb5e19b48a8",
    "0x391c0cb3c5c95a63",
    "0x4ed8aa4ae3418acb",
    "0x5b9cca4f7763e373",
    "0x682e6ff3d6b2b8a3",
    "0x748f82ee5defb2fc",
    "0x78a5636f43172f60",
    "0x84c87814a1f0ab72",
    "0x8cc702081a6439ec",
    "0x90befffa23631e28",
    "0xa4506cebde82bde9",
    "0xbef9a3f7b2c67915",
    "0xc67178f2e372532b",
    "0xca273eceea26619c",
    "0xd186b8c721c0c207",
    "0xeada7dd6cde0eb1e",
    "0xf57d4f7fee6ed178",
    "0x06f067aa72176fba",
    "0x0a637dc5a2c898a6",
    "0x113f9804bef90dae",
    "0x1b710b35131c471b",
    "0x28db77f523047d84",
    "0x32caab7b40c72493",
    "0x3c9ebe0a15c9bebc",
    "0x431d67c49c100d4c",
    "0x4cc5d4becb3e42b6",
    "0x597f299cfc657e2a",
    "0x5fcb6fab3ad6faec",
    "0x6c44198c4a475817"
  ].map((n2) => BigInt(n2)));
  const SHA512_W_H = new Uint32Array(80);
  const SHA512_W_L = new Uint32Array(80);
  class SHA512 extends SHA2 {
    constructor() {
      super(128, 64, 16, false);
      this.Ah = 1779033703 | 0;
      this.Al = 4089235720 | 0;
      this.Bh = 3144134277 | 0;
      this.Bl = 2227873595 | 0;
      this.Ch = 1013904242 | 0;
      this.Cl = 4271175723 | 0;
      this.Dh = 2773480762 | 0;
      this.Dl = 1595750129 | 0;
      this.Eh = 1359893119 | 0;
      this.El = 2917565137 | 0;
      this.Fh = 2600822924 | 0;
      this.Fl = 725511199 | 0;
      this.Gh = 528734635 | 0;
      this.Gl = 4215389547 | 0;
      this.Hh = 1541459225 | 0;
      this.Hl = 327033209 | 0;
    }
    get() {
      const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
      return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
    }
    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
      this.Ah = Ah | 0;
      this.Al = Al | 0;
      this.Bh = Bh | 0;
      this.Bl = Bl | 0;
      this.Ch = Ch | 0;
      this.Cl = Cl | 0;
      this.Dh = Dh | 0;
      this.Dl = Dl | 0;
      this.Eh = Eh | 0;
      this.El = El | 0;
      this.Fh = Fh | 0;
      this.Fl = Fl | 0;
      this.Gh = Gh | 0;
      this.Gl = Gl | 0;
      this.Hh = Hh | 0;
      this.Hl = Hl | 0;
    }
    process(view, offset) {
      for (let i2 = 0; i2 < 16; i2++, offset += 4) {
        SHA512_W_H[i2] = view.getUint32(offset);
        SHA512_W_L[i2] = view.getUint32(offset += 4);
      }
      for (let i2 = 16; i2 < 80; i2++) {
        const W15h = SHA512_W_H[i2 - 15] | 0;
        const W15l = SHA512_W_L[i2 - 15] | 0;
        const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);
        const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);
        const W2h = SHA512_W_H[i2 - 2] | 0;
        const W2l = SHA512_W_L[i2 - 2] | 0;
        const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);
        const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);
        const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i2 - 7], SHA512_W_L[i2 - 16]);
        const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i2 - 7], SHA512_W_H[i2 - 16]);
        SHA512_W_H[i2] = SUMh | 0;
        SHA512_W_L[i2] = SUMl | 0;
      }
      let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
      for (let i2 = 0; i2 < 80; i2++) {
        const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);
        const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);
        const CHIh = Eh & Fh ^ ~Eh & Gh;
        const CHIl = El & Fl ^ ~El & Gl;
        const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i2], SHA512_W_L[i2]);
        const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i2], SHA512_W_H[i2]);
        const T1l = T1ll | 0;
        const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);
        const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);
        const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
        const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
        Hh = Gh | 0;
        Hl = Gl | 0;
        Gh = Fh | 0;
        Gl = Fl | 0;
        Fh = Eh | 0;
        Fl = El | 0;
        ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
        Dh = Ch | 0;
        Dl = Cl | 0;
        Ch = Bh | 0;
        Cl = Bl | 0;
        Bh = Ah | 0;
        Bl = Al | 0;
        const All = u64.add3L(T1l, sigma0l, MAJl);
        Ah = u64.add3H(All, T1h, sigma0h, MAJh);
        Al = All | 0;
      }
      ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
      ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
      ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
      ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
      ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
      ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
      ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
      ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
      this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
    }
    roundClean() {
      SHA512_W_H.fill(0);
      SHA512_W_L.fill(0);
    }
    destroy() {
      this.buffer.fill(0);
      this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
  }
  class SHA512_256 extends SHA512 {
    constructor() {
      super();
      this.Ah = 573645204 | 0;
      this.Al = 4230739756 | 0;
      this.Bh = 2673172387 | 0;
      this.Bl = 3360449730 | 0;
      this.Ch = 596883563 | 0;
      this.Cl = 1867755857 | 0;
      this.Dh = 2520282905 | 0;
      this.Dl = 1497426621 | 0;
      this.Eh = 2519219938 | 0;
      this.El = 2827943907 | 0;
      this.Fh = 3193839141 | 0;
      this.Fl = 1401305490 | 0;
      this.Gh = 721525244 | 0;
      this.Gl = 746961066 | 0;
      this.Hh = 246885852 | 0;
      this.Hl = 2177182882 | 0;
      this.outputLen = 32;
    }
  }
  class SHA384 extends SHA512 {
    constructor() {
      super();
      this.Ah = 3418070365 | 0;
      this.Al = 3238371032 | 0;
      this.Bh = 1654270250 | 0;
      this.Bl = 914150663 | 0;
      this.Ch = 2438529370 | 0;
      this.Cl = 812702999 | 0;
      this.Dh = 355462360 | 0;
      this.Dl = 4144912697 | 0;
      this.Eh = 1731405415 | 0;
      this.El = 4290775857 | 0;
      this.Fh = 2394180231 | 0;
      this.Fl = 1750603025 | 0;
      this.Gh = 3675008525 | 0;
      this.Gl = 1694076839 | 0;
      this.Hh = 1203062813 | 0;
      this.Hl = 3204075428 | 0;
      this.outputLen = 48;
    }
  }
  const sha512$1 = wrapConstructor(() => new SHA512());
  wrapConstructor(() => new SHA512_256());
  wrapConstructor(() => new SHA384());
  function getGlobal() {
    if (typeof self !== "undefined") {
      return self;
    }
    if (typeof window !== "undefined") {
      return window;
    }
    if (typeof global !== "undefined") {
      return global;
    }
    throw new Error("unable to locate global object");
  }
  const anyGlobal = getGlobal();
  const crypto$1 = anyGlobal.crypto || anyGlobal.msCrypto;
  function createHash(algo) {
    switch (algo) {
      case "sha256":
        return sha256$2.create();
      case "sha512":
        return sha512$1.create();
    }
    assertArgument(false, "invalid hashing algorithm name", "algorithm", algo);
  }
  function createHmac(_algo, key) {
    const algo = { sha256: sha256$2, sha512: sha512$1 }[_algo];
    assertArgument(algo != null, "invalid hmac algorithm", "algorithm", _algo);
    return hmac$1.create(algo, key);
  }
  function pbkdf2Sync(password, salt, iterations, keylen, _algo) {
    const algo = { sha256: sha256$2, sha512: sha512$1 }[_algo];
    assertArgument(algo != null, "invalid pbkdf2 algorithm", "algorithm", _algo);
    return pbkdf2$2(algo, password, salt, { c: iterations, dkLen: keylen });
  }
  function randomBytes$1(length) {
    assert$1(crypto$1 != null, "platform does not support secure random numbers", "UNSUPPORTED_OPERATION", {
      operation: "randomBytes"
    });
    assertArgument(Number.isInteger(length) && length > 0 && length <= 1024, "invalid length", "length", length);
    const result = new Uint8Array(length);
    crypto$1.getRandomValues(result);
    return result;
  }
  let locked$4 = false;
  const _computeHmac = function(algorithm, key, data) {
    return createHmac(algorithm, key).update(data).digest();
  };
  let __computeHmac = _computeHmac;
  function computeHmac(algorithm, _key, _data5) {
    const key = getBytes(_key, "key");
    const data = getBytes(_data5, "data");
    return hexlify(__computeHmac(algorithm, key, data));
  }
  computeHmac._ = _computeHmac;
  computeHmac.lock = function() {
    locked$4 = true;
  };
  computeHmac.register = function(func) {
    if (locked$4) {
      throw new Error("computeHmac is locked");
    }
    __computeHmac = func;
  };
  Object.freeze(computeHmac);
  const [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];
  const _0n$1 = BigInt(0);
  const _1n$1 = BigInt(1);
  const _2n$1 = BigInt(2);
  const _7n = BigInt(7);
  const _256n = BigInt(256);
  const _0x71n = BigInt(113);
  for (let round = 0, R2 = _1n$1, x2 = 1, y2 = 0; round < 24; round++) {
    [x2, y2] = [y2, (2 * x2 + 3 * y2) % 5];
    SHA3_PI.push(2 * (5 * y2 + x2));
    SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
    let t2 = _0n$1;
    for (let j2 = 0; j2 < 7; j2++) {
      R2 = (R2 << _1n$1 ^ (R2 >> _7n) * _0x71n) % _256n;
      if (R2 & _2n$1)
        t2 ^= _1n$1 << (_1n$1 << BigInt(j2)) - _1n$1;
    }
    _SHA3_IOTA.push(t2);
  }
  const [SHA3_IOTA_H, SHA3_IOTA_L] = u64.split(_SHA3_IOTA, true);
  const rotlH = (h2, l2, s2) => s2 > 32 ? u64.rotlBH(h2, l2, s2) : u64.rotlSH(h2, l2, s2);
  const rotlL = (h2, l2, s2) => s2 > 32 ? u64.rotlBL(h2, l2, s2) : u64.rotlSL(h2, l2, s2);
  function keccakP(s2, rounds = 24) {
    const B2 = new Uint32Array(5 * 2);
    for (let round = 24 - rounds; round < 24; round++) {
      for (let x2 = 0; x2 < 10; x2++)
        B2[x2] = s2[x2] ^ s2[x2 + 10] ^ s2[x2 + 20] ^ s2[x2 + 30] ^ s2[x2 + 40];
      for (let x2 = 0; x2 < 10; x2 += 2) {
        const idx1 = (x2 + 8) % 10;
        const idx0 = (x2 + 2) % 10;
        const B0 = B2[idx0];
        const B1 = B2[idx0 + 1];
        const Th = rotlH(B0, B1, 1) ^ B2[idx1];
        const Tl = rotlL(B0, B1, 1) ^ B2[idx1 + 1];
        for (let y2 = 0; y2 < 50; y2 += 10) {
          s2[x2 + y2] ^= Th;
          s2[x2 + y2 + 1] ^= Tl;
        }
      }
      let curH = s2[2];
      let curL = s2[3];
      for (let t2 = 0; t2 < 24; t2++) {
        const shift = SHA3_ROTL[t2];
        const Th = rotlH(curH, curL, shift);
        const Tl = rotlL(curH, curL, shift);
        const PI = SHA3_PI[t2];
        curH = s2[PI];
        curL = s2[PI + 1];
        s2[PI] = Th;
        s2[PI + 1] = Tl;
      }
      for (let y2 = 0; y2 < 50; y2 += 10) {
        for (let x2 = 0; x2 < 10; x2++)
          B2[x2] = s2[y2 + x2];
        for (let x2 = 0; x2 < 10; x2++)
          s2[y2 + x2] ^= ~B2[(x2 + 2) % 10] & B2[(x2 + 4) % 10];
      }
      s2[0] ^= SHA3_IOTA_H[round];
      s2[1] ^= SHA3_IOTA_L[round];
    }
    B2.fill(0);
  }
  class Keccak extends Hash {
    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
      super();
      this.blockLen = blockLen;
      this.suffix = suffix;
      this.outputLen = outputLen;
      this.enableXOF = enableXOF;
      this.rounds = rounds;
      this.pos = 0;
      this.posOut = 0;
      this.finished = false;
      this.destroyed = false;
      assert.number(outputLen);
      if (0 >= this.blockLen || this.blockLen >= 200)
        throw new Error("Sha3 supports only keccak-f1600 function");
      this.state = new Uint8Array(200);
      this.state32 = u32(this.state);
    }
    keccak() {
      keccakP(this.state32, this.rounds);
      this.posOut = 0;
      this.pos = 0;
    }
    update(data) {
      assert.exists(this);
      const { blockLen, state } = this;
      data = toBytes(data);
      const len = data.length;
      for (let pos = 0; pos < len; ) {
        const take = Math.min(blockLen - this.pos, len - pos);
        for (let i2 = 0; i2 < take; i2++)
          state[this.pos++] ^= data[pos++];
        if (this.pos === blockLen)
          this.keccak();
      }
      return this;
    }
    finish() {
      if (this.finished)
        return;
      this.finished = true;
      const { state, suffix, pos, blockLen } = this;
      state[pos] ^= suffix;
      if ((suffix & 128) !== 0 && pos === blockLen - 1)
        this.keccak();
      state[blockLen - 1] ^= 128;
      this.keccak();
    }
    writeInto(out) {
      assert.exists(this, false);
      assert.bytes(out);
      this.finish();
      const bufferOut = this.state;
      const { blockLen } = this;
      for (let pos = 0, len = out.length; pos < len; ) {
        if (this.posOut >= blockLen)
          this.keccak();
        const take = Math.min(blockLen - this.posOut, len - pos);
        out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
        this.posOut += take;
        pos += take;
      }
      return out;
    }
    xofInto(out) {
      if (!this.enableXOF)
        throw new Error("XOF is not possible for this instance");
      return this.writeInto(out);
    }
    xof(bytes2) {
      assert.number(bytes2);
      return this.xofInto(new Uint8Array(bytes2));
    }
    digestInto(out) {
      assert.output(out, this);
      if (this.finished)
        throw new Error("digest() was already called");
      this.writeInto(out);
      this.destroy();
      return out;
    }
    digest() {
      return this.digestInto(new Uint8Array(this.outputLen));
    }
    destroy() {
      this.destroyed = true;
      this.state.fill(0);
    }
    _cloneInto(to) {
      const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
      to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
      to.state32.set(this.state32);
      to.pos = this.pos;
      to.posOut = this.posOut;
      to.finished = this.finished;
      to.rounds = rounds;
      to.suffix = suffix;
      to.outputLen = outputLen;
      to.enableXOF = enableXOF;
      to.destroyed = this.destroyed;
      return to;
    }
  }
  const gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));
  gen(6, 144, 224 / 8);
  gen(6, 136, 256 / 8);
  gen(6, 104, 384 / 8);
  gen(6, 72, 512 / 8);
  gen(1, 144, 224 / 8);
  const keccak_256 = gen(1, 136, 256 / 8);
  gen(1, 104, 384 / 8);
  gen(1, 72, 512 / 8);
  const genShake = (suffix, blockLen, outputLen) => wrapConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
  genShake(31, 168, 128 / 8);
  genShake(31, 136, 256 / 8);
  let locked$3 = false;
  const _keccak256 = function(data) {
    return keccak_256(data);
  };
  let __keccak256 = _keccak256;
  function keccak256(_data5) {
    const data = getBytes(_data5, "data");
    return hexlify(__keccak256(data));
  }
  keccak256._ = _keccak256;
  keccak256.lock = function() {
    locked$3 = true;
  };
  keccak256.register = function(func) {
    if (locked$3) {
      throw new TypeError("keccak256 is locked");
    }
    __keccak256 = func;
  };
  Object.freeze(keccak256);
  const Rho = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
  const Id = Uint8Array.from({ length: 16 }, (_2, i2) => i2);
  const Pi = Id.map((i2) => (9 * i2 + 5) % 16);
  let idxL = [Id];
  let idxR = [Pi];
  for (let i2 = 0; i2 < 4; i2++)
    for (let j2 of [idxL, idxR])
      j2.push(j2[i2].map((k2) => Rho[k2]));
  const shifts = [
    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
  ].map((i2) => new Uint8Array(i2));
  const shiftsL = idxL.map((idx, i2) => idx.map((j2) => shifts[i2][j2]));
  const shiftsR = idxR.map((idx, i2) => idx.map((j2) => shifts[i2][j2]));
  const Kl = new Uint32Array([0, 1518500249, 1859775393, 2400959708, 2840853838]);
  const Kr = new Uint32Array([1352829926, 1548603684, 1836072691, 2053994217, 0]);
  const rotl$1 = (word, shift) => word << shift | word >>> 32 - shift;
  function f(group, x2, y2, z2) {
    if (group === 0)
      return x2 ^ y2 ^ z2;
    else if (group === 1)
      return x2 & y2 | ~x2 & z2;
    else if (group === 2)
      return (x2 | ~y2) ^ z2;
    else if (group === 3)
      return x2 & z2 | y2 & ~z2;
    else
      return x2 ^ (y2 | ~z2);
  }
  const BUF = new Uint32Array(16);
  class RIPEMD160 extends SHA2 {
    constructor() {
      super(64, 20, 8, true);
      this.h0 = 1732584193 | 0;
      this.h1 = 4023233417 | 0;
      this.h2 = 2562383102 | 0;
      this.h3 = 271733878 | 0;
      this.h4 = 3285377520 | 0;
    }
    get() {
      const { h0, h1, h2, h3, h4 } = this;
      return [h0, h1, h2, h3, h4];
    }
    set(h0, h1, h2, h3, h4) {
      this.h0 = h0 | 0;
      this.h1 = h1 | 0;
      this.h2 = h2 | 0;
      this.h3 = h3 | 0;
      this.h4 = h4 | 0;
    }
    process(view, offset) {
      for (let i2 = 0; i2 < 16; i2++, offset += 4)
        BUF[i2] = view.getUint32(offset, true);
      let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;
      for (let group = 0; group < 5; group++) {
        const rGroup = 4 - group;
        const hbl = Kl[group], hbr = Kr[group];
        const rl = idxL[group], rr = idxR[group];
        const sl = shiftsL[group], sr = shiftsR[group];
        for (let i2 = 0; i2 < 16; i2++) {
          const tl = rotl$1(al + f(group, bl, cl, dl) + BUF[rl[i2]] + hbl, sl[i2]) + el | 0;
          al = el, el = dl, dl = rotl$1(cl, 10) | 0, cl = bl, bl = tl;
        }
        for (let i2 = 0; i2 < 16; i2++) {
          const tr = rotl$1(ar + f(rGroup, br, cr, dr) + BUF[rr[i2]] + hbr, sr[i2]) + er | 0;
          ar = er, er = dr, dr = rotl$1(cr, 10) | 0, cr = br, br = tr;
        }
      }
      this.set(this.h1 + cl + dr | 0, this.h2 + dl + er | 0, this.h3 + el + ar | 0, this.h4 + al + br | 0, this.h0 + bl + cr | 0);
    }
    roundClean() {
      BUF.fill(0);
    }
    destroy() {
      this.destroyed = true;
      this.buffer.fill(0);
      this.set(0, 0, 0, 0, 0);
    }
  }
  const ripemd160$2 = wrapConstructor(() => new RIPEMD160());
  let locked$2 = false;
  const _ripemd160 = function(data) {
    return ripemd160$2(data);
  };
  let __ripemd160 = _ripemd160;
  function ripemd160$1(_data5) {
    const data = getBytes(_data5, "data");
    return hexlify(__ripemd160(data));
  }
  ripemd160$1._ = _ripemd160;
  ripemd160$1.lock = function() {
    locked$2 = true;
  };
  ripemd160$1.register = function(func) {
    if (locked$2) {
      throw new TypeError("ripemd160 is locked");
    }
    __ripemd160 = func;
  };
  Object.freeze(ripemd160$1);
  let locked$1 = false;
  const _pbkdf2 = function(password, salt, iterations, keylen, algo) {
    return pbkdf2Sync(password, salt, iterations, keylen, algo);
  };
  let __pbkdf2 = _pbkdf2;
  function pbkdf2$1(_password, _salt, iterations, keylen, algo) {
    const password = getBytes(_password, "password");
    const salt = getBytes(_salt, "salt");
    return hexlify(__pbkdf2(password, salt, iterations, keylen, algo));
  }
  pbkdf2$1._ = _pbkdf2;
  pbkdf2$1.lock = function() {
    locked$1 = true;
  };
  pbkdf2$1.register = function(func) {
    if (locked$1) {
      throw new Error("pbkdf2 is locked");
    }
    __pbkdf2 = func;
  };
  Object.freeze(pbkdf2$1);
  let locked = false;
  const _randomBytes = function(length) {
    return new Uint8Array(randomBytes$1(length));
  };
  let __randomBytes = _randomBytes;
  function randomBytes(length) {
    return __randomBytes(length);
  }
  randomBytes._ = _randomBytes;
  randomBytes.lock = function() {
    locked = true;
  };
  randomBytes.register = function(func) {
    if (locked) {
      throw new Error("randomBytes is locked");
    }
    __randomBytes = func;
  };
  Object.freeze(randomBytes);
  const rotl = (a2, b2) => a2 << b2 | a2 >>> 32 - b2;
  function XorAndSalsa(prev, pi, input, ii, out, oi) {
    let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];
    let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];
    let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];
    let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];
    let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];
    let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];
    let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];
    let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];
    let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
    for (let i2 = 0; i2 < 8; i2 += 2) {
      x04 ^= rotl(x00 + x12 | 0, 7);
      x08 ^= rotl(x04 + x00 | 0, 9);
      x12 ^= rotl(x08 + x04 | 0, 13);
      x00 ^= rotl(x12 + x08 | 0, 18);
      x09 ^= rotl(x05 + x01 | 0, 7);
      x13 ^= rotl(x09 + x05 | 0, 9);
      x01 ^= rotl(x13 + x09 | 0, 13);
      x05 ^= rotl(x01 + x13 | 0, 18);
      x14 ^= rotl(x10 + x06 | 0, 7);
      x02 ^= rotl(x14 + x10 | 0, 9);
      x06 ^= rotl(x02 + x14 | 0, 13);
      x10 ^= rotl(x06 + x02 | 0, 18);
      x03 ^= rotl(x15 + x11 | 0, 7);
      x07 ^= rotl(x03 + x15 | 0, 9);
      x11 ^= rotl(x07 + x03 | 0, 13);
      x15 ^= rotl(x11 + x07 | 0, 18);
      x01 ^= rotl(x00 + x03 | 0, 7);
      x02 ^= rotl(x01 + x00 | 0, 9);
      x03 ^= rotl(x02 + x01 | 0, 13);
      x00 ^= rotl(x03 + x02 | 0, 18);
      x06 ^= rotl(x05 + x04 | 0, 7);
      x07 ^= rotl(x06 + x05 | 0, 9);
      x04 ^= rotl(x07 + x06 | 0, 13);
      x05 ^= rotl(x04 + x07 | 0, 18);
      x11 ^= rotl(x10 + x09 | 0, 7);
      x08 ^= rotl(x11 + x10 | 0, 9);
      x09 ^= rotl(x08 + x11 | 0, 13);
      x10 ^= rotl(x09 + x08 | 0, 18);
      x12 ^= rotl(x15 + x14 | 0, 7);
      x13 ^= rotl(x12 + x15 | 0, 9);
      x14 ^= rotl(x13 + x12 | 0, 13);
      x15 ^= rotl(x14 + x13 | 0, 18);
    }
    out[oi++] = y00 + x00 | 0;
    out[oi++] = y01 + x01 | 0;
    out[oi++] = y02 + x02 | 0;
    out[oi++] = y03 + x03 | 0;
    out[oi++] = y04 + x04 | 0;
    out[oi++] = y05 + x05 | 0;
    out[oi++] = y06 + x06 | 0;
    out[oi++] = y07 + x07 | 0;
    out[oi++] = y08 + x08 | 0;
    out[oi++] = y09 + x09 | 0;
    out[oi++] = y10 + x10 | 0;
    out[oi++] = y11 + x11 | 0;
    out[oi++] = y12 + x12 | 0;
    out[oi++] = y13 + x13 | 0;
    out[oi++] = y14 + x14 | 0;
    out[oi++] = y15 + x15 | 0;
  }
  function BlockMix(input, ii, out, oi, r2) {
    let head = oi + 0;
    let tail = oi + 16 * r2;
    for (let i2 = 0; i2 < 16; i2++)
      out[tail + i2] = input[ii + (2 * r2 - 1) * 16 + i2];
    for (let i2 = 0; i2 < r2; i2++, head += 16, ii += 16) {
      XorAndSalsa(out, tail, input, ii, out, head);
      if (i2 > 0)
        tail += 16;
      XorAndSalsa(out, head, input, ii += 16, out, tail);
    }
  }
  function scryptInit(password, salt, _opts) {
    const opts = checkOpts({
      dkLen: 32,
      asyncTick: 10,
      maxmem: 1024 ** 3 + 1024
    }, _opts);
    const { N: N2, r: r2, p: p2, dkLen, asyncTick, maxmem, onProgress } = opts;
    assert.number(N2);
    assert.number(r2);
    assert.number(p2);
    assert.number(dkLen);
    assert.number(asyncTick);
    assert.number(maxmem);
    if (onProgress !== void 0 && typeof onProgress !== "function")
      throw new Error("progressCb should be function");
    const blockSize = 128 * r2;
    const blockSize32 = blockSize / 4;
    if (N2 <= 1 || (N2 & N2 - 1) !== 0 || N2 >= 2 ** (blockSize / 8) || N2 > 2 ** 32) {
      throw new Error("Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32");
    }
    if (p2 < 0 || p2 > (2 ** 32 - 1) * 32 / blockSize) {
      throw new Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");
    }
    if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {
      throw new Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");
    }
    const memUsed = blockSize * (N2 + p2);
    if (memUsed > maxmem) {
      throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);
    }
    const B2 = pbkdf2$2(sha256$2, password, salt, { c: 1, dkLen: blockSize * p2 });
    const B32 = u32(B2);
    const V2 = u32(new Uint8Array(blockSize * N2));
    const tmp = u32(new Uint8Array(blockSize));
    let blockMixCb = () => {
    };
    if (onProgress) {
      const totalBlockMix = 2 * N2 * p2;
      const callbackPer = Math.max(Math.floor(totalBlockMix / 1e4), 1);
      let blockMixCnt = 0;
      blockMixCb = () => {
        blockMixCnt++;
        if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))
          onProgress(blockMixCnt / totalBlockMix);
      };
    }
    return { N: N2, r: r2, p: p2, dkLen, blockSize32, V: V2, B32, B: B2, tmp, blockMixCb, asyncTick };
  }
  function scryptOutput(password, dkLen, B2, V2, tmp) {
    const res = pbkdf2$2(sha256$2, password, B2, { c: 1, dkLen });
    B2.fill(0);
    V2.fill(0);
    tmp.fill(0);
    return res;
  }
  function scrypt$1(password, salt, opts) {
    const { N: N2, r: r2, p: p2, dkLen, blockSize32, V: V2, B32, B: B2, tmp, blockMixCb } = scryptInit(password, salt, opts);
    for (let pi = 0; pi < p2; pi++) {
      const Pi2 = blockSize32 * pi;
      for (let i2 = 0; i2 < blockSize32; i2++)
        V2[i2] = B32[Pi2 + i2];
      for (let i2 = 0, pos = 0; i2 < N2 - 1; i2++) {
        BlockMix(V2, pos, V2, pos += blockSize32, r2);
        blockMixCb();
      }
      BlockMix(V2, (N2 - 1) * blockSize32, B32, Pi2, r2);
      blockMixCb();
      for (let i2 = 0; i2 < N2; i2++) {
        const j2 = B32[Pi2 + blockSize32 - 16] % N2;
        for (let k2 = 0; k2 < blockSize32; k2++)
          tmp[k2] = B32[Pi2 + k2] ^ V2[j2 * blockSize32 + k2];
        BlockMix(tmp, 0, B32, Pi2, r2);
        blockMixCb();
      }
    }
    return scryptOutput(password, dkLen, B2, V2, tmp);
  }
  async function scryptAsync(password, salt, opts) {
    const { N: N2, r: r2, p: p2, dkLen, blockSize32, V: V2, B32, B: B2, tmp, blockMixCb, asyncTick } = scryptInit(password, salt, opts);
    for (let pi = 0; pi < p2; pi++) {
      const Pi2 = blockSize32 * pi;
      for (let i2 = 0; i2 < blockSize32; i2++)
        V2[i2] = B32[Pi2 + i2];
      let pos = 0;
      await asyncLoop(N2 - 1, asyncTick, (i2) => {
        BlockMix(V2, pos, V2, pos += blockSize32, r2);
        blockMixCb();
      });
      BlockMix(V2, (N2 - 1) * blockSize32, B32, Pi2, r2);
      blockMixCb();
      await asyncLoop(N2, asyncTick, (i2) => {
        const j2 = B32[Pi2 + blockSize32 - 16] % N2;
        for (let k2 = 0; k2 < blockSize32; k2++)
          tmp[k2] = B32[Pi2 + k2] ^ V2[j2 * blockSize32 + k2];
        BlockMix(tmp, 0, B32, Pi2, r2);
        blockMixCb();
      });
    }
    return scryptOutput(password, dkLen, B2, V2, tmp);
  }
  let lockedSync = false, lockedAsync = false;
  const _scryptAsync = async function(passwd, salt, N2, r2, p2, dkLen, onProgress) {
    return await scryptAsync(passwd, salt, { N: N2, r: r2, p: p2, dkLen, onProgress });
  };
  const _scryptSync = function(passwd, salt, N2, r2, p2, dkLen) {
    return scrypt$1(passwd, salt, { N: N2, r: r2, p: p2, dkLen });
  };
  let __scryptAsync = _scryptAsync;
  let __scryptSync = _scryptSync;
  async function scrypt(_passwd, _salt, N2, r2, p2, dkLen, progress) {
    const passwd = getBytes(_passwd, "passwd");
    const salt = getBytes(_salt, "salt");
    return hexlify(await __scryptAsync(passwd, salt, N2, r2, p2, dkLen, progress));
  }
  scrypt._ = _scryptAsync;
  scrypt.lock = function() {
    lockedAsync = true;
  };
  scrypt.register = function(func) {
    if (lockedAsync) {
      throw new Error("scrypt is locked");
    }
    __scryptAsync = func;
  };
  Object.freeze(scrypt);
  function scryptSync(_passwd, _salt, N2, r2, p2, dkLen) {
    const passwd = getBytes(_passwd, "passwd");
    const salt = getBytes(_salt, "salt");
    return hexlify(__scryptSync(passwd, salt, N2, r2, p2, dkLen));
  }
  scryptSync._ = _scryptSync;
  scryptSync.lock = function() {
    lockedSync = true;
  };
  scryptSync.register = function(func) {
    if (lockedSync) {
      throw new Error("scryptSync is locked");
    }
    __scryptSync = func;
  };
  Object.freeze(scryptSync);
  const _sha256 = function(data) {
    return createHash("sha256").update(data).digest();
  };
  let __sha256 = _sha256;
  let locked256 = false;
  function sha256$1(_data5) {
    const data = getBytes(_data5, "data");
    return hexlify(__sha256(data));
  }
  sha256$1._ = _sha256;
  sha256$1.lock = function() {
    locked256 = true;
  };
  sha256$1.register = function(func) {
    if (locked256) {
      throw new Error("sha256 is locked");
    }
    __sha256 = func;
  };
  Object.freeze(sha256$1);
  Object.freeze(sha256$1);
  const __viteBrowserExternal = new Proxy({}, {
    get(_2, key) {
      throw new Error(`Module "" has been externalized for browser compatibility. Cannot access ".${key}" in client code.`);
    }
  });
  const __viteBrowserExternal$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    default: __viteBrowserExternal
  }, Symbol.toStringTag, { value: "Module" }));
  /*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */
  const _0n = BigInt(0);
  const _1n = BigInt(1);
  const _2n = BigInt(2);
  const _3n = BigInt(3);
  const _8n = BigInt(8);
  const CURVE = Object.freeze({
    a: _0n,
    b: BigInt(7),
    P: BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),
    n: BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),
    h: _1n,
    Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
    Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee")
  });
  const divNearest = (a2, b2) => (a2 + b2 / _2n) / b2;
  const endo = {
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar(k2) {
      const { n: n2 } = CURVE;
      const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
      const b1 = -_1n * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
      const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
      const b2 = a1;
      const POW_2_128 = BigInt("0x100000000000000000000000000000000");
      const c1 = divNearest(b2 * k2, n2);
      const c2 = divNearest(-b1 * k2, n2);
      let k1 = mod(k2 - c1 * a1 - c2 * a2, n2);
      let k22 = mod(-c1 * b1 - c2 * b2, n2);
      const k1neg = k1 > POW_2_128;
      const k2neg = k22 > POW_2_128;
      if (k1neg)
        k1 = n2 - k1;
      if (k2neg)
        k22 = n2 - k22;
      if (k1 > POW_2_128 || k22 > POW_2_128) {
        throw new Error("splitScalarEndo: Endomorphism failed, k=" + k2);
      }
      return { k1neg, k1, k2neg, k2: k22 };
    }
  };
  const fieldLen = 32;
  const groupLen = 32;
  const hashLen = 32;
  const compressedLen = fieldLen + 1;
  const uncompressedLen = 2 * fieldLen + 1;
  function weierstrass(x2) {
    const { a: a2, b: b2 } = CURVE;
    const x22 = mod(x2 * x2);
    const x3 = mod(x22 * x2);
    return mod(x3 + a2 * x2 + b2);
  }
  const USE_ENDOMORPHISM = CURVE.a === _0n;
  class ShaError extends Error {
    constructor(message) {
      super(message);
    }
  }
  function assertJacPoint(other) {
    if (!(other instanceof JacobianPoint))
      throw new TypeError("JacobianPoint expected");
  }
  class JacobianPoint {
    constructor(x2, y2, z2) {
      this.x = x2;
      this.y = y2;
      this.z = z2;
    }
    static fromAffine(p2) {
      if (!(p2 instanceof Point)) {
        throw new TypeError("JacobianPoint#fromAffine: expected Point");
      }
      if (p2.equals(Point.ZERO))
        return JacobianPoint.ZERO;
      return new JacobianPoint(p2.x, p2.y, _1n);
    }
    static toAffineBatch(points) {
      const toInv = invertBatch(points.map((p2) => p2.z));
      return points.map((p2, i2) => p2.toAffine(toInv[i2]));
    }
    static normalizeZ(points) {
      return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);
    }
    equals(other) {
      assertJacPoint(other);
      const { x: X1, y: Y1, z: Z1 } = this;
      const { x: X2, y: Y2, z: Z2 } = other;
      const Z1Z1 = mod(Z1 * Z1);
      const Z2Z2 = mod(Z2 * Z2);
      const U12 = mod(X1 * Z2Z2);
      const U22 = mod(X2 * Z1Z1);
      const S1 = mod(mod(Y1 * Z2) * Z2Z2);
      const S2 = mod(mod(Y2 * Z1) * Z1Z1);
      return U12 === U22 && S1 === S2;
    }
    negate() {
      return new JacobianPoint(this.x, mod(-this.y), this.z);
    }
    double() {
      const { x: X1, y: Y1, z: Z1 } = this;
      const A2 = mod(X1 * X1);
      const B2 = mod(Y1 * Y1);
      const C2 = mod(B2 * B2);
      const x1b = X1 + B2;
      const D2 = mod(_2n * (mod(x1b * x1b) - A2 - C2));
      const E2 = mod(_3n * A2);
      const F2 = mod(E2 * E2);
      const X3 = mod(F2 - _2n * D2);
      const Y3 = mod(E2 * (D2 - X3) - _8n * C2);
      const Z3 = mod(_2n * Y1 * Z1);
      return new JacobianPoint(X3, Y3, Z3);
    }
    add(other) {
      assertJacPoint(other);
      const { x: X1, y: Y1, z: Z1 } = this;
      const { x: X2, y: Y2, z: Z2 } = other;
      if (X2 === _0n || Y2 === _0n)
        return this;
      if (X1 === _0n || Y1 === _0n)
        return other;
      const Z1Z1 = mod(Z1 * Z1);
      const Z2Z2 = mod(Z2 * Z2);
      const U12 = mod(X1 * Z2Z2);
      const U22 = mod(X2 * Z1Z1);
      const S1 = mod(mod(Y1 * Z2) * Z2Z2);
      const S2 = mod(mod(Y2 * Z1) * Z1Z1);
      const H2 = mod(U22 - U12);
      const r2 = mod(S2 - S1);
      if (H2 === _0n) {
        if (r2 === _0n) {
          return this.double();
        } else {
          return JacobianPoint.ZERO;
        }
      }
      const HH = mod(H2 * H2);
      const HHH = mod(H2 * HH);
      const V2 = mod(U12 * HH);
      const X3 = mod(r2 * r2 - HHH - _2n * V2);
      const Y3 = mod(r2 * (V2 - X3) - S1 * HHH);
      const Z3 = mod(Z1 * Z2 * H2);
      return new JacobianPoint(X3, Y3, Z3);
    }
    subtract(other) {
      return this.add(other.negate());
    }
    multiplyUnsafe(scalar) {
      const P0 = JacobianPoint.ZERO;
      if (typeof scalar === "bigint" && scalar === _0n)
        return P0;
      let n2 = normalizeScalar(scalar);
      if (n2 === _1n)
        return this;
      if (!USE_ENDOMORPHISM) {
        let p2 = P0;
        let d3 = this;
        while (n2 > _0n) {
          if (n2 & _1n)
            p2 = p2.add(d3);
          d3 = d3.double();
          n2 >>= _1n;
        }
        return p2;
      }
      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n2);
      let k1p = P0;
      let k2p = P0;
      let d2 = this;
      while (k1 > _0n || k2 > _0n) {
        if (k1 & _1n)
          k1p = k1p.add(d2);
        if (k2 & _1n)
          k2p = k2p.add(d2);
        d2 = d2.double();
        k1 >>= _1n;
        k2 >>= _1n;
      }
      if (k1neg)
        k1p = k1p.negate();
      if (k2neg)
        k2p = k2p.negate();
      k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);
      return k1p.add(k2p);
    }
    precomputeWindow(W2) {
      const windows = USE_ENDOMORPHISM ? 128 / W2 + 1 : 256 / W2 + 1;
      const points = [];
      let p2 = this;
      let base = p2;
      for (let window2 = 0; window2 < windows; window2++) {
        base = p2;
        points.push(base);
        for (let i2 = 1; i2 < 2 ** (W2 - 1); i2++) {
          base = base.add(p2);
          points.push(base);
        }
        p2 = base.double();
      }
      return points;
    }
    wNAF(n2, affinePoint) {
      if (!affinePoint && this.equals(JacobianPoint.BASE))
        affinePoint = Point.BASE;
      const W2 = affinePoint && affinePoint._WINDOW_SIZE || 1;
      if (256 % W2) {
        throw new Error("Point#wNAF: Invalid precomputation window, must be power of 2");
      }
      let precomputes = affinePoint && pointPrecomputes.get(affinePoint);
      if (!precomputes) {
        precomputes = this.precomputeWindow(W2);
        if (affinePoint && W2 !== 1) {
          precomputes = JacobianPoint.normalizeZ(precomputes);
          pointPrecomputes.set(affinePoint, precomputes);
        }
      }
      let p2 = JacobianPoint.ZERO;
      let f2 = JacobianPoint.BASE;
      const windows = 1 + (USE_ENDOMORPHISM ? 128 / W2 : 256 / W2);
      const windowSize = 2 ** (W2 - 1);
      const mask2 = BigInt(2 ** W2 - 1);
      const maxNumber = 2 ** W2;
      const shiftBy = BigInt(W2);
      for (let window2 = 0; window2 < windows; window2++) {
        const offset = window2 * windowSize;
        let wbits = Number(n2 & mask2);
        n2 >>= shiftBy;
        if (wbits > windowSize) {
          wbits -= maxNumber;
          n2 += _1n;
        }
        const offset1 = offset;
        const offset2 = offset + Math.abs(wbits) - 1;
        const cond1 = window2 % 2 !== 0;
        const cond2 = wbits < 0;
        if (wbits === 0) {
          f2 = f2.add(constTimeNegate(cond1, precomputes[offset1]));
        } else {
          p2 = p2.add(constTimeNegate(cond2, precomputes[offset2]));
        }
      }
      return { p: p2, f: f2 };
    }
    multiply(scalar, affinePoint) {
      let n2 = normalizeScalar(scalar);
      let point;
      let fake;
      if (USE_ENDOMORPHISM) {
        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n2);
        let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);
        let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);
        k1p = constTimeNegate(k1neg, k1p);
        k2p = constTimeNegate(k2neg, k2p);
        k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);
        point = k1p.add(k2p);
        fake = f1p.add(f2p);
      } else {
        const { p: p2, f: f2 } = this.wNAF(n2, affinePoint);
        point = p2;
        fake = f2;
      }
      return JacobianPoint.normalizeZ([point, fake])[0];
    }
    toAffine(invZ) {
      const { x: x2, y: y2, z: z2 } = this;
      const is0 = this.equals(JacobianPoint.ZERO);
      if (invZ == null)
        invZ = is0 ? _8n : invert(z2);
      const iz1 = invZ;
      const iz2 = mod(iz1 * iz1);
      const iz3 = mod(iz2 * iz1);
      const ax = mod(x2 * iz2);
      const ay = mod(y2 * iz3);
      const zz = mod(z2 * iz1);
      if (is0)
        return Point.ZERO;
      if (zz !== _1n)
        throw new Error("invZ was invalid");
      return new Point(ax, ay);
    }
  }
  JacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);
  JacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);
  function constTimeNegate(condition, item) {
    const neg = item.negate();
    return condition ? neg : item;
  }
  const pointPrecomputes = /* @__PURE__ */ new WeakMap();
  class Point {
    constructor(x2, y2) {
      this.x = x2;
      this.y = y2;
    }
    _setWindowSize(windowSize) {
      this._WINDOW_SIZE = windowSize;
      pointPrecomputes.delete(this);
    }
    hasEvenY() {
      return this.y % _2n === _0n;
    }
    static fromCompressedHex(bytes2) {
      const isShort = bytes2.length === 32;
      const x2 = bytesToNumber(isShort ? bytes2 : bytes2.subarray(1));
      if (!isValidFieldElement(x2))
        throw new Error("Point is not on curve");
      const y2 = weierstrass(x2);
      let y3 = sqrtMod(y2);
      const isYOdd = (y3 & _1n) === _1n;
      if (isShort) {
        if (isYOdd)
          y3 = mod(-y3);
      } else {
        const isFirstByteOdd = (bytes2[0] & 1) === 1;
        if (isFirstByteOdd !== isYOdd)
          y3 = mod(-y3);
      }
      const point = new Point(x2, y3);
      point.assertValidity();
      return point;
    }
    static fromUncompressedHex(bytes2) {
      const x2 = bytesToNumber(bytes2.subarray(1, fieldLen + 1));
      const y2 = bytesToNumber(bytes2.subarray(fieldLen + 1, fieldLen * 2 + 1));
      const point = new Point(x2, y2);
      point.assertValidity();
      return point;
    }
    static fromHex(hex) {
      const bytes2 = ensureBytes(hex);
      const len = bytes2.length;
      const header = bytes2[0];
      if (len === fieldLen)
        return this.fromCompressedHex(bytes2);
      if (len === compressedLen && (header === 2 || header === 3)) {
        return this.fromCompressedHex(bytes2);
      }
      if (len === uncompressedLen && header === 4)
        return this.fromUncompressedHex(bytes2);
      throw new Error(`Point.fromHex: received invalid point. Expected 32-${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes, not ${len}`);
    }
    static fromPrivateKey(privateKey) {
      return Point.BASE.multiply(normalizePrivateKey(privateKey));
    }
    static fromSignature(msgHash, signature, recovery) {
      const { r: r2, s: s2 } = normalizeSignature(signature);
      if (![0, 1, 2, 3].includes(recovery))
        throw new Error("Cannot recover: invalid recovery bit");
      const h2 = truncateHash(ensureBytes(msgHash));
      const { n: n2 } = CURVE;
      const radj = recovery === 2 || recovery === 3 ? r2 + n2 : r2;
      const rinv = invert(radj, n2);
      const u1 = mod(-h2 * rinv, n2);
      const u2 = mod(s2 * rinv, n2);
      const prefix = recovery & 1 ? "03" : "02";
      const R2 = Point.fromHex(prefix + numTo32bStr(radj));
      const Q2 = Point.BASE.multiplyAndAddUnsafe(R2, u1, u2);
      if (!Q2)
        throw new Error("Cannot recover signature: point at infinify");
      Q2.assertValidity();
      return Q2;
    }
    toRawBytes(isCompressed = false) {
      return hexToBytes(this.toHex(isCompressed));
    }
    toHex(isCompressed = false) {
      const x2 = numTo32bStr(this.x);
      if (isCompressed) {
        const prefix = this.hasEvenY() ? "02" : "03";
        return `${prefix}${x2}`;
      } else {
        return `04${x2}${numTo32bStr(this.y)}`;
      }
    }
    toHexX() {
      return this.toHex(true).slice(2);
    }
    toRawX() {
      return this.toRawBytes(true).slice(1);
    }
    assertValidity() {
      const msg = "Point is not on elliptic curve";
      const { x: x2, y: y2 } = this;
      if (!isValidFieldElement(x2) || !isValidFieldElement(y2))
        throw new Error(msg);
      const left = mod(y2 * y2);
      const right = weierstrass(x2);
      if (mod(left - right) !== _0n)
        throw new Error(msg);
    }
    equals(other) {
      return this.x === other.x && this.y === other.y;
    }
    negate() {
      return new Point(this.x, mod(-this.y));
    }
    double() {
      return JacobianPoint.fromAffine(this).double().toAffine();
    }
    add(other) {
      return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();
    }
    subtract(other) {
      return this.add(other.negate());
    }
    multiply(scalar) {
      return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();
    }
    multiplyAndAddUnsafe(Q2, a2, b2) {
      const P2 = JacobianPoint.fromAffine(this);
      const aP = a2 === _0n || a2 === _1n || this !== Point.BASE ? P2.multiplyUnsafe(a2) : P2.multiply(a2);
      const bQ = JacobianPoint.fromAffine(Q2).multiplyUnsafe(b2);
      const sum = aP.add(bQ);
      return sum.equals(JacobianPoint.ZERO) ? void 0 : sum.toAffine();
    }
  }
  Point.BASE = new Point(CURVE.Gx, CURVE.Gy);
  Point.ZERO = new Point(_0n, _0n);
  function sliceDER(s2) {
    return Number.parseInt(s2[0], 16) >= 8 ? "00" + s2 : s2;
  }
  function parseDERInt(data) {
    if (data.length < 2 || data[0] !== 2) {
      throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);
    }
    const len = data[1];
    const res = data.subarray(2, len + 2);
    if (!len || res.length !== len) {
      throw new Error(`Invalid signature integer: wrong length`);
    }
    if (res[0] === 0 && res[1] <= 127) {
      throw new Error("Invalid signature integer: trailing length");
    }
    return { data: bytesToNumber(res), left: data.subarray(len + 2) };
  }
  function parseDERSignature(data) {
    if (data.length < 2 || data[0] != 48) {
      throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);
    }
    if (data[1] !== data.length - 2) {
      throw new Error("Invalid signature: incorrect length");
    }
    const { data: r2, left: sBytes } = parseDERInt(data.subarray(2));
    const { data: s2, left: rBytesLeft } = parseDERInt(sBytes);
    if (rBytesLeft.length) {
      throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);
    }
    return { r: r2, s: s2 };
  }
  class Signature$1 {
    constructor(r2, s2) {
      this.r = r2;
      this.s = s2;
      this.assertValidity();
    }
    static fromCompact(hex) {
      const arr = hex instanceof Uint8Array;
      const name = "Signature.fromCompact";
      if (typeof hex !== "string" && !arr)
        throw new TypeError(`${name}: Expected string or Uint8Array`);
      const str = arr ? bytesToHex(hex) : hex;
      if (str.length !== 128)
        throw new Error(`${name}: Expected 64-byte hex`);
      return new Signature$1(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));
    }
    static fromDER(hex) {
      const arr = hex instanceof Uint8Array;
      if (typeof hex !== "string" && !arr)
        throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);
      const { r: r2, s: s2 } = parseDERSignature(arr ? hex : hexToBytes(hex));
      return new Signature$1(r2, s2);
    }
    static fromHex(hex) {
      return this.fromDER(hex);
    }
    assertValidity() {
      const { r: r2, s: s2 } = this;
      if (!isWithinCurveOrder(r2))
        throw new Error("Invalid Signature: r must be 0 < r < n");
      if (!isWithinCurveOrder(s2))
        throw new Error("Invalid Signature: s must be 0 < s < n");
    }
    hasHighS() {
      const HALF = CURVE.n >> _1n;
      return this.s > HALF;
    }
    normalizeS() {
      return this.hasHighS() ? new Signature$1(this.r, mod(-this.s, CURVE.n)) : this;
    }
    toDERRawBytes() {
      return hexToBytes(this.toDERHex());
    }
    toDERHex() {
      const sHex = sliceDER(numberToHexUnpadded(this.s));
      const rHex = sliceDER(numberToHexUnpadded(this.r));
      const sHexL = sHex.length / 2;
      const rHexL = rHex.length / 2;
      const sLen = numberToHexUnpadded(sHexL);
      const rLen = numberToHexUnpadded(rHexL);
      const length = numberToHexUnpadded(rHexL + sHexL + 4);
      return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;
    }
    toRawBytes() {
      return this.toDERRawBytes();
    }
    toHex() {
      return this.toDERHex();
    }
    toCompactRawBytes() {
      return hexToBytes(this.toCompactHex());
    }
    toCompactHex() {
      return numTo32bStr(this.r) + numTo32bStr(this.s);
    }
  }
  function concatBytes(...arrays) {
    if (!arrays.every((b2) => b2 instanceof Uint8Array))
      throw new Error("Uint8Array list expected");
    if (arrays.length === 1)
      return arrays[0];
    const length = arrays.reduce((a2, arr) => a2 + arr.length, 0);
    const result = new Uint8Array(length);
    for (let i2 = 0, pad = 0; i2 < arrays.length; i2++) {
      const arr = arrays[i2];
      result.set(arr, pad);
      pad += arr.length;
    }
    return result;
  }
  const hexes = Array.from({ length: 256 }, (v2, i2) => i2.toString(16).padStart(2, "0"));
  function bytesToHex(uint8a) {
    if (!(uint8a instanceof Uint8Array))
      throw new Error("Expected Uint8Array");
    let hex = "";
    for (let i2 = 0; i2 < uint8a.length; i2++) {
      hex += hexes[uint8a[i2]];
    }
    return hex;
  }
  const POW_2_256 = BigInt("0x10000000000000000000000000000000000000000000000000000000000000000");
  function numTo32bStr(num) {
    if (typeof num !== "bigint")
      throw new Error("Expected bigint");
    if (!(_0n <= num && num < POW_2_256))
      throw new Error("Expected number 0 <= n < 2^256");
    return num.toString(16).padStart(64, "0");
  }
  function numTo32b(num) {
    const b2 = hexToBytes(numTo32bStr(num));
    if (b2.length !== 32)
      throw new Error("Error: expected 32 bytes");
    return b2;
  }
  function numberToHexUnpadded(num) {
    const hex = num.toString(16);
    return hex.length & 1 ? `0${hex}` : hex;
  }
  function hexToNumber(hex) {
    if (typeof hex !== "string") {
      throw new TypeError("hexToNumber: expected string, got " + typeof hex);
    }
    return BigInt(`0x${hex}`);
  }
  function hexToBytes(hex) {
    if (typeof hex !== "string") {
      throw new TypeError("hexToBytes: expected string, got " + typeof hex);
    }
    if (hex.length % 2)
      throw new Error("hexToBytes: received invalid unpadded hex" + hex.length);
    const array = new Uint8Array(hex.length / 2);
    for (let i2 = 0; i2 < array.length; i2++) {
      const j2 = i2 * 2;
      const hexByte = hex.slice(j2, j2 + 2);
      const byte = Number.parseInt(hexByte, 16);
      if (Number.isNaN(byte) || byte < 0)
        throw new Error("Invalid byte sequence");
      array[i2] = byte;
    }
    return array;
  }
  function bytesToNumber(bytes2) {
    return hexToNumber(bytesToHex(bytes2));
  }
  function ensureBytes(hex) {
    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);
  }
  function normalizeScalar(num) {
    if (typeof num === "number" && Number.isSafeInteger(num) && num > 0)
      return BigInt(num);
    if (typeof num === "bigint" && isWithinCurveOrder(num))
      return num;
    throw new TypeError("Expected valid private scalar: 0 < scalar < curve.n");
  }
  function mod(a2, b2 = CURVE.P) {
    const result = a2 % b2;
    return result >= _0n ? result : b2 + result;
  }
  function pow2(x2, power) {
    const { P: P2 } = CURVE;
    let res = x2;
    while (power-- > _0n) {
      res *= res;
      res %= P2;
    }
    return res;
  }
  function sqrtMod(x2) {
    const { P: P2 } = CURVE;
    const _6n = BigInt(6);
    const _11n = BigInt(11);
    const _22n = BigInt(22);
    const _23n = BigInt(23);
    const _44n = BigInt(44);
    const _88n = BigInt(88);
    const b2 = x2 * x2 * x2 % P2;
    const b3 = b2 * b2 * x2 % P2;
    const b6 = pow2(b3, _3n) * b3 % P2;
    const b9 = pow2(b6, _3n) * b3 % P2;
    const b11 = pow2(b9, _2n) * b2 % P2;
    const b22 = pow2(b11, _11n) * b11 % P2;
    const b44 = pow2(b22, _22n) * b22 % P2;
    const b88 = pow2(b44, _44n) * b44 % P2;
    const b176 = pow2(b88, _88n) * b88 % P2;
    const b220 = pow2(b176, _44n) * b44 % P2;
    const b223 = pow2(b220, _3n) * b3 % P2;
    const t1 = pow2(b223, _23n) * b22 % P2;
    const t2 = pow2(t1, _6n) * b2 % P2;
    const rt2 = pow2(t2, _2n);
    const xc = rt2 * rt2 % P2;
    if (xc !== x2)
      throw new Error("Cannot find square root");
    return rt2;
  }
  function invert(number2, modulo = CURVE.P) {
    if (number2 === _0n || modulo <= _0n) {
      throw new Error(`invert: expected positive integers, got n=${number2} mod=${modulo}`);
    }
    let a2 = mod(number2, modulo);
    let b2 = modulo;
    let x2 = _0n, u2 = _1n;
    while (a2 !== _0n) {
      const q2 = b2 / a2;
      const r2 = b2 % a2;
      const m2 = x2 - u2 * q2;
      b2 = a2, a2 = r2, x2 = u2, u2 = m2;
    }
    const gcd = b2;
    if (gcd !== _1n)
      throw new Error("invert: does not exist");
    return mod(x2, modulo);
  }
  function invertBatch(nums, p2 = CURVE.P) {
    const scratch = new Array(nums.length);
    const lastMultiplied = nums.reduce((acc, num, i2) => {
      if (num === _0n)
        return acc;
      scratch[i2] = acc;
      return mod(acc * num, p2);
    }, _1n);
    const inverted = invert(lastMultiplied, p2);
    nums.reduceRight((acc, num, i2) => {
      if (num === _0n)
        return acc;
      scratch[i2] = mod(acc * scratch[i2], p2);
      return mod(acc * num, p2);
    }, inverted);
    return scratch;
  }
  function bits2int_2(bytes2) {
    const delta = bytes2.length * 8 - groupLen * 8;
    const num = bytesToNumber(bytes2);
    return delta > 0 ? num >> BigInt(delta) : num;
  }
  function truncateHash(hash2, truncateOnly = false) {
    const h2 = bits2int_2(hash2);
    if (truncateOnly)
      return h2;
    const { n: n2 } = CURVE;
    return h2 >= n2 ? h2 - n2 : h2;
  }
  let _sha256Sync;
  let _hmacSha256Sync;
  class HmacDrbg {
    constructor(hashLen2, qByteLen) {
      this.hashLen = hashLen2;
      this.qByteLen = qByteLen;
      if (typeof hashLen2 !== "number" || hashLen2 < 2)
        throw new Error("hashLen must be a number");
      if (typeof qByteLen !== "number" || qByteLen < 2)
        throw new Error("qByteLen must be a number");
      this.v = new Uint8Array(hashLen2).fill(1);
      this.k = new Uint8Array(hashLen2).fill(0);
      this.counter = 0;
    }
    hmac(...values) {
      return utils.hmacSha256(this.k, ...values);
    }
    hmacSync(...values) {
      return _hmacSha256Sync(this.k, ...values);
    }
    checkSync() {
      if (typeof _hmacSha256Sync !== "function")
        throw new ShaError("hmacSha256Sync needs to be set");
    }
    incr() {
      if (this.counter >= 1e3)
        throw new Error("Tried 1,000 k values for sign(), all were invalid");
      this.counter += 1;
    }
    async reseed(seed = new Uint8Array()) {
      this.k = await this.hmac(this.v, Uint8Array.from([0]), seed);
      this.v = await this.hmac(this.v);
      if (seed.length === 0)
        return;
      this.k = await this.hmac(this.v, Uint8Array.from([1]), seed);
      this.v = await this.hmac(this.v);
    }
    reseedSync(seed = new Uint8Array()) {
      this.checkSync();
      this.k = this.hmacSync(this.v, Uint8Array.from([0]), seed);
      this.v = this.hmacSync(this.v);
      if (seed.length === 0)
        return;
      this.k = this.hmacSync(this.v, Uint8Array.from([1]), seed);
      this.v = this.hmacSync(this.v);
    }
    async generate() {
      this.incr();
      let len = 0;
      const out = [];
      while (len < this.qByteLen) {
        this.v = await this.hmac(this.v);
        const sl = this.v.slice();
        out.push(sl);
        len += this.v.length;
      }
      return concatBytes(...out);
    }
    generateSync() {
      this.checkSync();
      this.incr();
      let len = 0;
      const out = [];
      while (len < this.qByteLen) {
        this.v = this.hmacSync(this.v);
        const sl = this.v.slice();
        out.push(sl);
        len += this.v.length;
      }
      return concatBytes(...out);
    }
  }
  function isWithinCurveOrder(num) {
    return _0n < num && num < CURVE.n;
  }
  function isValidFieldElement(num) {
    return _0n < num && num < CURVE.P;
  }
  function kmdToSig(kBytes, m2, d2, lowS = true) {
    const { n: n2 } = CURVE;
    const k2 = truncateHash(kBytes, true);
    if (!isWithinCurveOrder(k2))
      return;
    const kinv = invert(k2, n2);
    const q2 = Point.BASE.multiply(k2);
    const r2 = mod(q2.x, n2);
    if (r2 === _0n)
      return;
    const s2 = mod(kinv * mod(m2 + d2 * r2, n2), n2);
    if (s2 === _0n)
      return;
    let sig = new Signature$1(r2, s2);
    let recovery = (q2.x === sig.r ? 0 : 2) | Number(q2.y & _1n);
    if (lowS && sig.hasHighS()) {
      sig = sig.normalizeS();
      recovery ^= 1;
    }
    return { sig, recovery };
  }
  function normalizePrivateKey(key) {
    let num;
    if (typeof key === "bigint") {
      num = key;
    } else if (typeof key === "number" && Number.isSafeInteger(key) && key > 0) {
      num = BigInt(key);
    } else if (typeof key === "string") {
      if (key.length !== 2 * groupLen)
        throw new Error("Expected 32 bytes of private key");
      num = hexToNumber(key);
    } else if (key instanceof Uint8Array) {
      if (key.length !== groupLen)
        throw new Error("Expected 32 bytes of private key");
      num = bytesToNumber(key);
    } else {
      throw new TypeError("Expected valid private key");
    }
    if (!isWithinCurveOrder(num))
      throw new Error("Expected private key: 0 < key < n");
    return num;
  }
  function normalizePublicKey(publicKey) {
    if (publicKey instanceof Point) {
      publicKey.assertValidity();
      return publicKey;
    } else {
      return Point.fromHex(publicKey);
    }
  }
  function normalizeSignature(signature) {
    if (signature instanceof Signature$1) {
      signature.assertValidity();
      return signature;
    }
    try {
      return Signature$1.fromDER(signature);
    } catch (error) {
      return Signature$1.fromCompact(signature);
    }
  }
  function getPublicKey(privateKey, isCompressed = false) {
    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
  }
  function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {
    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);
  }
  function isProbPub(item) {
    const arr = item instanceof Uint8Array;
    const str = typeof item === "string";
    const len = (arr || str) && item.length;
    if (arr)
      return len === compressedLen || len === uncompressedLen;
    if (str)
      return len === compressedLen * 2 || len === uncompressedLen * 2;
    if (item instanceof Point)
      return true;
    return false;
  }
  function getSharedSecret(privateA, publicB, isCompressed = false) {
    if (isProbPub(privateA))
      throw new TypeError("getSharedSecret: first arg must be private key");
    if (!isProbPub(publicB))
      throw new TypeError("getSharedSecret: second arg must be public key");
    const b2 = normalizePublicKey(publicB);
    b2.assertValidity();
    return b2.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);
  }
  function bits2int(bytes2) {
    const slice = bytes2.length > fieldLen ? bytes2.slice(0, fieldLen) : bytes2;
    return bytesToNumber(slice);
  }
  function bits2octets(bytes2) {
    const z1 = bits2int(bytes2);
    const z2 = mod(z1, CURVE.n);
    return int2octets(z2 < _0n ? z1 : z2);
  }
  function int2octets(num) {
    return numTo32b(num);
  }
  function initSigArgs(msgHash, privateKey, extraEntropy) {
    if (msgHash == null)
      throw new Error(`sign: expected valid message hash, not "${msgHash}"`);
    const h1 = ensureBytes(msgHash);
    const d2 = normalizePrivateKey(privateKey);
    const seedArgs = [int2octets(d2), bits2octets(h1)];
    if (extraEntropy != null) {
      if (extraEntropy === true)
        extraEntropy = utils.randomBytes(fieldLen);
      const e = ensureBytes(extraEntropy);
      if (e.length !== fieldLen)
        throw new Error(`sign: Expected ${fieldLen} bytes of extra data`);
      seedArgs.push(e);
    }
    const seed = concatBytes(...seedArgs);
    const m2 = bits2int(h1);
    return { seed, m: m2, d: d2 };
  }
  function finalizeSig(recSig, opts) {
    const { sig, recovery } = recSig;
    const { der, recovered } = Object.assign({ canonical: true, der: true }, opts);
    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();
    return recovered ? [hashed, recovery] : hashed;
  }
  function signSync(msgHash, privKey, opts = {}) {
    const { seed, m: m2, d: d2 } = initSigArgs(msgHash, privKey, opts.extraEntropy);
    const drbg = new HmacDrbg(hashLen, groupLen);
    drbg.reseedSync(seed);
    let sig;
    while (!(sig = kmdToSig(drbg.generateSync(), m2, d2, opts.canonical)))
      drbg.reseedSync();
    return finalizeSig(sig, opts);
  }
  Point.BASE._setWindowSize(8);
  const crypto = {
    node: __viteBrowserExternal$1,
    web: typeof self === "object" && "crypto" in self ? self.crypto : void 0
  };
  const TAGGED_HASH_PREFIXES = {};
  const utils = {
    bytesToHex,
    hexToBytes,
    concatBytes,
    mod,
    invert,
    isValidPrivateKey(privateKey) {
      try {
        normalizePrivateKey(privateKey);
        return true;
      } catch (error) {
        return false;
      }
    },
    _bigintTo32Bytes: numTo32b,
    _normalizePrivateKey: normalizePrivateKey,
    hashToPrivateKey: (hash2) => {
      hash2 = ensureBytes(hash2);
      const minLen = groupLen + 8;
      if (hash2.length < minLen || hash2.length > 1024) {
        throw new Error(`Expected valid bytes of private key as per FIPS 186`);
      }
      const num = mod(bytesToNumber(hash2), CURVE.n - _1n) + _1n;
      return numTo32b(num);
    },
    randomBytes: (bytesLength = 32) => {
      if (crypto.web) {
        return crypto.web.getRandomValues(new Uint8Array(bytesLength));
      } else if (crypto.node) {
        const { randomBytes: randomBytes2 } = crypto.node;
        return Uint8Array.from(randomBytes2(bytesLength));
      } else {
        throw new Error("The environment doesn't have randomBytes function");
      }
    },
    randomPrivateKey: () => utils.hashToPrivateKey(utils.randomBytes(groupLen + 8)),
    precompute(windowSize = 8, point = Point.BASE) {
      const cached = point === Point.BASE ? point : new Point(point.x, point.y);
      cached._setWindowSize(windowSize);
      cached.multiply(_3n);
      return cached;
    },
    sha256: async (...messages2) => {
      if (crypto.web) {
        const buffer2 = await crypto.web.subtle.digest("SHA-256", concatBytes(...messages2));
        return new Uint8Array(buffer2);
      } else if (crypto.node) {
        const { createHash: createHash2 } = crypto.node;
        const hash2 = createHash2("sha256");
        messages2.forEach((m2) => hash2.update(m2));
        return Uint8Array.from(hash2.digest());
      } else {
        throw new Error("The environment doesn't have sha256 function");
      }
    },
    hmacSha256: async (key, ...messages2) => {
      if (crypto.web) {
        const ckey = await crypto.web.subtle.importKey("raw", key, { name: "HMAC", hash: { name: "SHA-256" } }, false, ["sign"]);
        const message = concatBytes(...messages2);
        const buffer2 = await crypto.web.subtle.sign("HMAC", ckey, message);
        return new Uint8Array(buffer2);
      } else if (crypto.node) {
        const { createHmac: createHmac2 } = crypto.node;
        const hash2 = createHmac2("sha256", key);
        messages2.forEach((m2) => hash2.update(m2));
        return Uint8Array.from(hash2.digest());
      } else {
        throw new Error("The environment doesn't have hmac-sha256 function");
      }
    },
    sha256Sync: void 0,
    hmacSha256Sync: void 0,
    taggedHash: async (tag, ...messages2) => {
      let tagP = TAGGED_HASH_PREFIXES[tag];
      if (tagP === void 0) {
        const tagH = await utils.sha256(Uint8Array.from(tag, (c2) => c2.charCodeAt(0)));
        tagP = concatBytes(tagH, tagH);
        TAGGED_HASH_PREFIXES[tag] = tagP;
      }
      return utils.sha256(tagP, ...messages2);
    },
    taggedHashSync: (tag, ...messages2) => {
      if (typeof _sha256Sync !== "function")
        throw new ShaError("sha256Sync is undefined, you need to set it");
      let tagP = TAGGED_HASH_PREFIXES[tag];
      if (tagP === void 0) {
        const tagH = _sha256Sync(Uint8Array.from(tag, (c2) => c2.charCodeAt(0)));
        tagP = concatBytes(tagH, tagH);
        TAGGED_HASH_PREFIXES[tag] = tagP;
      }
      return _sha256Sync(tagP, ...messages2);
    },
    _JacobianPoint: JacobianPoint
  };
  Object.defineProperties(utils, {
    sha256Sync: {
      configurable: false,
      get() {
        return _sha256Sync;
      },
      set(val) {
        if (!_sha256Sync)
          _sha256Sync = val;
      }
    },
    hmacSha256Sync: {
      configurable: false,
      get() {
        return _hmacSha256Sync;
      },
      set(val) {
        if (!_hmacSha256Sync)
          _hmacSha256Sync = val;
      }
    }
  });
  const ZeroAddress = "0x0000000000000000000000000000000000000000";
  const ZeroHash = "0x0000000000000000000000000000000000000000000000000000000000000000";
  const MessagePrefix = "Ethereum Signed Message:\n";
  const BN_0$7 = BigInt(0);
  const BN_1$2 = BigInt(1);
  const BN_2$2 = BigInt(2);
  const BN_27$1 = BigInt(27);
  const BN_28$1 = BigInt(28);
  const BN_35$1 = BigInt(35);
  const _guard$3 = {};
  function toUint256(value) {
    return zeroPadValue(toBeArray(value), 32);
  }
  const _Signature = class {
    constructor(guard, r2, s2, v2) {
      __privateAdd(this, _r, void 0);
      __privateAdd(this, _s2, void 0);
      __privateAdd(this, _v, void 0);
      __privateAdd(this, _networkV, void 0);
      assertPrivate(guard, _guard$3, "Signature");
      __privateSet(this, _r, r2);
      __privateSet(this, _s2, s2);
      __privateSet(this, _v, v2);
      __privateSet(this, _networkV, null);
    }
    get r() {
      return __privateGet(this, _r);
    }
    set r(value) {
      assertArgument(dataLength(value) === 32, "invalid r", "value", value);
      __privateSet(this, _r, hexlify(value));
    }
    get s() {
      return __privateGet(this, _s2);
    }
    set s(_value2) {
      assertArgument(dataLength(_value2) === 32, "invalid r", "value", _value2);
      const value = hexlify(_value2);
      assertArgument(parseInt(value.substring(0, 3)) < 8, "non-canonical s", "value", value);
      __privateSet(this, _s2, value);
    }
    get v() {
      return __privateGet(this, _v);
    }
    set v(value) {
      const v2 = getNumber(value, "value");
      assertArgument(v2 === 27 || v2 === 28, "invalid v", "v", value);
      __privateSet(this, _v, v2);
    }
    get networkV() {
      return __privateGet(this, _networkV);
    }
    get legacyChainId() {
      const v2 = this.networkV;
      if (v2 == null) {
        return null;
      }
      return _Signature.getChainId(v2);
    }
    get yParity() {
      return this.v === 27 ? 0 : 1;
    }
    get yParityAndS() {
      const yParityAndS = getBytes(this.s);
      if (this.yParity) {
        yParityAndS[0] |= 128;
      }
      return hexlify(yParityAndS);
    }
    get compactSerialized() {
      return concat([this.r, this.yParityAndS]);
    }
    get serialized() {
      return concat([this.r, this.s, this.yParity ? "0x1c" : "0x1b"]);
    }
    [Symbol.for("nodejs.util.inspect.custom")]() {
      return `Signature { r: "${this.r}", s: "${this.s}", yParity: ${this.yParity}, networkV: ${this.networkV} }`;
    }
    clone() {
      const clone = new _Signature(_guard$3, this.r, this.s, this.v);
      if (this.networkV) {
        __privateSet(clone, _networkV, this.networkV);
      }
      return clone;
    }
    toJSON() {
      const networkV = this.networkV;
      return {
        _type: "signature",
        networkV: networkV != null ? networkV.toString() : null,
        r: this.r,
        s: this.s,
        v: this.v
      };
    }
    static getChainId(v2) {
      const bv = getBigInt(v2, "v");
      if (bv == BN_27$1 || bv == BN_28$1) {
        return BN_0$7;
      }
      assertArgument(bv >= BN_35$1, "invalid EIP-155 v", "v", v2);
      return (bv - BN_35$1) / BN_2$2;
    }
    static getChainIdV(chainId, v2) {
      return getBigInt(chainId) * BN_2$2 + BigInt(35 + v2 - 27);
    }
    static getNormalizedV(v2) {
      const bv = getBigInt(v2);
      if (bv === BN_0$7 || bv === BN_27$1) {
        return 27;
      }
      if (bv === BN_1$2 || bv === BN_28$1) {
        return 28;
      }
      assertArgument(bv >= BN_35$1, "invalid v", "v", v2);
      return bv & BN_1$2 ? 27 : 28;
    }
    static from(sig) {
      function assertError(check, message) {
        assertArgument(check, message, "signature", sig);
      }
      if (sig == null) {
        return new _Signature(_guard$3, ZeroHash, ZeroHash, 27);
      }
      if (typeof sig === "string") {
        const bytes2 = getBytes(sig, "signature");
        if (bytes2.length === 64) {
          const r3 = hexlify(bytes2.slice(0, 32));
          const s3 = bytes2.slice(32, 64);
          const v3 = s3[0] & 128 ? 28 : 27;
          s3[0] &= 127;
          return new _Signature(_guard$3, r3, hexlify(s3), v3);
        }
        if (bytes2.length === 65) {
          const r3 = hexlify(bytes2.slice(0, 32));
          const s3 = bytes2.slice(32, 64);
          assertError((s3[0] & 128) === 0, "non-canonical s");
          const v3 = _Signature.getNormalizedV(bytes2[64]);
          return new _Signature(_guard$3, r3, hexlify(s3), v3);
        }
        assertError(false, "invlaid raw signature length");
      }
      if (sig instanceof _Signature) {
        return sig.clone();
      }
      const _r2 = sig.r;
      assertError(_r2 != null, "missing r");
      const r2 = toUint256(_r2);
      const s2 = function(s3, yParityAndS) {
        if (s3 != null) {
          return toUint256(s3);
        }
        if (yParityAndS != null) {
          assertError(isHexString(yParityAndS, 32), "invalid yParityAndS");
          const bytes2 = getBytes(yParityAndS);
          bytes2[0] &= 127;
          return hexlify(bytes2);
        }
        assertError(false, "missing s");
      }(sig.s, sig.yParityAndS);
      assertError((getBytes(s2)[0] & 128) == 0, "non-canonical s");
      const { networkV, v: v2 } = function(_v2, yParityAndS, yParity) {
        if (_v2 != null) {
          const v3 = getBigInt(_v2);
          return {
            networkV: v3 >= BN_35$1 ? v3 : void 0,
            v: _Signature.getNormalizedV(v3)
          };
        }
        if (yParityAndS != null) {
          assertError(isHexString(yParityAndS, 32), "invalid yParityAndS");
          return { v: getBytes(yParityAndS)[0] & 128 ? 28 : 27 };
        }
        if (yParity != null) {
          switch (yParity) {
            case 0:
              return { v: 27 };
            case 1:
              return { v: 28 };
          }
          assertError(false, "invalid yParity");
        }
        assertError(false, "missing v");
      }(sig.v, sig.yParityAndS, sig.yParity);
      const result = new _Signature(_guard$3, r2, s2, v2);
      if (networkV) {
        __privateSet(result, _networkV, networkV);
      }
      assertError(!("yParity" in sig && sig.yParity !== result.yParity), "yParity mismatch");
      assertError(!("yParityAndS" in sig && sig.yParityAndS !== result.yParityAndS), "yParityAndS mismatch");
      return result;
    }
  };
  let Signature = _Signature;
  _r = new WeakMap();
  _s2 = new WeakMap();
  _v = new WeakMap();
  _networkV = new WeakMap();
  utils.hmacSha256Sync = function(key, ...messages2) {
    return getBytes(computeHmac("sha256", key, concat(messages2)));
  };
  const _SigningKey = class {
    constructor(privateKey) {
      __privateAdd(this, _privateKey, void 0);
      assertArgument(dataLength(privateKey) === 32, "invalid private key", "privateKey", "[REDACTED]");
      __privateSet(this, _privateKey, hexlify(privateKey));
    }
    get privateKey() {
      return __privateGet(this, _privateKey);
    }
    get publicKey() {
      return _SigningKey.computePublicKey(__privateGet(this, _privateKey));
    }
    get compressedPublicKey() {
      return _SigningKey.computePublicKey(__privateGet(this, _privateKey), true);
    }
    sign(digest) {
      assertArgument(dataLength(digest) === 32, "invalid digest length", "digest", digest);
      const [sigDer, recid] = signSync(getBytesCopy(digest), getBytesCopy(__privateGet(this, _privateKey)), {
        recovered: true,
        canonical: true
      });
      const sig = Signature$1.fromHex(sigDer);
      return Signature.from({
        r: toBeHex("0x" + sig.r.toString(16), 32),
        s: toBeHex("0x" + sig.s.toString(16), 32),
        v: recid ? 28 : 27
      });
    }
    computeSharedSecret(other) {
      const pubKey = _SigningKey.computePublicKey(other);
      formatAppLog("log", "at node_modules/ethers/lib.esm/crypto/signing-key.js:82", pubKey);
      return hexlify(getSharedSecret(getBytesCopy(__privateGet(this, _privateKey)), getBytes(pubKey)));
    }
    static computePublicKey(key, compressed) {
      let bytes2 = getBytes(key, "key");
      if (bytes2.length === 32) {
        const pubKey = getPublicKey(bytes2, !!compressed);
        return hexlify(pubKey);
      }
      if (bytes2.length === 64) {
        const pub = new Uint8Array(65);
        pub[0] = 4;
        pub.set(bytes2, 1);
        bytes2 = pub;
      }
      const point = Point.fromHex(bytes2);
      return hexlify(point.toRawBytes(compressed));
    }
    static recoverPublicKey(digest, signature) {
      assertArgument(dataLength(digest) === 32, "invalid digest length", "digest", digest);
      const sig = Signature.from(signature);
      const der = Signature$1.fromCompact(getBytesCopy(concat([sig.r, sig.s]))).toDERRawBytes();
      const pubKey = recoverPublicKey(getBytesCopy(digest), der, sig.yParity);
      if (pubKey != null) {
        return hexlify(pubKey);
      }
      assertArgument(false, "invalid signautre for digest", "signature", signature);
    }
    static addPoints(p0, p1, compressed) {
      const pub0 = Point.fromHex(_SigningKey.computePublicKey(p0).substring(2));
      const pub1 = Point.fromHex(_SigningKey.computePublicKey(p1).substring(2));
      return "0x" + pub0.add(pub1).toHex(!!compressed);
    }
  };
  let SigningKey = _SigningKey;
  _privateKey = new WeakMap();
  const BN_0$6 = BigInt(0);
  const BN_36 = BigInt(36);
  function getChecksumAddress(address) {
    address = address.toLowerCase();
    const chars = address.substring(2).split("");
    const expanded = new Uint8Array(40);
    for (let i2 = 0; i2 < 40; i2++) {
      expanded[i2] = chars[i2].charCodeAt(0);
    }
    const hashed = getBytes(keccak256(expanded));
    for (let i2 = 0; i2 < 40; i2 += 2) {
      if (hashed[i2 >> 1] >> 4 >= 8) {
        chars[i2] = chars[i2].toUpperCase();
      }
      if ((hashed[i2 >> 1] & 15) >= 8) {
        chars[i2 + 1] = chars[i2 + 1].toUpperCase();
      }
    }
    return "0x" + chars.join("");
  }
  const ibanLookup = {};
  for (let i2 = 0; i2 < 10; i2++) {
    ibanLookup[String(i2)] = String(i2);
  }
  for (let i2 = 0; i2 < 26; i2++) {
    ibanLookup[String.fromCharCode(65 + i2)] = String(10 + i2);
  }
  const safeDigits = 15;
  function ibanChecksum(address) {
    address = address.toUpperCase();
    address = address.substring(4) + address.substring(0, 2) + "00";
    let expanded = address.split("").map((c2) => {
      return ibanLookup[c2];
    }).join("");
    while (expanded.length >= safeDigits) {
      let block = expanded.substring(0, safeDigits);
      expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
    }
    let checksum2 = String(98 - parseInt(expanded, 10) % 97);
    while (checksum2.length < 2) {
      checksum2 = "0" + checksum2;
    }
    return checksum2;
  }
  const Base36 = function() {
    const result = {};
    for (let i2 = 0; i2 < 36; i2++) {
      const key = "0123456789abcdefghijklmnopqrstuvwxyz"[i2];
      result[key] = BigInt(i2);
    }
    return result;
  }();
  function fromBase36(value) {
    value = value.toLowerCase();
    let result = BN_0$6;
    for (let i2 = 0; i2 < value.length; i2++) {
      result = result * BN_36 + Base36[value[i2]];
    }
    return result;
  }
  function getAddress(address) {
    assertArgument(typeof address === "string", "invalid address", "address", address);
    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
      if (address.substring(0, 2) !== "0x") {
        address = "0x" + address;
      }
      const result = getChecksumAddress(address);
      assertArgument(!address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || result === address, "bad address checksum", "address", address);
      return result;
    }
    if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
      assertArgument(address.substring(2, 4) === ibanChecksum(address), "bad icap checksum", "address", address);
      let result = fromBase36(address.substring(4)).toString(16);
      while (result.length < 40) {
        result = "0" + result;
      }
      return getChecksumAddress("0x" + result);
    }
    assertArgument(false, "invalid address", "address", address);
  }
  function getCreateAddress(tx) {
    const from = getAddress(tx.from);
    const nonce = getBigInt(tx.nonce, "tx.nonce");
    let nonceHex = nonce.toString(16);
    if (nonceHex === "0") {
      nonceHex = "0x";
    } else if (nonceHex.length % 2) {
      nonceHex = "0x0" + nonceHex;
    } else {
      nonceHex = "0x" + nonceHex;
    }
    return getAddress(dataSlice(keccak256(encodeRlp([from, nonceHex])), 12));
  }
  function isAddressable(value) {
    return value && typeof value.getAddress === "function";
  }
  async function checkAddress(target, promise) {
    const result = await promise;
    if (result == null || result === "0x0000000000000000000000000000000000000000") {
      assert$1(typeof target !== "string", "unconfigured name", "UNCONFIGURED_NAME", { value: target });
      assertArgument(false, "invalid AddressLike value; did not resolve to a value address", "target", target);
    }
    return getAddress(result);
  }
  function resolveAddress(target, resolver) {
    if (typeof target === "string") {
      if (target.match(/^0x[0-9a-f]{40}$/i)) {
        return getAddress(target);
      }
      assert$1(resolver != null, "ENS resolution requires a provider", "UNSUPPORTED_OPERATION", { operation: "resolveName" });
      return checkAddress(target, resolver.resolveName(target));
    } else if (isAddressable(target)) {
      return checkAddress(target, target.getAddress());
    } else if (target && typeof target.then === "function") {
      return checkAddress(target, target);
    }
    assertArgument(false, "unsupported addressable value", "target", target);
  }
  const _gaurd = {};
  function n(value, width) {
    let signed2 = false;
    if (width < 0) {
      signed2 = true;
      width *= -1;
    }
    return new Typed(_gaurd, `${signed2 ? "" : "u"}int${width}`, value, { signed: signed2, width });
  }
  function b(value, size) {
    return new Typed(_gaurd, `bytes${size ? size : ""}`, value, { size });
  }
  const _typedSymbol = Symbol.for("_ethers_typed");
  const _Typed = class {
    constructor(gaurd, type, value, options) {
      __privateAdd(this, _options, void 0);
      if (options == null) {
        options = null;
      }
      assertPrivate(_gaurd, gaurd, "Typed");
      defineProperties(this, { _typedSymbol, type, value });
      __privateSet(this, _options, options);
      this.format();
    }
    format() {
      if (this.type === "array") {
        throw new Error("");
      } else if (this.type === "dynamicArray") {
        throw new Error("");
      } else if (this.type === "tuple") {
        return `tuple(${this.value.map((v2) => v2.format()).join(",")})`;
      }
      return this.type;
    }
    defaultValue() {
      return 0;
    }
    minValue() {
      return 0;
    }
    maxValue() {
      return 0;
    }
    isBigInt() {
      return !!this.type.match(/^u?int[0-9]+$/);
    }
    isData() {
      return this.type.substring(0, 5) === "bytes";
    }
    isString() {
      return this.type === "string";
    }
    get tupleName() {
      if (this.type !== "tuple") {
        throw TypeError("not a tuple");
      }
      return __privateGet(this, _options);
    }
    get arrayLength() {
      if (this.type !== "array") {
        throw TypeError("not an array");
      }
      if (__privateGet(this, _options) === true) {
        return -1;
      }
      if (__privateGet(this, _options) === false) {
        return this.value.length;
      }
      return null;
    }
    static from(type, value) {
      return new _Typed(_gaurd, type, value);
    }
    static uint8(v2) {
      return n(v2, 8);
    }
    static uint16(v2) {
      return n(v2, 16);
    }
    static uint24(v2) {
      return n(v2, 24);
    }
    static uint32(v2) {
      return n(v2, 32);
    }
    static uint40(v2) {
      return n(v2, 40);
    }
    static uint48(v2) {
      return n(v2, 48);
    }
    static uint56(v2) {
      return n(v2, 56);
    }
    static uint64(v2) {
      return n(v2, 64);
    }
    static uint72(v2) {
      return n(v2, 72);
    }
    static uint80(v2) {
      return n(v2, 80);
    }
    static uint88(v2) {
      return n(v2, 88);
    }
    static uint96(v2) {
      return n(v2, 96);
    }
    static uint104(v2) {
      return n(v2, 104);
    }
    static uint112(v2) {
      return n(v2, 112);
    }
    static uint120(v2) {
      return n(v2, 120);
    }
    static uint128(v2) {
      return n(v2, 128);
    }
    static uint136(v2) {
      return n(v2, 136);
    }
    static uint144(v2) {
      return n(v2, 144);
    }
    static uint152(v2) {
      return n(v2, 152);
    }
    static uint160(v2) {
      return n(v2, 160);
    }
    static uint168(v2) {
      return n(v2, 168);
    }
    static uint176(v2) {
      return n(v2, 176);
    }
    static uint184(v2) {
      return n(v2, 184);
    }
    static uint192(v2) {
      return n(v2, 192);
    }
    static uint200(v2) {
      return n(v2, 200);
    }
    static uint208(v2) {
      return n(v2, 208);
    }
    static uint216(v2) {
      return n(v2, 216);
    }
    static uint224(v2) {
      return n(v2, 224);
    }
    static uint232(v2) {
      return n(v2, 232);
    }
    static uint240(v2) {
      return n(v2, 240);
    }
    static uint248(v2) {
      return n(v2, 248);
    }
    static uint256(v2) {
      return n(v2, 256);
    }
    static uint(v2) {
      return n(v2, 256);
    }
    static int8(v2) {
      return n(v2, -8);
    }
    static int16(v2) {
      return n(v2, -16);
    }
    static int24(v2) {
      return n(v2, -24);
    }
    static int32(v2) {
      return n(v2, -32);
    }
    static int40(v2) {
      return n(v2, -40);
    }
    static int48(v2) {
      return n(v2, -48);
    }
    static int56(v2) {
      return n(v2, -56);
    }
    static int64(v2) {
      return n(v2, -64);
    }
    static int72(v2) {
      return n(v2, -72);
    }
    static int80(v2) {
      return n(v2, -80);
    }
    static int88(v2) {
      return n(v2, -88);
    }
    static int96(v2) {
      return n(v2, -96);
    }
    static int104(v2) {
      return n(v2, -104);
    }
    static int112(v2) {
      return n(v2, -112);
    }
    static int120(v2) {
      return n(v2, -120);
    }
    static int128(v2) {
      return n(v2, -128);
    }
    static int136(v2) {
      return n(v2, -136);
    }
    static int144(v2) {
      return n(v2, -144);
    }
    static int152(v2) {
      return n(v2, -152);
    }
    static int160(v2) {
      return n(v2, -160);
    }
    static int168(v2) {
      return n(v2, -168);
    }
    static int176(v2) {
      return n(v2, -176);
    }
    static int184(v2) {
      return n(v2, -184);
    }
    static int192(v2) {
      return n(v2, -192);
    }
    static int200(v2) {
      return n(v2, -200);
    }
    static int208(v2) {
      return n(v2, -208);
    }
    static int216(v2) {
      return n(v2, -216);
    }
    static int224(v2) {
      return n(v2, -224);
    }
    static int232(v2) {
      return n(v2, -232);
    }
    static int240(v2) {
      return n(v2, -240);
    }
    static int248(v2) {
      return n(v2, -248);
    }
    static int256(v2) {
      return n(v2, -256);
    }
    static int(v2) {
      return n(v2, -256);
    }
    static bytes1(v2) {
      return b(v2, 1);
    }
    static bytes2(v2) {
      return b(v2, 2);
    }
    static bytes3(v2) {
      return b(v2, 3);
    }
    static bytes4(v2) {
      return b(v2, 4);
    }
    static bytes5(v2) {
      return b(v2, 5);
    }
    static bytes6(v2) {
      return b(v2, 6);
    }
    static bytes7(v2) {
      return b(v2, 7);
    }
    static bytes8(v2) {
      return b(v2, 8);
    }
    static bytes9(v2) {
      return b(v2, 9);
    }
    static bytes10(v2) {
      return b(v2, 10);
    }
    static bytes11(v2) {
      return b(v2, 11);
    }
    static bytes12(v2) {
      return b(v2, 12);
    }
    static bytes13(v2) {
      return b(v2, 13);
    }
    static bytes14(v2) {
      return b(v2, 14);
    }
    static bytes15(v2) {
      return b(v2, 15);
    }
    static bytes16(v2) {
      return b(v2, 16);
    }
    static bytes17(v2) {
      return b(v2, 17);
    }
    static bytes18(v2) {
      return b(v2, 18);
    }
    static bytes19(v2) {
      return b(v2, 19);
    }
    static bytes20(v2) {
      return b(v2, 20);
    }
    static bytes21(v2) {
      return b(v2, 21);
    }
    static bytes22(v2) {
      return b(v2, 22);
    }
    static bytes23(v2) {
      return b(v2, 23);
    }
    static bytes24(v2) {
      return b(v2, 24);
    }
    static bytes25(v2) {
      return b(v2, 25);
    }
    static bytes26(v2) {
      return b(v2, 26);
    }
    static bytes27(v2) {
      return b(v2, 27);
    }
    static bytes28(v2) {
      return b(v2, 28);
    }
    static bytes29(v2) {
      return b(v2, 29);
    }
    static bytes30(v2) {
      return b(v2, 30);
    }
    static bytes31(v2) {
      return b(v2, 31);
    }
    static bytes32(v2) {
      return b(v2, 32);
    }
    static address(v2) {
      return new _Typed(_gaurd, "address", v2);
    }
    static bool(v2) {
      return new _Typed(_gaurd, "bool", !!v2);
    }
    static bytes(v2) {
      return new _Typed(_gaurd, "bytes", v2);
    }
    static string(v2) {
      return new _Typed(_gaurd, "string", v2);
    }
    static array(v2, dynamic) {
      throw new Error("not implemented yet");
    }
    static tuple(v2, name) {
      throw new Error("not implemented yet");
    }
    static overrides(v2) {
      return new _Typed(_gaurd, "overrides", Object.assign({}, v2));
    }
    static isTyped(value) {
      return value && value._typedSymbol === _typedSymbol;
    }
    static dereference(value, type) {
      if (_Typed.isTyped(value)) {
        if (value.type !== type) {
          throw new Error(`invalid type: expecetd ${type}, got ${value.type}`);
        }
        return value.value;
      }
      return value;
    }
  };
  let Typed = _Typed;
  _options = new WeakMap();
  class AddressCoder extends Coder {
    constructor(localName) {
      super("address", "address", localName, false);
    }
    defaultValue() {
      return "0x0000000000000000000000000000000000000000";
    }
    encode(writer, _value2) {
      let value = Typed.dereference(_value2, "string");
      try {
        value = getAddress(value);
      } catch (error) {
        return this._throwError(error.message, _value2);
      }
      return writer.writeValue(value);
    }
    decode(reader) {
      return getAddress(toBeHex(reader.readValue(), 20));
    }
  }
  class AnonymousCoder extends Coder {
    constructor(coder) {
      super(coder.name, coder.type, "_", coder.dynamic);
      this.coder = coder;
    }
    defaultValue() {
      return this.coder.defaultValue();
    }
    encode(writer, value) {
      return this.coder.encode(writer, value);
    }
    decode(reader) {
      return this.coder.decode(reader);
    }
  }
  function pack(writer, coders, values) {
    let arrayValues = [];
    if (Array.isArray(values)) {
      arrayValues = values;
    } else if (values && typeof values === "object") {
      let unique = {};
      arrayValues = coders.map((coder) => {
        const name = coder.localName;
        assert$1(name, "cannot encode object for signature with missing names", "INVALID_ARGUMENT", { argument: "values", info: { coder }, value: values });
        assert$1(unique[name], "cannot encode object for signature with duplicate names", "INVALID_ARGUMENT", { argument: "values", info: { coder }, value: values });
        unique[name] = true;
        return values[name];
      });
    } else {
      assertArgument(false, "invalid tuple value", "tuple", values);
    }
    assertArgument(coders.length === arrayValues.length, "types/value length mismatch", "tuple", values);
    let staticWriter = new Writer();
    let dynamicWriter = new Writer();
    let updateFuncs = [];
    coders.forEach((coder, index) => {
      let value = arrayValues[index];
      if (coder.dynamic) {
        let dynamicOffset = dynamicWriter.length;
        coder.encode(dynamicWriter, value);
        let updateFunc = staticWriter.writeUpdatableValue();
        updateFuncs.push((baseOffset) => {
          updateFunc(baseOffset + dynamicOffset);
        });
      } else {
        coder.encode(staticWriter, value);
      }
    });
    updateFuncs.forEach((func) => {
      func(staticWriter.length);
    });
    let length = writer.appendWriter(staticWriter);
    length += writer.appendWriter(dynamicWriter);
    return length;
  }
  function unpack(reader, coders) {
    let values = [];
    let keys = [];
    let baseReader = reader.subReader(0);
    coders.forEach((coder) => {
      let value = null;
      if (coder.dynamic) {
        let offset = reader.readIndex();
        let offsetReader = baseReader.subReader(offset);
        try {
          value = coder.decode(offsetReader);
        } catch (error) {
          if (isError(error, "BUFFER_OVERRUN")) {
            throw error;
          }
          value = error;
          value.baseType = coder.name;
          value.name = coder.localName;
          value.type = coder.type;
        }
      } else {
        try {
          value = coder.decode(reader);
        } catch (error) {
          if (isError(error, "BUFFER_OVERRUN")) {
            throw error;
          }
          value = error;
          value.baseType = coder.name;
          value.name = coder.localName;
          value.type = coder.type;
        }
      }
      if (value == void 0) {
        throw new Error("investigate");
      }
      values.push(value);
      keys.push(coder.localName || null);
    });
    return Result.fromItems(values, keys);
  }
  class ArrayCoder extends Coder {
    constructor(coder, length, localName) {
      const type = coder.type + "[" + (length >= 0 ? length : "") + "]";
      const dynamic = length === -1 || coder.dynamic;
      super("array", type, localName, dynamic);
      defineProperties(this, { coder, length });
    }
    defaultValue() {
      const defaultChild = this.coder.defaultValue();
      const result = [];
      for (let i2 = 0; i2 < this.length; i2++) {
        result.push(defaultChild);
      }
      return result;
    }
    encode(writer, _value2) {
      const value = Typed.dereference(_value2, "array");
      if (!Array.isArray(value)) {
        this._throwError("expected array value", value);
      }
      let count = this.length;
      if (count === -1) {
        count = value.length;
        writer.writeValue(value.length);
      }
      assertArgumentCount(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
      let coders = [];
      for (let i2 = 0; i2 < value.length; i2++) {
        coders.push(this.coder);
      }
      return pack(writer, coders, value);
    }
    decode(reader) {
      let count = this.length;
      if (count === -1) {
        count = reader.readIndex();
        assert$1(count * WordSize <= reader.dataLength, "insufficient data length", "BUFFER_OVERRUN", { buffer: reader.bytes, offset: count * WordSize, length: reader.dataLength });
      }
      let coders = [];
      for (let i2 = 0; i2 < count; i2++) {
        coders.push(new AnonymousCoder(this.coder));
      }
      return unpack(reader, coders);
    }
  }
  class BooleanCoder extends Coder {
    constructor(localName) {
      super("bool", "bool", localName, false);
    }
    defaultValue() {
      return false;
    }
    encode(writer, _value2) {
      const value = Typed.dereference(_value2, "bool");
      return writer.writeValue(value ? 1 : 0);
    }
    decode(reader) {
      return !!reader.readValue();
    }
  }
  class DynamicBytesCoder extends Coder {
    constructor(type, localName) {
      super(type, type, localName, true);
    }
    defaultValue() {
      return "0x";
    }
    encode(writer, value) {
      value = getBytesCopy(value);
      let length = writer.writeValue(value.length);
      length += writer.writeBytes(value);
      return length;
    }
    decode(reader) {
      return reader.readBytes(reader.readIndex(), true);
    }
  }
  class BytesCoder extends DynamicBytesCoder {
    constructor(localName) {
      super("bytes", localName);
    }
    decode(reader) {
      return hexlify(super.decode(reader));
    }
  }
  class FixedBytesCoder extends Coder {
    constructor(size, localName) {
      let name = "bytes" + String(size);
      super(name, name, localName, false);
      defineProperties(this, { size }, { size: "number" });
    }
    defaultValue() {
      return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
    }
    encode(writer, _value2) {
      let data = getBytesCopy(Typed.dereference(_value2, this.type));
      if (data.length !== this.size) {
        this._throwError("incorrect data length", _value2);
      }
      return writer.writeBytes(data);
    }
    decode(reader) {
      return hexlify(reader.readBytes(this.size));
    }
  }
  const Empty = new Uint8Array([]);
  class NullCoder extends Coder {
    constructor(localName) {
      super("null", "", localName, false);
    }
    defaultValue() {
      return null;
    }
    encode(writer, value) {
      if (value != null) {
        this._throwError("not null", value);
      }
      return writer.writeBytes(Empty);
    }
    decode(reader) {
      reader.readBytes(0);
      return null;
    }
  }
  const BN_0$5 = BigInt(0);
  const BN_1$1 = BigInt(1);
  const BN_MAX_UINT256$1 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  class NumberCoder extends Coder {
    constructor(size, signed2, localName) {
      const name = (signed2 ? "int" : "uint") + size * 8;
      super(name, name, localName, false);
      defineProperties(this, { size, signed: signed2 }, { size: "number", signed: "boolean" });
    }
    defaultValue() {
      return 0;
    }
    encode(writer, _value2) {
      let value = getBigInt(Typed.dereference(_value2, this.type));
      let maxUintValue = mask(BN_MAX_UINT256$1, WordSize * 8);
      if (this.signed) {
        let bounds = mask(maxUintValue, this.size * 8 - 1);
        if (value > bounds || value < -(bounds + BN_1$1)) {
          this._throwError("value out-of-bounds", _value2);
        }
        value = toTwos(value, 8 * WordSize);
      } else if (value < BN_0$5 || value > mask(maxUintValue, this.size * 8)) {
        this._throwError("value out-of-bounds", _value2);
      }
      return writer.writeValue(value);
    }
    decode(reader) {
      let value = mask(reader.readValue(), this.size * 8);
      if (this.signed) {
        value = fromTwos(value, this.size * 8);
      }
      return value;
    }
  }
  class StringCoder extends DynamicBytesCoder {
    constructor(localName) {
      super("string", localName);
    }
    defaultValue() {
      return "";
    }
    encode(writer, _value2) {
      return super.encode(writer, toUtf8Bytes(Typed.dereference(_value2, "string")));
    }
    decode(reader) {
      return toUtf8String(super.decode(reader));
    }
  }
  class TupleCoder extends Coder {
    constructor(coders, localName) {
      let dynamic = false;
      const types = [];
      coders.forEach((coder) => {
        if (coder.dynamic) {
          dynamic = true;
        }
        types.push(coder.type);
      });
      const type = "tuple(" + types.join(",") + ")";
      super("tuple", type, localName, dynamic);
      defineProperties(this, { coders: Object.freeze(coders.slice()) });
    }
    defaultValue() {
      const values = [];
      this.coders.forEach((coder) => {
        values.push(coder.defaultValue());
      });
      const uniqueNames = this.coders.reduce((accum, coder) => {
        const name = coder.localName;
        if (name) {
          if (!accum[name]) {
            accum[name] = 0;
          }
          accum[name]++;
        }
        return accum;
      }, {});
      this.coders.forEach((coder, index) => {
        let name = coder.localName;
        if (!name || uniqueNames[name] !== 1) {
          return;
        }
        if (name === "length") {
          name = "_length";
        }
        if (values[name] != null) {
          return;
        }
        values[name] = values[index];
      });
      return Object.freeze(values);
    }
    encode(writer, _value2) {
      const value = Typed.dereference(_value2, "tuple");
      return pack(writer, this.coders, value);
    }
    decode(reader) {
      return unpack(reader, this.coders);
    }
  }
  function id(value) {
    return keccak256(toUtf8Bytes(value));
  }
  function decode_arithmetic(bytes2) {
    let pos = 0;
    function u16() {
      return bytes2[pos++] << 8 | bytes2[pos++];
    }
    let symbol_count = u16();
    let total = 1;
    let acc = [0, 1];
    for (let i2 = 1; i2 < symbol_count; i2++) {
      acc.push(total += u16());
    }
    let skip = u16();
    let pos_payload = pos;
    pos += skip;
    let read_width = 0;
    let read_buffer = 0;
    function read_bit() {
      if (read_width == 0) {
        read_buffer = read_buffer << 8 | bytes2[pos++];
        read_width = 8;
      }
      return read_buffer >> --read_width & 1;
    }
    const N2 = 31;
    const FULL = 2 ** N2;
    const HALF = FULL >>> 1;
    const QRTR = HALF >> 1;
    const MASK = FULL - 1;
    let register = 0;
    for (let i2 = 0; i2 < N2; i2++)
      register = register << 1 | read_bit();
    let symbols = [];
    let low = 0;
    let range = FULL;
    while (true) {
      let value = Math.floor(((register - low + 1) * total - 1) / range);
      let start = 0;
      let end = symbol_count;
      while (end - start > 1) {
        let mid = start + end >>> 1;
        if (value < acc[mid]) {
          end = mid;
        } else {
          start = mid;
        }
      }
      if (start == 0)
        break;
      symbols.push(start);
      let a2 = low + Math.floor(range * acc[start] / total);
      let b2 = low + Math.floor(range * acc[start + 1] / total) - 1;
      while (((a2 ^ b2) & HALF) == 0) {
        register = register << 1 & MASK | read_bit();
        a2 = a2 << 1 & MASK;
        b2 = b2 << 1 & MASK | 1;
      }
      while (a2 & ~b2 & QRTR) {
        register = register & HALF | register << 1 & MASK >>> 1 | read_bit();
        a2 = a2 << 1 ^ HALF;
        b2 = (b2 ^ HALF) << 1 | HALF | 1;
      }
      low = a2;
      range = 1 + b2 - a2;
    }
    let offset = symbol_count - 4;
    return symbols.map((x2) => {
      switch (x2 - offset) {
        case 3:
          return offset + 65792 + (bytes2[pos_payload++] << 16 | bytes2[pos_payload++] << 8 | bytes2[pos_payload++]);
        case 2:
          return offset + 256 + (bytes2[pos_payload++] << 8 | bytes2[pos_payload++]);
        case 1:
          return offset + bytes2[pos_payload++];
        default:
          return x2 - 1;
      }
    });
  }
  function read_payload(v2) {
    let pos = 0;
    return () => v2[pos++];
  }
  function read_compressed_payload(s2) {
    return read_payload(decode_arithmetic(unsafe_atob(s2)));
  }
  function unsafe_atob(s2) {
    let lookup2 = [];
    [..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"].forEach((c2, i2) => lookup2[c2.charCodeAt(0)] = i2);
    let n2 = s2.length;
    let ret = new Uint8Array(6 * n2 >> 3);
    for (let i2 = 0, pos = 0, width = 0, carry = 0; i2 < n2; i2++) {
      carry = carry << 6 | lookup2[s2.charCodeAt(i2)];
      width += 6;
      if (width >= 8) {
        ret[pos++] = carry >> (width -= 8);
      }
    }
    return ret;
  }
  function signed(i2) {
    return i2 & 1 ? ~i2 >> 1 : i2 >> 1;
  }
  function read_deltas(n2, next) {
    let v2 = Array(n2);
    for (let i2 = 0, x2 = 0; i2 < n2; i2++)
      v2[i2] = x2 += signed(next());
    return v2;
  }
  function read_sorted(next, prev = 0) {
    let ret = [];
    while (true) {
      let x2 = next();
      let n2 = next();
      if (!n2)
        break;
      prev += x2;
      for (let i2 = 0; i2 < n2; i2++) {
        ret.push(prev + i2);
      }
      prev += n2 + 1;
    }
    return ret;
  }
  function read_sorted_arrays(next) {
    return read_array_while(() => {
      let v2 = read_sorted(next);
      if (v2.length)
        return v2;
    });
  }
  function read_mapped(next) {
    let ret = [];
    while (true) {
      let w = next();
      if (w == 0)
        break;
      ret.push(read_linear_table(w, next));
    }
    while (true) {
      let w = next() - 1;
      if (w < 0)
        break;
      ret.push(read_replacement_table(w, next));
    }
    return ret.flat();
  }
  function read_array_while(next) {
    let v2 = [];
    while (true) {
      let x2 = next(v2.length);
      if (!x2)
        break;
      v2.push(x2);
    }
    return v2;
  }
  function read_transposed(n2, w, next) {
    let m2 = Array(n2).fill().map(() => []);
    for (let i2 = 0; i2 < w; i2++) {
      read_deltas(n2, next).forEach((x2, j2) => m2[j2].push(x2));
    }
    return m2;
  }
  function read_linear_table(w, next) {
    let dx = 1 + next();
    let dy = next();
    let vN = read_array_while(next);
    let m2 = read_transposed(vN.length, 1 + w, next);
    return m2.flatMap((v2, i2) => {
      let [x2, ...ys2] = v2;
      return Array(vN[i2]).fill().map((_2, j2) => {
        let j_dy = j2 * dy;
        return [x2 + j2 * dx, ys2.map((y2) => y2 + j_dy)];
      });
    });
  }
  function read_replacement_table(w, next) {
    let n2 = 1 + next();
    let m2 = read_transposed(n2, 1 + w, next);
    return m2.map((v2) => [v2[0], v2.slice(1)]);
  }
  var r = read_compressed_payload("");
  const FENCED = /* @__PURE__ */ new Map([[8217, "apostrophe"], [8260, "fraction slash"], [12539, "middle dot"]]);
  function hex_cp(cp) {
    return cp.toString(16).toUpperCase().padStart(2, "0");
  }
  function quote_cp(cp) {
    return `{${hex_cp(cp)}}`;
  }
  function explode_cp(s2) {
    let cps = [];
    for (let pos = 0, len = s2.length; pos < len; ) {
      let cp = s2.codePointAt(pos);
      pos += cp < 65536 ? 1 : 2;
      cps.push(cp);
    }
    return cps;
  }
  function str_from_cps(cps) {
    const chunk = 4096;
    let len = cps.length;
    if (len < chunk)
      return String.fromCodePoint(...cps);
    let buf = [];
    for (let i2 = 0; i2 < len; ) {
      buf.push(String.fromCodePoint(...cps.slice(i2, i2 += chunk)));
    }
    return buf.join("");
  }
  function nf(cps, form) {
    return explode_cp(str_from_cps(cps).normalize(form));
  }
  function nfc(cps) {
    return nf(cps, "NFC");
  }
  function nfd(cps) {
    return nf(cps, "NFD");
  }
  const FE0F = 65039;
  const STOP_CH = ".";
  const UNIQUE_PH = 1;
  const HYPHEN = 45;
  function read_set() {
    return new Set(read_sorted(r));
  }
  const MAPPED = new Map(read_mapped(r));
  const IGNORED = read_set();
  const CM = read_set();
  const ESCAPE = read_set();
  read_set();
  const CHUNKS = read_sorted_arrays(r);
  function read_chunked() {
    return new Set([read_sorted(r).map((i2) => CHUNKS[i2]), read_sorted(r)].flat(2));
  }
  const UNRESTRICTED = r();
  const GROUPS = read_array_while((i2) => {
    let N2 = read_array_while(r).map((x2) => x2 + 96);
    if (N2.length) {
      let R2 = i2 >= UNRESTRICTED;
      N2[0] -= 32;
      N2 = str_from_cps(N2);
      if (R2)
        N2 = `Restricted[${N2}]`;
      let P2 = read_chunked();
      let Q2 = read_chunked();
      let V2 = [...P2, ...Q2].sort((a2, b2) => a2 - b2);
      let M2 = r() - 1;
      return { N: N2, P: P2, M: M2, R: R2, V: new Set(V2) };
    }
  });
  const WHOLE_VALID = read_set();
  const WHOLE_MAP = /* @__PURE__ */ new Map();
  [...WHOLE_VALID, ...read_set()].sort((a2, b2) => a2 - b2).map((cp, i2, v2) => {
    let d2 = r();
    let w = v2[i2] = d2 ? v2[i2 - d2] : { V: [], M: /* @__PURE__ */ new Map() };
    w.V.push(cp);
    if (!WHOLE_VALID.has(cp)) {
      WHOLE_MAP.set(cp, w);
    }
  });
  for (let { V: V2, M: M2 } of new Set(WHOLE_MAP.values())) {
    let recs = [];
    for (let cp of V2) {
      let gs2 = GROUPS.filter((g2) => g2.V.has(cp));
      let rec = recs.find(({ G: G2 }) => gs2.some((g2) => G2.has(g2)));
      if (!rec) {
        rec = { G: /* @__PURE__ */ new Set(), V: [] };
        recs.push(rec);
      }
      rec.V.push(cp);
      gs2.forEach((g2) => rec.G.add(g2));
    }
    let union2 = recs.flatMap(({ G: G2 }) => [...G2]);
    for (let { G: G2, V: V3 } of recs) {
      let complement = new Set(union2.filter((g2) => !G2.has(g2)));
      for (let cp of V3) {
        M2.set(cp, complement);
      }
    }
  }
  let union = /* @__PURE__ */ new Set();
  let multi = /* @__PURE__ */ new Set();
  for (let g2 of GROUPS) {
    for (let cp of g2.V) {
      (union.has(cp) ? multi : union).add(cp);
    }
  }
  for (let cp of union) {
    if (!WHOLE_MAP.has(cp) && !multi.has(cp)) {
      WHOLE_MAP.set(cp, UNIQUE_PH);
    }
  }
  const VALID = /* @__PURE__ */ new Set([...union, ...nfd(union)]);
  const EMOJI_SORTED = read_sorted(r);
  const EMOJI_ROOT = read_emoji_trie([]);
  function read_emoji_trie(cps) {
    let B2 = read_array_while(() => {
      let keys = read_sorted(r).map((i2) => EMOJI_SORTED[i2]);
      if (keys.length)
        return read_emoji_trie(keys);
    }).sort((a2, b2) => b2.Q.size - a2.Q.size);
    let temp = r();
    let V2 = temp % 3;
    temp = temp / 3 | 0;
    let F2 = temp & 1;
    temp >>= 1;
    let S2 = temp & 1;
    let C2 = temp & 2;
    return { B: B2, V: V2, F: F2, S: S2, C: C2, Q: new Set(cps) };
  }
  class Emoji extends Array {
    get is_emoji() {
      return true;
    }
  }
  function safe_str_from_cps(cps, quoter = quote_cp) {
    let buf = [];
    if (is_combining_mark(cps[0]))
      buf.push("\u25CC");
    let prev = 0;
    let n2 = cps.length;
    for (let i2 = 0; i2 < n2; i2++) {
      let cp = cps[i2];
      if (should_escape(cp)) {
        buf.push(str_from_cps(cps.slice(prev, i2)));
        buf.push(quoter(cp));
        prev = i2 + 1;
      }
    }
    buf.push(str_from_cps(cps.slice(prev, n2)));
    return buf.join("");
  }
  function quoted_cp(cp) {
    return (should_escape(cp) ? "" : `"${safe_str_from_cps([cp])}" `) + quote_cp(cp);
  }
  function check_label_extension(cps) {
    if (cps.length >= 4 && cps[2] == HYPHEN && cps[3] == HYPHEN) {
      throw new Error("invalid label extension");
    }
  }
  function check_leading_underscore(cps) {
    const UNDERSCORE = 95;
    for (let i2 = cps.lastIndexOf(UNDERSCORE); i2 > 0; ) {
      if (cps[--i2] !== UNDERSCORE) {
        throw new Error("underscore allowed only at start");
      }
    }
  }
  function check_fenced(cps) {
    let cp = cps[0];
    let prev = FENCED.get(cp);
    if (prev)
      throw error_placement(`leading ${prev}`);
    let n2 = cps.length;
    let last = -1;
    for (let i2 = 1; i2 < n2; i2++) {
      cp = cps[i2];
      let match = FENCED.get(cp);
      if (match) {
        if (last == i2)
          throw error_placement(`${prev} + ${match}`);
        last = i2 + 1;
        prev = match;
      }
    }
    if (last == n2)
      throw error_placement(`trailing ${prev}`);
  }
  function is_combining_mark(cp) {
    return CM.has(cp);
  }
  function should_escape(cp) {
    return ESCAPE.has(cp);
  }
  function ens_normalize(name) {
    return flatten(ens_split(name));
  }
  function ens_split(name, preserve_emoji) {
    let offset = 0;
    return name.split(STOP_CH).map((label) => {
      let input = explode_cp(label);
      let info = {
        input,
        offset
      };
      offset += input.length + 1;
      let norm;
      try {
        let tokens = info.tokens = process$1(input, nfc);
        let token_count = tokens.length;
        let type;
        if (!token_count) {
          throw new Error(`empty label`);
        } else {
          let chars = tokens[0];
          let emoji = token_count > 1 || chars.is_emoji;
          if (!emoji && chars.every((cp) => cp < 128)) {
            norm = chars;
            check_leading_underscore(norm);
            check_label_extension(norm);
            type = "ASCII";
          } else {
            if (emoji) {
              info.emoji = true;
              chars = tokens.flatMap((x2) => x2.is_emoji ? [] : x2);
            }
            norm = tokens.flatMap((x2) => !preserve_emoji && x2.is_emoji ? filter_fe0f(x2) : x2);
            check_leading_underscore(norm);
            if (!chars.length) {
              type = "Emoji";
            } else {
              if (CM.has(norm[0]))
                throw error_placement("leading combining mark");
              for (let i2 = 1; i2 < token_count; i2++) {
                let cps = tokens[i2];
                if (!cps.is_emoji && CM.has(cps[0])) {
                  throw error_placement(`emoji + combining mark: "${str_from_cps(tokens[i2 - 1])} + ${safe_str_from_cps([cps[0]])}"`);
                }
              }
              check_fenced(norm);
              let unique = [...new Set(chars)];
              let [g2] = determine_group(unique);
              check_group(g2, chars);
              check_whole(g2, unique);
              type = g2.N;
            }
          }
        }
        info.type = type;
      } catch (err) {
        info.error = err;
      }
      info.output = norm;
      return info;
    });
  }
  function check_whole(group, unique) {
    let maker;
    let shared2 = [];
    for (let cp of unique) {
      let whole = WHOLE_MAP.get(cp);
      if (whole === UNIQUE_PH)
        return;
      if (whole) {
        let set = whole.M.get(cp);
        maker = maker ? maker.filter((g2) => set.has(g2)) : [...set];
        if (!maker.length)
          return;
      } else {
        shared2.push(cp);
      }
    }
    if (maker) {
      for (let g2 of maker) {
        if (shared2.every((cp) => g2.V.has(cp))) {
          throw new Error(`whole-script confusable: ${group.N}/${g2.N}`);
        }
      }
    }
  }
  function determine_group(unique) {
    let groups = GROUPS;
    for (let cp of unique) {
      let gs2 = groups.filter((g2) => g2.V.has(cp));
      if (!gs2.length) {
        if (groups === GROUPS) {
          throw error_disallowed(cp);
        } else {
          throw error_group_member(groups[0], cp);
        }
      }
      groups = gs2;
      if (gs2.length == 1)
        break;
    }
    return groups;
  }
  function flatten(split2) {
    return split2.map(({ input, error, output: output2 }) => {
      if (error) {
        let msg = error.message;
        throw new Error(split2.length == 1 ? msg : `Invalid label "${safe_str_from_cps(input)}": ${msg}`);
      }
      return str_from_cps(output2);
    }).join(STOP_CH);
  }
  function error_disallowed(cp) {
    return new Error(`disallowed character: ${quoted_cp(cp)}`);
  }
  function error_group_member(g2, cp) {
    let quoted = quoted_cp(cp);
    let gg = GROUPS.find((g3) => g3.P.has(cp));
    if (gg) {
      quoted = `${gg.N} ${quoted}`;
    }
    return new Error(`illegal mixture: ${g2.N} + ${quoted}`);
  }
  function error_placement(where) {
    return new Error(`illegal placement: ${where}`);
  }
  function check_group(g2, cps) {
    let { V: V2, M: M2 } = g2;
    for (let cp of cps) {
      if (!V2.has(cp)) {
        throw error_group_member(g2, cp);
      }
    }
    if (M2 >= 0) {
      let decomposed = nfd(cps);
      for (let i2 = 1, e = decomposed.length; i2 < e; i2++) {
        if (CM.has(cps[i2])) {
          let j2 = i2 + 1;
          while (j2 < e && CM.has(cps[j2]))
            j2++;
          if (j2 - i2 > M2) {
            throw new Error(`too many combining marks: ${g2.N} "${str_from_cps(cps.slice(i2 - 1, j2))}" (${j2 - i2}/${M2})`);
          }
          i2 = j2;
        }
      }
    }
  }
  function process$1(input, nf2) {
    let ret = [];
    let chars = [];
    input = input.slice().reverse();
    while (input.length) {
      let emoji = consume_emoji_reversed(input);
      if (emoji) {
        if (chars.length) {
          ret.push(nf2(chars));
          chars = [];
        }
        ret.push(emoji);
      } else {
        let cp = input.pop();
        if (VALID.has(cp)) {
          chars.push(cp);
        } else {
          let cps = MAPPED.get(cp);
          if (cps) {
            chars.push(...cps);
          } else if (!IGNORED.has(cp)) {
            throw error_disallowed(cp);
          }
        }
      }
    }
    if (chars.length) {
      ret.push(nf2(chars));
    }
    return ret;
  }
  function filter_fe0f(cps) {
    return cps.filter((cp) => cp != FE0F);
  }
  function consume_emoji_reversed(cps, eaten) {
    let node = EMOJI_ROOT;
    let emoji;
    let saved;
    let stack = [];
    let pos = cps.length;
    if (eaten)
      eaten.length = 0;
    while (pos) {
      let cp = cps[--pos];
      node = node.B.find((x2) => x2.Q.has(cp));
      if (!node)
        break;
      if (node.S) {
        saved = cp;
      } else if (node.C) {
        if (cp === saved)
          break;
      }
      stack.push(cp);
      if (node.F) {
        stack.push(FE0F);
        if (pos > 0 && cps[pos - 1] == FE0F)
          pos--;
      }
      if (node.V) {
        emoji = conform_emoji_copy(stack, node);
        if (eaten)
          eaten.push(...cps.slice(pos).reverse());
        cps.length = pos;
      }
    }
    return emoji;
  }
  function conform_emoji_copy(cps, node) {
    let copy2 = Emoji.from(cps);
    if (node.V == 2)
      copy2.splice(1, 1);
    return copy2;
  }
  const Zeros = new Uint8Array(32);
  Zeros.fill(0);
  function checkComponent(comp) {
    assertArgument(comp.length !== 0, "invalid ENS name; empty component", "comp", comp);
    return comp;
  }
  function ensNameSplit(name) {
    const bytes2 = toUtf8Bytes(ensNormalize(name));
    const comps = [];
    if (name.length === 0) {
      return comps;
    }
    let last = 0;
    for (let i2 = 0; i2 < bytes2.length; i2++) {
      const d2 = bytes2[i2];
      if (d2 === 46) {
        comps.push(checkComponent(bytes2.slice(last, i2)));
        last = i2 + 1;
      }
    }
    assertArgument(last < bytes2.length, "invalid ENS name; empty component", "name", name);
    comps.push(checkComponent(bytes2.slice(last)));
    return comps;
  }
  function ensNormalize(name) {
    try {
      return ens_normalize(name);
    } catch (error) {
      assertArgument(false, `invalid ENS name (${error.message})`, "name", name);
    }
  }
  function namehash(name) {
    assertArgument(typeof name === "string", "invalid ENS name; not a string", "name", name);
    let result = Zeros;
    const comps = ensNameSplit(name);
    while (comps.length) {
      result = keccak256(concat([result, keccak256(comps.pop())]));
    }
    return hexlify(result);
  }
  function dnsEncode(name) {
    return hexlify(concat(ensNameSplit(name).map((comp) => {
      if (comp.length > 63) {
        throw new Error("invalid DNS encoded entry; length exceeds 63 bytes");
      }
      const bytes2 = new Uint8Array(comp.length + 1);
      bytes2.set(comp, 1);
      bytes2[0] = bytes2.length - 1;
      return bytes2;
    }))) + "00";
  }
  function accessSetify(addr, storageKeys) {
    return {
      address: getAddress(addr),
      storageKeys: storageKeys.map((storageKey, index) => {
        assertArgument(isHexString(storageKey, 32), "invalid slot", `storageKeys[${index}]`, storageKey);
        return storageKey.toLowerCase();
      })
    };
  }
  function accessListify(value) {
    if (Array.isArray(value)) {
      return value.map((set, index) => {
        if (Array.isArray(set)) {
          assertArgument(set.length === 2, "invalid slot set", `value[${index}]`, set);
          return accessSetify(set[0], set[1]);
        }
        assertArgument(set != null && typeof set === "object", "invalid address-slot set", "value", value);
        return accessSetify(set.address, set.storageKeys);
      });
    }
    assertArgument(value != null && typeof value === "object", "invalid access list", "value", value);
    const result = Object.keys(value).map((addr) => {
      const storageKeys = value[addr].reduce((accum, storageKey) => {
        accum[storageKey] = true;
        return accum;
      }, {});
      return accessSetify(addr, Object.keys(storageKeys).sort());
    });
    result.sort((a2, b2) => a2.address.localeCompare(b2.address));
    return result;
  }
  function computeAddress(key) {
    let pubkey;
    if (typeof key === "string") {
      pubkey = SigningKey.computePublicKey(key, false);
    } else {
      pubkey = key.publicKey;
    }
    return getAddress(keccak256("0x" + pubkey.substring(4)).substring(26));
  }
  function recoverAddress(digest, signature) {
    return computeAddress(SigningKey.recoverPublicKey(digest, signature));
  }
  const BN_0$4 = BigInt(0);
  const BN_2$1 = BigInt(2);
  const BN_27 = BigInt(27);
  const BN_28 = BigInt(28);
  const BN_35 = BigInt(35);
  const BN_MAX_UINT = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  function handleAddress(value) {
    if (value === "0x") {
      return null;
    }
    return getAddress(value);
  }
  function handleAccessList(value, param) {
    try {
      return accessListify(value);
    } catch (error) {
      assertArgument(false, error.message, param, value);
    }
  }
  function handleNumber(_value2, param) {
    if (_value2 === "0x") {
      return 0;
    }
    return getNumber(_value2, param);
  }
  function handleUint(_value2, param) {
    if (_value2 === "0x") {
      return BN_0$4;
    }
    const value = getBigInt(_value2, param);
    assertArgument(value <= BN_MAX_UINT, "value exceeds uint size", param, value);
    return value;
  }
  function formatNumber(_value2, name) {
    const value = getBigInt(_value2, "value");
    const result = toBeArray(value);
    assertArgument(result.length <= 32, `value too large`, `tx.${name}`, value);
    return result;
  }
  function formatAccessList(value) {
    return accessListify(value).map((set) => [set.address, set.storageKeys]);
  }
  function _parseLegacy(data) {
    const fields = decodeRlp(data);
    assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 6), "invalid field count for legacy transaction", "data", data);
    const tx = {
      type: 0,
      nonce: handleNumber(fields[0], "nonce"),
      gasPrice: handleUint(fields[1], "gasPrice"),
      gasLimit: handleUint(fields[2], "gasLimit"),
      to: handleAddress(fields[3]),
      value: handleUint(fields[4], "value"),
      data: hexlify(fields[5]),
      chainId: BN_0$4
    };
    if (fields.length === 6) {
      return tx;
    }
    const v2 = handleUint(fields[6], "v");
    const r2 = handleUint(fields[7], "r");
    const s2 = handleUint(fields[8], "s");
    if (r2 === BN_0$4 && s2 === BN_0$4) {
      tx.chainId = v2;
    } else {
      let chainId = (v2 - BN_35) / BN_2$1;
      if (chainId < BN_0$4) {
        chainId = BN_0$4;
      }
      tx.chainId = chainId;
      assertArgument(chainId !== BN_0$4 || (v2 === BN_27 || v2 === BN_28), "non-canonical legacy v", "v", fields[6]);
      tx.signature = Signature.from({
        r: zeroPadValue(fields[7], 32),
        s: zeroPadValue(fields[8], 32),
        v: v2
      });
      tx.hash = keccak256(data);
    }
    return tx;
  }
  function _serializeLegacy(tx, sig) {
    const fields = [
      formatNumber(tx.nonce || 0, "nonce"),
      formatNumber(tx.gasPrice || 0, "gasPrice"),
      formatNumber(tx.gasLimit || 0, "gasLimit"),
      tx.to != null ? getAddress(tx.to) : "0x",
      formatNumber(tx.value || 0, "value"),
      tx.data || "0x"
    ];
    let chainId = BN_0$4;
    if (tx.chainId != null) {
      chainId = getBigInt(tx.chainId, "tx.chainId");
      assertArgument(!sig || sig.networkV == null || sig.legacyChainId === chainId, "tx.chainId/sig.v mismatch", "sig", sig);
    } else if (sig) {
      const legacy = sig.legacyChainId;
      if (legacy != null) {
        chainId = legacy;
      }
    }
    if (!sig) {
      if (chainId !== BN_0$4) {
        fields.push(toBeArray(chainId));
        fields.push("0x");
        fields.push("0x");
      }
      return encodeRlp(fields);
    }
    let v2 = BigInt(27 + sig.yParity);
    if (chainId !== BN_0$4) {
      v2 = Signature.getChainIdV(chainId, sig.v);
    } else if (BigInt(sig.v) !== v2) {
      assertArgument(false, "tx.chainId/sig.v mismatch", "sig", sig);
    }
    fields.push(toBeArray(v2));
    fields.push(toBeArray(sig.r));
    fields.push(toBeArray(sig.s));
    return encodeRlp(fields);
  }
  function _parseEipSignature(tx, fields, serialize) {
    let yParity;
    try {
      yParity = handleNumber(fields[0], "yParity");
      if (yParity !== 0 && yParity !== 1) {
        throw new Error("bad yParity");
      }
    } catch (error) {
      assertArgument(false, "invalid yParity", "yParity", fields[0]);
    }
    const r2 = zeroPadValue(fields[1], 32);
    const s2 = zeroPadValue(fields[2], 32);
    const signature = Signature.from({ r: r2, s: s2, yParity });
    tx.signature = signature;
  }
  function _parseEip1559(data) {
    const fields = decodeRlp(getBytes(data).slice(1));
    assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 12), "invalid field count for transaction type: 2", "data", hexlify(data));
    const maxPriorityFeePerGas = handleUint(fields[2], "maxPriorityFeePerGas");
    const maxFeePerGas = handleUint(fields[3], "maxFeePerGas");
    const tx = {
      type: 2,
      chainId: handleUint(fields[0], "chainId"),
      nonce: handleNumber(fields[1], "nonce"),
      maxPriorityFeePerGas,
      maxFeePerGas,
      gasPrice: null,
      gasLimit: handleUint(fields[4], "gasLimit"),
      to: handleAddress(fields[5]),
      value: handleUint(fields[6], "value"),
      data: hexlify(fields[7]),
      accessList: handleAccessList(fields[8], "accessList")
    };
    if (fields.length === 9) {
      return tx;
    }
    tx.hash = keccak256(data);
    _parseEipSignature(tx, fields.slice(9));
    return tx;
  }
  function _serializeEip1559(tx, sig) {
    const fields = [
      formatNumber(tx.chainId || 0, "chainId"),
      formatNumber(tx.nonce || 0, "nonce"),
      formatNumber(tx.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
      formatNumber(tx.maxFeePerGas || 0, "maxFeePerGas"),
      formatNumber(tx.gasLimit || 0, "gasLimit"),
      tx.to != null ? getAddress(tx.to) : "0x",
      formatNumber(tx.value || 0, "value"),
      tx.data || "0x",
      formatAccessList(tx.accessList || [])
    ];
    if (sig) {
      fields.push(formatNumber(sig.yParity, "yParity"));
      fields.push(toBeArray(sig.r));
      fields.push(toBeArray(sig.s));
    }
    return concat(["0x02", encodeRlp(fields)]);
  }
  function _parseEip2930(data) {
    const fields = decodeRlp(getBytes(data).slice(1));
    assertArgument(Array.isArray(fields) && (fields.length === 8 || fields.length === 11), "invalid field count for transaction type: 1", "data", hexlify(data));
    const tx = {
      type: 1,
      chainId: handleUint(fields[0], "chainId"),
      nonce: handleNumber(fields[1], "nonce"),
      gasPrice: handleUint(fields[2], "gasPrice"),
      gasLimit: handleUint(fields[3], "gasLimit"),
      to: handleAddress(fields[4]),
      value: handleUint(fields[5], "value"),
      data: hexlify(fields[6]),
      accessList: handleAccessList(fields[7], "accessList")
    };
    if (fields.length === 8) {
      return tx;
    }
    tx.hash = keccak256(data);
    _parseEipSignature(tx, fields.slice(8));
    return tx;
  }
  function _serializeEip2930(tx, sig) {
    const fields = [
      formatNumber(tx.chainId || 0, "chainId"),
      formatNumber(tx.nonce || 0, "nonce"),
      formatNumber(tx.gasPrice || 0, "gasPrice"),
      formatNumber(tx.gasLimit || 0, "gasLimit"),
      tx.to != null ? getAddress(tx.to) : "0x",
      formatNumber(tx.value || 0, "value"),
      tx.data || "0x",
      formatAccessList(tx.accessList || [])
    ];
    if (sig) {
      fields.push(formatNumber(sig.yParity, "recoveryParam"));
      fields.push(toBeArray(sig.r));
      fields.push(toBeArray(sig.s));
    }
    return concat(["0x01", encodeRlp(fields)]);
  }
  const _Transaction = class {
    constructor() {
      __privateAdd(this, _type, void 0);
      __privateAdd(this, _to, void 0);
      __privateAdd(this, _data3, void 0);
      __privateAdd(this, _nonce, void 0);
      __privateAdd(this, _gasLimit, void 0);
      __privateAdd(this, _gasPrice, void 0);
      __privateAdd(this, _maxPriorityFeePerGas, void 0);
      __privateAdd(this, _maxFeePerGas, void 0);
      __privateAdd(this, _value, void 0);
      __privateAdd(this, _chainId, void 0);
      __privateAdd(this, _sig, void 0);
      __privateAdd(this, _accessList, void 0);
      __privateSet(this, _type, null);
      __privateSet(this, _to, null);
      __privateSet(this, _nonce, 0);
      __privateSet(this, _gasLimit, BigInt(0));
      __privateSet(this, _gasPrice, null);
      __privateSet(this, _maxPriorityFeePerGas, null);
      __privateSet(this, _maxFeePerGas, null);
      __privateSet(this, _data3, "0x");
      __privateSet(this, _value, BigInt(0));
      __privateSet(this, _chainId, BigInt(0));
      __privateSet(this, _sig, null);
      __privateSet(this, _accessList, null);
    }
    get type() {
      return __privateGet(this, _type);
    }
    set type(value) {
      switch (value) {
        case null:
          __privateSet(this, _type, null);
          break;
        case 0:
        case "legacy":
          __privateSet(this, _type, 0);
          break;
        case 1:
        case "berlin":
        case "eip-2930":
          __privateSet(this, _type, 1);
          break;
        case 2:
        case "london":
        case "eip-1559":
          __privateSet(this, _type, 2);
          break;
        default:
          assertArgument(false, "unsupported transaction type", "type", value);
      }
    }
    get typeName() {
      switch (this.type) {
        case 0:
          return "legacy";
        case 1:
          return "eip-2930";
        case 2:
          return "eip-1559";
      }
      return null;
    }
    get to() {
      return __privateGet(this, _to);
    }
    set to(value) {
      __privateSet(this, _to, value == null ? null : getAddress(value));
    }
    get nonce() {
      return __privateGet(this, _nonce);
    }
    set nonce(value) {
      __privateSet(this, _nonce, getNumber(value, "value"));
    }
    get gasLimit() {
      return __privateGet(this, _gasLimit);
    }
    set gasLimit(value) {
      __privateSet(this, _gasLimit, getBigInt(value));
    }
    get gasPrice() {
      const value = __privateGet(this, _gasPrice);
      if (value == null && (this.type === 0 || this.type === 1)) {
        return BN_0$4;
      }
      return value;
    }
    set gasPrice(value) {
      __privateSet(this, _gasPrice, value == null ? null : getBigInt(value, "gasPrice"));
    }
    get maxPriorityFeePerGas() {
      const value = __privateGet(this, _maxPriorityFeePerGas);
      if (value == null) {
        if (this.type === 2) {
          return BN_0$4;
        }
        return null;
      }
      return value;
    }
    set maxPriorityFeePerGas(value) {
      __privateSet(this, _maxPriorityFeePerGas, value == null ? null : getBigInt(value, "maxPriorityFeePerGas"));
    }
    get maxFeePerGas() {
      const value = __privateGet(this, _maxFeePerGas);
      if (value == null) {
        if (this.type === 2) {
          return BN_0$4;
        }
        return null;
      }
      return value;
    }
    set maxFeePerGas(value) {
      __privateSet(this, _maxFeePerGas, value == null ? null : getBigInt(value, "maxFeePerGas"));
    }
    get data() {
      return __privateGet(this, _data3);
    }
    set data(value) {
      __privateSet(this, _data3, hexlify(value));
    }
    get value() {
      return __privateGet(this, _value);
    }
    set value(value) {
      __privateSet(this, _value, getBigInt(value, "value"));
    }
    get chainId() {
      return __privateGet(this, _chainId);
    }
    set chainId(value) {
      __privateSet(this, _chainId, getBigInt(value));
    }
    get signature() {
      return __privateGet(this, _sig) || null;
    }
    set signature(value) {
      __privateSet(this, _sig, value == null ? null : Signature.from(value));
    }
    get accessList() {
      const value = __privateGet(this, _accessList) || null;
      if (value == null) {
        if (this.type === 1 || this.type === 2) {
          return [];
        }
        return null;
      }
      return value;
    }
    set accessList(value) {
      __privateSet(this, _accessList, value == null ? null : accessListify(value));
    }
    get hash() {
      if (this.signature == null) {
        return null;
      }
      return keccak256(this.serialized);
    }
    get unsignedHash() {
      return keccak256(this.unsignedSerialized);
    }
    get from() {
      if (this.signature == null) {
        return null;
      }
      return recoverAddress(this.unsignedHash, this.signature);
    }
    get fromPublicKey() {
      if (this.signature == null) {
        return null;
      }
      return SigningKey.recoverPublicKey(this.unsignedHash, this.signature);
    }
    isSigned() {
      return this.signature != null;
    }
    get serialized() {
      assert$1(this.signature != null, "cannot serialize unsigned transaction; maybe you meant .unsignedSerialized", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
      switch (this.inferType()) {
        case 0:
          return _serializeLegacy(this, this.signature);
        case 1:
          return _serializeEip2930(this, this.signature);
        case 2:
          return _serializeEip1559(this, this.signature);
      }
      assert$1(false, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
    }
    get unsignedSerialized() {
      switch (this.inferType()) {
        case 0:
          return _serializeLegacy(this);
        case 1:
          return _serializeEip2930(this);
        case 2:
          return _serializeEip1559(this);
      }
      assert$1(false, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: ".unsignedSerialized" });
    }
    inferType() {
      return this.inferTypes().pop();
    }
    inferTypes() {
      const hasGasPrice = this.gasPrice != null;
      const hasFee = this.maxFeePerGas != null || this.maxPriorityFeePerGas != null;
      const hasAccessList = this.accessList != null;
      if (this.maxFeePerGas != null && this.maxPriorityFeePerGas != null) {
        assert$1(this.maxFeePerGas >= this.maxPriorityFeePerGas, "priorityFee cannot be more than maxFee", "BAD_DATA", { value: this });
      }
      assert$1(!hasFee || this.type !== 0 && this.type !== 1, "transaction type cannot have maxFeePerGas or maxPriorityFeePerGas", "BAD_DATA", { value: this });
      assert$1(this.type !== 0 || !hasAccessList, "legacy transaction cannot have accessList", "BAD_DATA", { value: this });
      const types = [];
      if (this.type != null) {
        types.push(this.type);
      } else {
        if (hasFee) {
          types.push(2);
        } else if (hasGasPrice) {
          types.push(1);
          if (!hasAccessList) {
            types.push(0);
          }
        } else if (hasAccessList) {
          types.push(1);
          types.push(2);
        } else {
          types.push(0);
          types.push(1);
          types.push(2);
        }
      }
      types.sort();
      return types;
    }
    isLegacy() {
      return this.type === 0;
    }
    isBerlin() {
      return this.type === 1;
    }
    isLondon() {
      return this.type === 2;
    }
    clone() {
      return _Transaction.from(this);
    }
    toJSON() {
      const s2 = (v2) => {
        if (v2 == null) {
          return null;
        }
        return v2.toString();
      };
      return {
        type: this.type,
        to: this.to,
        data: this.data,
        nonce: this.nonce,
        gasLimit: s2(this.gasLimit),
        gasPrice: s2(this.gasPrice),
        maxPriorityFeePerGas: s2(this.maxPriorityFeePerGas),
        maxFeePerGas: s2(this.maxFeePerGas),
        value: s2(this.value),
        chainId: s2(this.chainId),
        sig: this.signature ? this.signature.toJSON() : null,
        accessList: this.accessList
      };
    }
    static from(tx) {
      if (tx == null) {
        return new _Transaction();
      }
      if (typeof tx === "string") {
        const payload = getBytes(tx);
        if (payload[0] >= 127) {
          return _Transaction.from(_parseLegacy(payload));
        }
        switch (payload[0]) {
          case 1:
            return _Transaction.from(_parseEip2930(payload));
          case 2:
            return _Transaction.from(_parseEip1559(payload));
        }
        assert$1(false, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: "from" });
      }
      const result = new _Transaction();
      if (tx.type != null) {
        result.type = tx.type;
      }
      if (tx.to != null) {
        result.to = tx.to;
      }
      if (tx.nonce != null) {
        result.nonce = tx.nonce;
      }
      if (tx.gasLimit != null) {
        result.gasLimit = tx.gasLimit;
      }
      if (tx.gasPrice != null) {
        result.gasPrice = tx.gasPrice;
      }
      if (tx.maxPriorityFeePerGas != null) {
        result.maxPriorityFeePerGas = tx.maxPriorityFeePerGas;
      }
      if (tx.maxFeePerGas != null) {
        result.maxFeePerGas = tx.maxFeePerGas;
      }
      if (tx.data != null) {
        result.data = tx.data;
      }
      if (tx.value != null) {
        result.value = tx.value;
      }
      if (tx.chainId != null) {
        result.chainId = tx.chainId;
      }
      if (tx.signature != null) {
        result.signature = Signature.from(tx.signature);
      }
      if (tx.accessList != null) {
        result.accessList = tx.accessList;
      }
      if (tx.hash != null) {
        assertArgument(result.isSigned(), "unsigned transaction cannot define hash", "tx", tx);
        assertArgument(result.hash === tx.hash, "hash mismatch", "tx", tx);
      }
      if (tx.from != null) {
        assertArgument(result.isSigned(), "unsigned transaction cannot define from", "tx", tx);
        assertArgument(result.from.toLowerCase() === (tx.from || "").toLowerCase(), "from mismatch", "tx", tx);
      }
      return result;
    }
  };
  let Transaction = _Transaction;
  _type = new WeakMap();
  _to = new WeakMap();
  _data3 = new WeakMap();
  _nonce = new WeakMap();
  _gasLimit = new WeakMap();
  _gasPrice = new WeakMap();
  _maxPriorityFeePerGas = new WeakMap();
  _maxFeePerGas = new WeakMap();
  _value = new WeakMap();
  _chainId = new WeakMap();
  _sig = new WeakMap();
  _accessList = new WeakMap();
  function hashMessage(message) {
    if (typeof message === "string") {
      message = toUtf8Bytes(message);
    }
    return keccak256(concat([
      toUtf8Bytes(MessagePrefix),
      toUtf8Bytes(String(message.length)),
      message
    ]));
  }
  const padding = new Uint8Array(32);
  padding.fill(0);
  const BN__1 = BigInt(-1);
  const BN_0$3 = BigInt(0);
  const BN_1 = BigInt(1);
  const BN_MAX_UINT256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  function hexPadRight(value) {
    const bytes2 = getBytes(value);
    const padOffset = bytes2.length % 32;
    if (padOffset) {
      return concat([bytes2, padding.slice(padOffset)]);
    }
    return hexlify(bytes2);
  }
  const hexTrue = toBeHex(BN_1, 32);
  const hexFalse = toBeHex(BN_0$3, 32);
  const domainFieldTypes = {
    name: "string",
    version: "string",
    chainId: "uint256",
    verifyingContract: "address",
    salt: "bytes32"
  };
  const domainFieldNames = [
    "name",
    "version",
    "chainId",
    "verifyingContract",
    "salt"
  ];
  function checkString(key) {
    return function(value) {
      assertArgument(typeof value === "string", `invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);
      return value;
    };
  }
  const domainChecks = {
    name: checkString("name"),
    version: checkString("version"),
    chainId: function(value) {
      return getBigInt(value, "domain.chainId");
    },
    verifyingContract: function(value) {
      try {
        return getAddress(value).toLowerCase();
      } catch (error) {
      }
      assertArgument(false, `invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
    },
    salt: function(value) {
      const bytes2 = getBytes(value, "domain.salt");
      assertArgument(bytes2.length === 32, `invalid domain value "salt"`, "domain.salt", value);
      return hexlify(bytes2);
    }
  };
  function getBaseEncoder(type) {
    {
      const match = type.match(/^(u?)int(\d*)$/);
      if (match) {
        const signed2 = match[1] === "";
        const width = parseInt(match[2] || "256");
        assertArgument(width % 8 === 0 && width !== 0 && width <= 256 && (match[2] == null || match[2] === String(width)), "invalid numeric width", "type", type);
        const boundsUpper = mask(BN_MAX_UINT256, signed2 ? width - 1 : width);
        const boundsLower = signed2 ? (boundsUpper + BN_1) * BN__1 : BN_0$3;
        return function(_value2) {
          const value = getBigInt(_value2, "value");
          assertArgument(value >= boundsLower && value <= boundsUpper, `value out-of-bounds for ${type}`, "value", value);
          return toBeHex(toTwos(value, 256), 32);
        };
      }
    }
    {
      const match = type.match(/^bytes(\d+)$/);
      if (match) {
        const width = parseInt(match[1]);
        assertArgument(width !== 0 && width <= 32 && match[1] === String(width), "invalid bytes width", "type", type);
        return function(value) {
          const bytes2 = getBytes(value);
          assertArgument(bytes2.length === width, `invalid length for ${type}`, "value", value);
          return hexPadRight(value);
        };
      }
    }
    switch (type) {
      case "address":
        return function(value) {
          return zeroPadValue(getAddress(value), 32);
        };
      case "bool":
        return function(value) {
          return !value ? hexFalse : hexTrue;
        };
      case "bytes":
        return function(value) {
          return keccak256(value);
        };
      case "string":
        return function(value) {
          return id(value);
        };
    }
    return null;
  }
  function encodeType(name, fields) {
    return `${name}(${fields.map(({ name: name2, type }) => type + " " + name2).join(",")})`;
  }
  const _TypedDataEncoder = class {
    constructor(types) {
      __privateAdd(this, _getEncoder);
      __privateAdd(this, _types, void 0);
      __privateAdd(this, _fullTypes, void 0);
      __privateAdd(this, _encoderCache, void 0);
      __privateSet(this, _types, JSON.stringify(types));
      __privateSet(this, _fullTypes, /* @__PURE__ */ new Map());
      __privateSet(this, _encoderCache, /* @__PURE__ */ new Map());
      const links = /* @__PURE__ */ new Map();
      const parents = /* @__PURE__ */ new Map();
      const subtypes = /* @__PURE__ */ new Map();
      Object.keys(types).forEach((type) => {
        links.set(type, /* @__PURE__ */ new Set());
        parents.set(type, []);
        subtypes.set(type, /* @__PURE__ */ new Set());
      });
      for (const name in types) {
        const uniqueNames = /* @__PURE__ */ new Set();
        for (const field of types[name]) {
          assertArgument(!uniqueNames.has(field.name), `duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, "types", types);
          uniqueNames.add(field.name);
          const baseType = field.type.match(/^([^\x5b]*)(\x5b|$)/)[1] || null;
          assertArgument(baseType !== name, `circular type reference to ${JSON.stringify(baseType)}`, "types", types);
          const encoder = getBaseEncoder(baseType);
          if (encoder) {
            continue;
          }
          assertArgument(parents.has(baseType), `unknown type ${JSON.stringify(baseType)}`, "types", types);
          parents.get(baseType).push(name);
          links.get(name).add(baseType);
        }
      }
      const primaryTypes = Array.from(parents.keys()).filter((n2) => parents.get(n2).length === 0);
      assertArgument(primaryTypes.length !== 0, "missing primary type", "types", types);
      assertArgument(primaryTypes.length === 1, `ambiguous primary types or unused types: ${primaryTypes.map((t2) => JSON.stringify(t2)).join(", ")}`, "types", types);
      defineProperties(this, { primaryType: primaryTypes[0] });
      function checkCircular(type, found) {
        assertArgument(!found.has(type), `circular type reference to ${JSON.stringify(type)}`, "types", types);
        found.add(type);
        for (const child of links.get(type)) {
          if (!parents.has(child)) {
            continue;
          }
          checkCircular(child, found);
          for (const subtype of found) {
            subtypes.get(subtype).add(child);
          }
        }
        found.delete(type);
      }
      checkCircular(this.primaryType, /* @__PURE__ */ new Set());
      for (const [name, set] of subtypes) {
        const st2 = Array.from(set);
        st2.sort();
        __privateGet(this, _fullTypes).set(name, encodeType(name, types[name]) + st2.map((t2) => encodeType(t2, types[t2])).join(""));
      }
    }
    get types() {
      return JSON.parse(__privateGet(this, _types));
    }
    getEncoder(type) {
      let encoder = __privateGet(this, _encoderCache).get(type);
      if (!encoder) {
        encoder = __privateMethod(this, _getEncoder, getEncoder_fn).call(this, type);
        __privateGet(this, _encoderCache).set(type, encoder);
      }
      return encoder;
    }
    encodeType(name) {
      const result = __privateGet(this, _fullTypes).get(name);
      assertArgument(result, `unknown type: ${JSON.stringify(name)}`, "name", name);
      return result;
    }
    encodeData(type, value) {
      return this.getEncoder(type)(value);
    }
    hashStruct(name, value) {
      return keccak256(this.encodeData(name, value));
    }
    encode(value) {
      return this.encodeData(this.primaryType, value);
    }
    hash(value) {
      return this.hashStruct(this.primaryType, value);
    }
    _visit(type, value, callback) {
      {
        const encoder = getBaseEncoder(type);
        if (encoder) {
          return callback(type, value);
        }
      }
      const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
      if (match) {
        assertArgument(!match[3] || parseInt(match[3]) === value.length, `array length mismatch; expected length ${parseInt(match[3])}`, "value", value);
        return value.map((v2) => this._visit(match[1], v2, callback));
      }
      const fields = this.types[type];
      if (fields) {
        return fields.reduce((accum, { name, type: type2 }) => {
          accum[name] = this._visit(type2, value[name], callback);
          return accum;
        }, {});
      }
      assertArgument(false, `unknown type: ${type}`, "type", type);
    }
    visit(value, callback) {
      return this._visit(this.primaryType, value, callback);
    }
    static from(types) {
      return new _TypedDataEncoder(types);
    }
    static getPrimaryType(types) {
      return _TypedDataEncoder.from(types).primaryType;
    }
    static hashStruct(name, types, value) {
      return _TypedDataEncoder.from(types).hashStruct(name, value);
    }
    static hashDomain(domain) {
      const domainFields = [];
      for (const name in domain) {
        const type = domainFieldTypes[name];
        assertArgument(type, `invalid typed-data domain key: ${JSON.stringify(name)}`, "domain", domain);
        domainFields.push({ name, type });
      }
      domainFields.sort((a2, b2) => {
        return domainFieldNames.indexOf(a2.name) - domainFieldNames.indexOf(b2.name);
      });
      return _TypedDataEncoder.hashStruct("EIP712Domain", { EIP712Domain: domainFields }, domain);
    }
    static encode(domain, types, value) {
      return concat([
        "0x1901",
        _TypedDataEncoder.hashDomain(domain),
        _TypedDataEncoder.from(types).hash(value)
      ]);
    }
    static hash(domain, types, value) {
      return keccak256(_TypedDataEncoder.encode(domain, types, value));
    }
    static async resolveNames(domain, types, value, resolveName) {
      domain = Object.assign({}, domain);
      const ensCache = {};
      if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {
        ensCache[domain.verifyingContract] = "0x";
      }
      const encoder = _TypedDataEncoder.from(types);
      encoder.visit(value, (type, value2) => {
        if (type === "address" && !isHexString(value2, 20)) {
          ensCache[value2] = "0x";
        }
        return value2;
      });
      for (const name in ensCache) {
        ensCache[name] = await resolveName(name);
      }
      if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
        domain.verifyingContract = ensCache[domain.verifyingContract];
      }
      value = encoder.visit(value, (type, value2) => {
        if (type === "address" && ensCache[value2]) {
          return ensCache[value2];
        }
        return value2;
      });
      return { domain, value };
    }
    static getPayload(domain, types, value) {
      _TypedDataEncoder.hashDomain(domain);
      const domainValues = {};
      const domainTypes = [];
      domainFieldNames.forEach((name) => {
        const value2 = domain[name];
        if (value2 == null) {
          return;
        }
        domainValues[name] = domainChecks[name](value2);
        domainTypes.push({ name, type: domainFieldTypes[name] });
      });
      const encoder = _TypedDataEncoder.from(types);
      const typesWithDomain = Object.assign({}, types);
      assertArgument(typesWithDomain.EIP712Domain == null, "types must not contain EIP712Domain type", "types.EIP712Domain", types);
      typesWithDomain.EIP712Domain = domainTypes;
      encoder.encode(value);
      return {
        types: typesWithDomain,
        domain: domainValues,
        primaryType: encoder.primaryType,
        message: encoder.visit(value, (type, value2) => {
          if (type.match(/^bytes(\d*)/)) {
            return hexlify(getBytes(value2));
          }
          if (type.match(/^u?int/)) {
            return getBigInt(value2).toString();
          }
          switch (type) {
            case "address":
              return value2.toLowerCase();
            case "bool":
              return !!value2;
            case "string":
              assertArgument(typeof value2 === "string", "invalid string", "value", value2);
              return value2;
          }
          assertArgument(false, "unsupported type", "type", type);
        })
      };
    }
  };
  let TypedDataEncoder = _TypedDataEncoder;
  _types = new WeakMap();
  _fullTypes = new WeakMap();
  _encoderCache = new WeakMap();
  _getEncoder = new WeakSet();
  getEncoder_fn = function(type) {
    {
      const encoder = getBaseEncoder(type);
      if (encoder) {
        return encoder;
      }
    }
    const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
    if (match) {
      const subtype = match[1];
      const subEncoder = this.getEncoder(subtype);
      return (value) => {
        assertArgument(!match[3] || parseInt(match[3]) === value.length, `array length mismatch; expected length ${parseInt(match[3])}`, "value", value);
        let result = value.map(subEncoder);
        if (__privateGet(this, _fullTypes).has(subtype)) {
          result = result.map(keccak256);
        }
        return keccak256(concat(result));
      };
    }
    const fields = this.types[type];
    if (fields) {
      const encodedType = id(__privateGet(this, _fullTypes).get(type));
      return (value) => {
        const values = fields.map(({ name, type: type2 }) => {
          const result = this.getEncoder(type2)(value[name]);
          if (__privateGet(this, _fullTypes).has(type2)) {
            return keccak256(result);
          }
          return result;
        });
        values.unshift(encodedType);
        return concat(values);
      };
    }
    assertArgument(false, `unknown type: ${type}`, "type", type);
  };
  function setify(items) {
    const result = /* @__PURE__ */ new Set();
    items.forEach((k2) => result.add(k2));
    return Object.freeze(result);
  }
  const _kwVisib = "constant external internal payable private public pure view";
  const KwVisib = setify(_kwVisib.split(" "));
  const _kwTypes = "constructor error event fallback function receive struct";
  const KwTypes = setify(_kwTypes.split(" "));
  const _kwModifiers = "calldata memory storage payable indexed";
  const KwModifiers = setify(_kwModifiers.split(" "));
  const _kwOther = "tuple returns";
  const _keywords = [_kwTypes, _kwModifiers, _kwOther, _kwVisib].join(" ");
  const Keywords = setify(_keywords.split(" "));
  const SimpleTokens = {
    "(": "OPEN_PAREN",
    ")": "CLOSE_PAREN",
    "[": "OPEN_BRACKET",
    "]": "CLOSE_BRACKET",
    ",": "COMMA",
    "@": "AT"
  };
  const regexWhitespacePrefix = new RegExp("^(\\s*)");
  const regexNumberPrefix = new RegExp("^([0-9]+)");
  const regexIdPrefix = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)");
  const regexId = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)$");
  const regexType = new RegExp("^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$");
  const _TokenString = class {
    constructor(tokens) {
      __privateAdd(this, _subTokenString);
      __privateAdd(this, _offset2, void 0);
      __privateAdd(this, _tokens, void 0);
      __privateSet(this, _offset2, 0);
      __privateSet(this, _tokens, tokens.slice());
    }
    get offset() {
      return __privateGet(this, _offset2);
    }
    get length() {
      return __privateGet(this, _tokens).length - __privateGet(this, _offset2);
    }
    clone() {
      return new _TokenString(__privateGet(this, _tokens));
    }
    reset() {
      __privateSet(this, _offset2, 0);
    }
    popKeyword(allowed) {
      const top = this.peek();
      if (top.type !== "KEYWORD" || !allowed.has(top.text)) {
        throw new Error(`expected keyword ${top.text}`);
      }
      return this.pop().text;
    }
    popType(type) {
      if (this.peek().type !== type) {
        throw new Error(`expected ${type}; got ${JSON.stringify(this.peek())}`);
      }
      return this.pop().text;
    }
    popParen() {
      const top = this.peek();
      if (top.type !== "OPEN_PAREN") {
        throw new Error("bad start");
      }
      const result = __privateMethod(this, _subTokenString, subTokenString_fn).call(this, __privateGet(this, _offset2) + 1, top.match + 1);
      __privateSet(this, _offset2, top.match + 1);
      return result;
    }
    popParams() {
      const top = this.peek();
      if (top.type !== "OPEN_PAREN") {
        throw new Error("bad start");
      }
      const result = [];
      while (__privateGet(this, _offset2) < top.match - 1) {
        const link = this.peek().linkNext;
        result.push(__privateMethod(this, _subTokenString, subTokenString_fn).call(this, __privateGet(this, _offset2) + 1, link));
        __privateSet(this, _offset2, link);
      }
      __privateSet(this, _offset2, top.match + 1);
      return result;
    }
    peek() {
      if (__privateGet(this, _offset2) >= __privateGet(this, _tokens).length) {
        throw new Error("out-of-bounds");
      }
      return __privateGet(this, _tokens)[__privateGet(this, _offset2)];
    }
    peekKeyword(allowed) {
      const top = this.peekType("KEYWORD");
      return top != null && allowed.has(top) ? top : null;
    }
    peekType(type) {
      if (this.length === 0) {
        return null;
      }
      const top = this.peek();
      return top.type === type ? top.text : null;
    }
    pop() {
      const result = this.peek();
      __privateWrapper(this, _offset2)._++;
      return result;
    }
    toString() {
      const tokens = [];
      for (let i2 = __privateGet(this, _offset2); i2 < __privateGet(this, _tokens).length; i2++) {
        const token = __privateGet(this, _tokens)[i2];
        tokens.push(`${token.type}:${token.text}`);
      }
      return `<TokenString ${tokens.join(" ")}>`;
    }
  };
  let TokenString = _TokenString;
  _offset2 = new WeakMap();
  _tokens = new WeakMap();
  _subTokenString = new WeakSet();
  subTokenString_fn = function(from = 0, to = 0) {
    return new _TokenString(__privateGet(this, _tokens).slice(from, to).map((t2) => {
      return Object.freeze(Object.assign({}, t2, {
        match: t2.match - from,
        linkBack: t2.linkBack - from,
        linkNext: t2.linkNext - from
      }));
    }));
  };
  function lex(text) {
    const tokens = [];
    const throwError2 = (message) => {
      const token = offset < text.length ? JSON.stringify(text[offset]) : "$EOI";
      throw new Error(`invalid token ${token} at ${offset}: ${message}`);
    };
    let brackets = [];
    let commas = [];
    let offset = 0;
    while (offset < text.length) {
      let cur = text.substring(offset);
      let match = cur.match(regexWhitespacePrefix);
      if (match) {
        offset += match[1].length;
        cur = text.substring(offset);
      }
      const token = { depth: brackets.length, linkBack: -1, linkNext: -1, match: -1, type: "", text: "", offset, value: -1 };
      tokens.push(token);
      let type = SimpleTokens[cur[0]] || "";
      if (type) {
        token.type = type;
        token.text = cur[0];
        offset++;
        if (type === "OPEN_PAREN") {
          brackets.push(tokens.length - 1);
          commas.push(tokens.length - 1);
        } else if (type == "CLOSE_PAREN") {
          if (brackets.length === 0) {
            throwError2("no matching open bracket");
          }
          token.match = brackets.pop();
          tokens[token.match].match = tokens.length - 1;
          token.depth--;
          token.linkBack = commas.pop();
          tokens[token.linkBack].linkNext = tokens.length - 1;
        } else if (type === "COMMA") {
          token.linkBack = commas.pop();
          tokens[token.linkBack].linkNext = tokens.length - 1;
          commas.push(tokens.length - 1);
        } else if (type === "OPEN_BRACKET") {
          token.type = "BRACKET";
        } else if (type === "CLOSE_BRACKET") {
          let suffix = tokens.pop().text;
          if (tokens.length > 0 && tokens[tokens.length - 1].type === "NUMBER") {
            const value = tokens.pop().text;
            suffix = value + suffix;
            tokens[tokens.length - 1].value = getNumber(value);
          }
          if (tokens.length === 0 || tokens[tokens.length - 1].type !== "BRACKET") {
            throw new Error("missing opening bracket");
          }
          tokens[tokens.length - 1].text += suffix;
        }
        continue;
      }
      match = cur.match(regexIdPrefix);
      if (match) {
        token.text = match[1];
        offset += token.text.length;
        if (Keywords.has(token.text)) {
          token.type = "KEYWORD";
          continue;
        }
        if (token.text.match(regexType)) {
          token.type = "TYPE";
          continue;
        }
        token.type = "ID";
        continue;
      }
      match = cur.match(regexNumberPrefix);
      if (match) {
        token.text = match[1];
        token.type = "NUMBER";
        offset += token.text.length;
        continue;
      }
      throw new Error(`unexpected token ${JSON.stringify(cur[0])} at position ${offset}`);
    }
    return new TokenString(tokens.map((t2) => Object.freeze(t2)));
  }
  function allowSingle(set, allowed) {
    let included = [];
    for (const key in allowed.keys()) {
      if (set.has(key)) {
        included.push(key);
      }
    }
    if (included.length > 1) {
      throw new Error(`conflicting types: ${included.join(", ")}`);
    }
  }
  function consumeName(type, tokens) {
    if (tokens.peekKeyword(KwTypes)) {
      const keyword = tokens.pop().text;
      if (keyword !== type) {
        throw new Error(`expected ${type}, got ${keyword}`);
      }
    }
    return tokens.popType("ID");
  }
  function consumeKeywords(tokens, allowed) {
    const keywords = /* @__PURE__ */ new Set();
    while (true) {
      const keyword = tokens.peekType("KEYWORD");
      if (keyword == null || allowed && !allowed.has(keyword)) {
        break;
      }
      tokens.pop();
      if (keywords.has(keyword)) {
        throw new Error(`duplicate keywords: ${JSON.stringify(keyword)}`);
      }
      keywords.add(keyword);
    }
    return Object.freeze(keywords);
  }
  function consumeMutability(tokens) {
    let modifiers = consumeKeywords(tokens, KwVisib);
    allowSingle(modifiers, setify("constant payable nonpayable".split(" ")));
    allowSingle(modifiers, setify("pure view payable nonpayable".split(" ")));
    if (modifiers.has("view")) {
      return "view";
    }
    if (modifiers.has("pure")) {
      return "pure";
    }
    if (modifiers.has("payable")) {
      return "payable";
    }
    if (modifiers.has("nonpayable")) {
      return "nonpayable";
    }
    if (modifiers.has("constant")) {
      return "view";
    }
    return "nonpayable";
  }
  function consumeParams(tokens, allowIndexed) {
    return tokens.popParams().map((t2) => ParamType.from(t2, allowIndexed));
  }
  function consumeGas(tokens) {
    if (tokens.peekType("AT")) {
      tokens.pop();
      if (tokens.peekType("NUMBER")) {
        return getBigInt(tokens.pop().text);
      }
      throw new Error("invalid gas");
    }
    return null;
  }
  function consumeEoi(tokens) {
    if (tokens.length) {
      throw new Error(`unexpected tokens: ${tokens.toString()}`);
    }
  }
  const regexArrayType = new RegExp(/^(.*)\[([0-9]*)\]$/);
  function verifyBasicType(type) {
    const match = type.match(regexType);
    assertArgument(match, "invalid type", "type", type);
    if (type === "uint") {
      return "uint256";
    }
    if (type === "int") {
      return "int256";
    }
    if (match[2]) {
      const length = parseInt(match[2]);
      assertArgument(length !== 0 && length <= 32, "invalid bytes length", "type", type);
    } else if (match[3]) {
      const size = parseInt(match[3]);
      assertArgument(size !== 0 && size <= 256 && size % 8 === 0, "invalid numeric width", "type", type);
    }
    return type;
  }
  const _guard$2 = {};
  const internal$1 = Symbol.for("_ethers_internal");
  const ParamTypeInternal = "_ParamTypeInternal";
  const ErrorFragmentInternal = "_ErrorInternal";
  const EventFragmentInternal = "_EventInternal";
  const ConstructorFragmentInternal = "_ConstructorInternal";
  const FallbackFragmentInternal = "_FallbackInternal";
  const FunctionFragmentInternal = "_FunctionInternal";
  const StructFragmentInternal = "_StructInternal";
  const _ParamType = class {
    constructor(guard, name, type, baseType, indexed, components, arrayLength, arrayChildren) {
      __privateAdd(this, _walkAsync);
      assertPrivate(guard, _guard$2, "ParamType");
      Object.defineProperty(this, internal$1, { value: ParamTypeInternal });
      if (components) {
        components = Object.freeze(components.slice());
      }
      if (baseType === "array") {
        if (arrayLength == null || arrayChildren == null) {
          throw new Error("");
        }
      } else if (arrayLength != null || arrayChildren != null) {
        throw new Error("");
      }
      if (baseType === "tuple") {
        if (components == null) {
          throw new Error("");
        }
      } else if (components != null) {
        throw new Error("");
      }
      defineProperties(this, {
        name,
        type,
        baseType,
        indexed,
        components,
        arrayLength,
        arrayChildren
      });
    }
    format(format2) {
      if (format2 == null) {
        format2 = "sighash";
      }
      if (format2 === "json") {
        let result2 = {
          type: this.baseType === "tuple" ? "tuple" : this.type,
          name: this.name || void 0
        };
        if (typeof this.indexed === "boolean") {
          result2.indexed = this.indexed;
        }
        if (this.isTuple()) {
          result2.components = this.components.map((c2) => JSON.parse(c2.format(format2)));
        }
        return JSON.stringify(result2);
      }
      let result = "";
      if (this.isArray()) {
        result += this.arrayChildren.format(format2);
        result += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`;
      } else {
        if (this.isTuple()) {
          if (format2 !== "sighash") {
            result += this.type;
          }
          result += "(" + this.components.map((comp) => comp.format(format2)).join(format2 === "full" ? ", " : ",") + ")";
        } else {
          result += this.type;
        }
      }
      if (format2 !== "sighash") {
        if (this.indexed === true) {
          result += " indexed";
        }
        if (format2 === "full" && this.name) {
          result += " " + this.name;
        }
      }
      return result;
    }
    isArray() {
      return this.baseType === "array";
    }
    isTuple() {
      return this.baseType === "tuple";
    }
    isIndexable() {
      return this.indexed != null;
    }
    walk(value, process2) {
      if (this.isArray()) {
        if (!Array.isArray(value)) {
          throw new Error("invlaid array value");
        }
        if (this.arrayLength !== -1 && value.length !== this.arrayLength) {
          throw new Error("array is wrong length");
        }
        const _this = this;
        return value.map((v2) => _this.arrayChildren.walk(v2, process2));
      }
      if (this.isTuple()) {
        if (!Array.isArray(value)) {
          throw new Error("invlaid tuple value");
        }
        if (value.length !== this.components.length) {
          throw new Error("array is wrong length");
        }
        const _this = this;
        return value.map((v2, i2) => _this.components[i2].walk(v2, process2));
      }
      return process2(this.type, value);
    }
    async walkAsync(value, process2) {
      const promises = [];
      const result = [value];
      __privateMethod(this, _walkAsync, walkAsync_fn).call(this, promises, value, process2, (value2) => {
        result[0] = value2;
      });
      if (promises.length) {
        await Promise.all(promises);
      }
      return result[0];
    }
    static from(obj, allowIndexed) {
      if (_ParamType.isParamType(obj)) {
        return obj;
      }
      if (typeof obj === "string") {
        return _ParamType.from(lex(obj), allowIndexed);
      } else if (obj instanceof TokenString) {
        let type2 = "", baseType = "";
        let comps = null;
        if (consumeKeywords(obj, setify(["tuple"])).has("tuple") || obj.peekType("OPEN_PAREN")) {
          baseType = "tuple";
          comps = obj.popParams().map((t2) => _ParamType.from(t2));
          type2 = `tuple(${comps.map((c2) => c2.format()).join(",")})`;
        } else {
          type2 = verifyBasicType(obj.popType("TYPE"));
          baseType = type2;
        }
        let arrayChildren = null;
        let arrayLength = null;
        while (obj.length && obj.peekType("BRACKET")) {
          const bracket = obj.pop();
          arrayChildren = new _ParamType(_guard$2, "", type2, baseType, null, comps, arrayLength, arrayChildren);
          arrayLength = bracket.value;
          type2 += bracket.text;
          baseType = "array";
          comps = null;
        }
        let indexed2 = null;
        const keywords = consumeKeywords(obj, KwModifiers);
        if (keywords.has("indexed")) {
          if (!allowIndexed) {
            throw new Error("");
          }
          indexed2 = true;
        }
        const name2 = obj.peekType("ID") ? obj.pop().text : "";
        if (obj.length) {
          throw new Error("leftover tokens");
        }
        return new _ParamType(_guard$2, name2, type2, baseType, indexed2, comps, arrayLength, arrayChildren);
      }
      const name = obj.name;
      assertArgument(!name || typeof name === "string" && name.match(regexId), "invalid name", "obj.name", name);
      let indexed = obj.indexed;
      if (indexed != null) {
        assertArgument(allowIndexed, "parameter cannot be indexed", "obj.indexed", obj.indexed);
        indexed = !!indexed;
      }
      let type = obj.type;
      let arrayMatch = type.match(regexArrayType);
      if (arrayMatch) {
        const arrayLength = parseInt(arrayMatch[2] || "-1");
        const arrayChildren = _ParamType.from({
          type: arrayMatch[1],
          components: obj.components
        });
        return new _ParamType(_guard$2, name || "", type, "array", indexed, null, arrayLength, arrayChildren);
      }
      if (type === "tuple" || type.substring(0, 5) === "tuple(" || type[0] === "(") {
        const comps = obj.components != null ? obj.components.map((c2) => _ParamType.from(c2)) : null;
        const tuple = new _ParamType(_guard$2, name || "", type, "tuple", indexed, comps, null, null);
        return tuple;
      }
      type = verifyBasicType(obj.type);
      return new _ParamType(_guard$2, name || "", type, type, indexed, null, null, null);
    }
    static isParamType(value) {
      return value && value[internal$1] === ParamTypeInternal;
    }
  };
  let ParamType = _ParamType;
  _walkAsync = new WeakSet();
  walkAsync_fn = function(promises, value, process2, setValue) {
    if (this.isArray()) {
      if (!Array.isArray(value)) {
        throw new Error("invlaid array value");
      }
      if (this.arrayLength !== -1 && value.length !== this.arrayLength) {
        throw new Error("array is wrong length");
      }
      const childType = this.arrayChildren;
      const result2 = value.slice();
      result2.forEach((value2, index) => {
        var _a;
        __privateMethod(_a = childType, _walkAsync, walkAsync_fn).call(_a, promises, value2, process2, (value3) => {
          result2[index] = value3;
        });
      });
      setValue(result2);
      return;
    }
    if (this.isTuple()) {
      const components = this.components;
      let result2;
      if (Array.isArray(value)) {
        result2 = value.slice();
      } else {
        if (value == null || typeof value !== "object") {
          throw new Error("invlaid tuple value");
        }
        result2 = components.map((param) => {
          if (!param.name) {
            throw new Error("cannot use object value with unnamed components");
          }
          if (!(param.name in value)) {
            throw new Error(`missing value for component ${param.name}`);
          }
          return value[param.name];
        });
      }
      if (result2.length !== this.components.length) {
        throw new Error("array is wrong length");
      }
      result2.forEach((value2, index) => {
        var _a;
        __privateMethod(_a = components[index], _walkAsync, walkAsync_fn).call(_a, promises, value2, process2, (value3) => {
          result2[index] = value3;
        });
      });
      setValue(result2);
      return;
    }
    const result = process2(this.type, value);
    if (result.then) {
      promises.push(async function() {
        setValue(await result);
      }());
    } else {
      setValue(result);
    }
  };
  class Fragment {
    constructor(guard, type, inputs) {
      assertPrivate(guard, _guard$2, "Fragment");
      inputs = Object.freeze(inputs.slice());
      defineProperties(this, { type, inputs });
    }
    static from(obj) {
      if (typeof obj === "string") {
        try {
          Fragment.from(JSON.parse(obj));
        } catch (e) {
        }
        return Fragment.from(lex(obj));
      }
      if (obj instanceof TokenString) {
        const type = obj.peekKeyword(KwTypes);
        switch (type) {
          case "constructor":
            return ConstructorFragment.from(obj);
          case "error":
            return ErrorFragment.from(obj);
          case "event":
            return EventFragment.from(obj);
          case "fallback":
          case "receive":
            return FallbackFragment.from(obj);
          case "function":
            return FunctionFragment.from(obj);
          case "struct":
            return StructFragment.from(obj);
        }
      } else if (typeof obj === "object") {
        switch (obj.type) {
          case "constructor":
            return ConstructorFragment.from(obj);
          case "error":
            return ErrorFragment.from(obj);
          case "event":
            return EventFragment.from(obj);
          case "fallback":
          case "receive":
            return FallbackFragment.from(obj);
          case "function":
            return FunctionFragment.from(obj);
          case "struct":
            return StructFragment.from(obj);
        }
        assert$1(false, `unsupported type: ${obj.type}`, "UNSUPPORTED_OPERATION", {
          operation: "Fragment.from"
        });
      }
      assertArgument(false, "unsupported frgament object", "obj", obj);
    }
    static isConstructor(value) {
      return ConstructorFragment.isFragment(value);
    }
    static isError(value) {
      return ErrorFragment.isFragment(value);
    }
    static isEvent(value) {
      return EventFragment.isFragment(value);
    }
    static isFunction(value) {
      return FunctionFragment.isFragment(value);
    }
    static isStruct(value) {
      return StructFragment.isFragment(value);
    }
  }
  class NamedFragment extends Fragment {
    constructor(guard, type, name, inputs) {
      super(guard, type, inputs);
      assertArgument(typeof name === "string" && name.match(regexId), "invalid identifier", "name", name);
      inputs = Object.freeze(inputs.slice());
      defineProperties(this, { name });
    }
  }
  function joinParams(format2, params) {
    return "(" + params.map((p2) => p2.format(format2)).join(format2 === "full" ? ", " : ",") + ")";
  }
  class ErrorFragment extends NamedFragment {
    constructor(guard, name, inputs) {
      super(guard, "error", name, inputs);
      Object.defineProperty(this, internal$1, { value: ErrorFragmentInternal });
    }
    get selector() {
      return id(this.format("sighash")).substring(0, 10);
    }
    format(format2) {
      if (format2 == null) {
        format2 = "sighash";
      }
      if (format2 === "json") {
        return JSON.stringify({
          type: "error",
          name: this.name,
          inputs: this.inputs.map((input) => JSON.parse(input.format(format2)))
        });
      }
      const result = [];
      if (format2 !== "sighash") {
        result.push("error");
      }
      result.push(this.name + joinParams(format2, this.inputs));
      return result.join(" ");
    }
    static from(obj) {
      if (ErrorFragment.isFragment(obj)) {
        return obj;
      }
      if (typeof obj === "string") {
        return ErrorFragment.from(lex(obj));
      } else if (obj instanceof TokenString) {
        const name = consumeName("error", obj);
        const inputs = consumeParams(obj);
        consumeEoi(obj);
        return new ErrorFragment(_guard$2, name, inputs);
      }
      return new ErrorFragment(_guard$2, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);
    }
    static isFragment(value) {
      return value && value[internal$1] === ErrorFragmentInternal;
    }
  }
  class EventFragment extends NamedFragment {
    constructor(guard, name, inputs, anonymous) {
      super(guard, "event", name, inputs);
      Object.defineProperty(this, internal$1, { value: EventFragmentInternal });
      defineProperties(this, { anonymous });
    }
    get topicHash() {
      return id(this.format("sighash"));
    }
    format(format2) {
      if (format2 == null) {
        format2 = "sighash";
      }
      if (format2 === "json") {
        return JSON.stringify({
          type: "event",
          anonymous: this.anonymous,
          name: this.name,
          inputs: this.inputs.map((i2) => JSON.parse(i2.format(format2)))
        });
      }
      const result = [];
      if (format2 !== "sighash") {
        result.push("event");
      }
      result.push(this.name + joinParams(format2, this.inputs));
      if (format2 !== "sighash" && this.anonymous) {
        result.push("anonymous");
      }
      return result.join(" ");
    }
    static getTopicHash(name, params) {
      params = (params || []).map((p2) => ParamType.from(p2));
      const fragment = new EventFragment(_guard$2, name, params, false);
      return fragment.topicHash;
    }
    static from(obj) {
      if (EventFragment.isFragment(obj)) {
        return obj;
      }
      if (typeof obj === "string") {
        return EventFragment.from(lex(obj));
      } else if (obj instanceof TokenString) {
        const name = consumeName("event", obj);
        const inputs = consumeParams(obj, true);
        const anonymous = !!consumeKeywords(obj, setify(["anonymous"])).has("anonymous");
        consumeEoi(obj);
        return new EventFragment(_guard$2, name, inputs, anonymous);
      }
      return new EventFragment(_guard$2, obj.name, obj.inputs ? obj.inputs.map((p2) => ParamType.from(p2, true)) : [], !!obj.anonymous);
    }
    static isFragment(value) {
      return value && value[internal$1] === EventFragmentInternal;
    }
  }
  class ConstructorFragment extends Fragment {
    constructor(guard, type, inputs, payable, gas) {
      super(guard, type, inputs);
      Object.defineProperty(this, internal$1, { value: ConstructorFragmentInternal });
      defineProperties(this, { payable, gas });
    }
    format(format2) {
      assert$1(format2 != null && format2 !== "sighash", "cannot format a constructor for sighash", "UNSUPPORTED_OPERATION", { operation: "format(sighash)" });
      if (format2 === "json") {
        return JSON.stringify({
          type: "constructor",
          stateMutability: this.payable ? "payable" : "undefined",
          payable: this.payable,
          gas: this.gas != null ? this.gas : void 0,
          inputs: this.inputs.map((i2) => JSON.parse(i2.format(format2)))
        });
      }
      const result = [`constructor${joinParams(format2, this.inputs)}`];
      result.push(this.payable ? "payable" : "nonpayable");
      if (this.gas != null) {
        result.push(`@${this.gas.toString()}`);
      }
      return result.join(" ");
    }
    static from(obj) {
      if (ConstructorFragment.isFragment(obj)) {
        return obj;
      }
      if (typeof obj === "string") {
        return ConstructorFragment.from(lex(obj));
      } else if (obj instanceof TokenString) {
        consumeKeywords(obj, setify(["constructor"]));
        const inputs = consumeParams(obj);
        const payable = !!consumeKeywords(obj, setify(["payable"])).has("payable");
        const gas = consumeGas(obj);
        consumeEoi(obj);
        return new ConstructorFragment(_guard$2, "constructor", inputs, payable, gas);
      }
      return new ConstructorFragment(_guard$2, "constructor", obj.inputs ? obj.inputs.map(ParamType.from) : [], !!obj.payable, obj.gas != null ? obj.gas : null);
    }
    static isFragment(value) {
      return value && value[internal$1] === ConstructorFragmentInternal;
    }
  }
  class FallbackFragment extends Fragment {
    constructor(guard, inputs, payable) {
      super(guard, "fallback", inputs);
      Object.defineProperty(this, internal$1, { value: FallbackFragmentInternal });
      defineProperties(this, { payable });
    }
    format(format2) {
      const type = this.inputs.length === 0 ? "receive" : "fallback";
      if (format2 === "json") {
        const stateMutability = this.payable ? "payable" : "nonpayable";
        return JSON.stringify({ type, stateMutability });
      }
      return `${type}()${this.payable ? " payable" : ""}`;
    }
    static from(obj) {
      if (FallbackFragment.isFragment(obj)) {
        return obj;
      }
      if (typeof obj === "string") {
        return FallbackFragment.from(lex(obj));
      } else if (obj instanceof TokenString) {
        const errorObj = obj.toString();
        const topIsValid = obj.peekKeyword(setify(["fallback", "receive"]));
        assertArgument(topIsValid, "type must be fallback or receive", "obj", errorObj);
        const type = obj.popKeyword(setify(["fallback", "receive"]));
        if (type === "receive") {
          const inputs2 = consumeParams(obj);
          assertArgument(inputs2.length === 0, `receive cannot have arguments`, "obj.inputs", inputs2);
          consumeKeywords(obj, setify(["payable"]));
          consumeEoi(obj);
          return new FallbackFragment(_guard$2, [], true);
        }
        let inputs = consumeParams(obj);
        if (inputs.length) {
          assertArgument(inputs.length === 1 && inputs[0].type === "bytes", "invalid fallback inputs", "obj.inputs", inputs.map((i2) => i2.format("minimal")).join(", "));
        } else {
          inputs = [ParamType.from("bytes")];
        }
        const mutability = consumeMutability(obj);
        assertArgument(mutability === "nonpayable" || mutability === "payable", "fallback cannot be constants", "obj.stateMutability", mutability);
        if (consumeKeywords(obj, setify(["returns"])).has("returns")) {
          const outputs = consumeParams(obj);
          assertArgument(outputs.length === 1 && outputs[0].type === "bytes", "invalid fallback outputs", "obj.outputs", outputs.map((i2) => i2.format("minimal")).join(", "));
        }
        consumeEoi(obj);
        return new FallbackFragment(_guard$2, inputs, mutability === "payable");
      }
      if (obj.type === "receive") {
        return new FallbackFragment(_guard$2, [], true);
      }
      if (obj.type === "fallback") {
        const inputs = [ParamType.from("bytes")];
        const payable = obj.stateMutability === "payable";
        return new FallbackFragment(_guard$2, inputs, payable);
      }
      assertArgument(false, "invalid fallback description", "obj", obj);
    }
    static isFragment(value) {
      return value && value[internal$1] === FallbackFragmentInternal;
    }
  }
  class FunctionFragment extends NamedFragment {
    constructor(guard, name, stateMutability, inputs, outputs, gas) {
      super(guard, "function", name, inputs);
      Object.defineProperty(this, internal$1, { value: FunctionFragmentInternal });
      outputs = Object.freeze(outputs.slice());
      const constant = stateMutability === "view" || stateMutability === "pure";
      const payable = stateMutability === "payable";
      defineProperties(this, { constant, gas, outputs, payable, stateMutability });
    }
    get selector() {
      return id(this.format("sighash")).substring(0, 10);
    }
    format(format2) {
      if (format2 == null) {
        format2 = "sighash";
      }
      if (format2 === "json") {
        return JSON.stringify({
          type: "function",
          name: this.name,
          constant: this.constant,
          stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
          payable: this.payable,
          gas: this.gas != null ? this.gas : void 0,
          inputs: this.inputs.map((i2) => JSON.parse(i2.format(format2))),
          outputs: this.outputs.map((o2) => JSON.parse(o2.format(format2)))
        });
      }
      const result = [];
      if (format2 !== "sighash") {
        result.push("function");
      }
      result.push(this.name + joinParams(format2, this.inputs));
      if (format2 !== "sighash") {
        if (this.stateMutability !== "nonpayable") {
          result.push(this.stateMutability);
        }
        if (this.outputs && this.outputs.length) {
          result.push("returns");
          result.push(joinParams(format2, this.outputs));
        }
        if (this.gas != null) {
          result.push(`@${this.gas.toString()}`);
        }
      }
      return result.join(" ");
    }
    static getSelector(name, params) {
      params = (params || []).map((p2) => ParamType.from(p2));
      const fragment = new FunctionFragment(_guard$2, name, "view", params, [], null);
      return fragment.selector;
    }
    static from(obj) {
      if (FunctionFragment.isFragment(obj)) {
        return obj;
      }
      if (typeof obj === "string") {
        return FunctionFragment.from(lex(obj));
      } else if (obj instanceof TokenString) {
        const name = consumeName("function", obj);
        const inputs = consumeParams(obj);
        const mutability = consumeMutability(obj);
        let outputs = [];
        if (consumeKeywords(obj, setify(["returns"])).has("returns")) {
          outputs = consumeParams(obj);
        }
        const gas = consumeGas(obj);
        consumeEoi(obj);
        return new FunctionFragment(_guard$2, name, mutability, inputs, outputs, gas);
      }
      return new FunctionFragment(_guard$2, obj.name, obj.stateMutability, obj.inputs ? obj.inputs.map(ParamType.from) : [], obj.outputs ? obj.outputs.map(ParamType.from) : [], obj.gas != null ? obj.gas : null);
    }
    static isFragment(value) {
      return value && value[internal$1] === FunctionFragmentInternal;
    }
  }
  class StructFragment extends NamedFragment {
    constructor(guard, name, inputs) {
      super(guard, "struct", name, inputs);
      Object.defineProperty(this, internal$1, { value: StructFragmentInternal });
    }
    format() {
      throw new Error("@TODO");
    }
    static from(obj) {
      if (typeof obj === "string") {
        return StructFragment.from(lex(obj));
      } else if (obj instanceof TokenString) {
        const name = consumeName("struct", obj);
        const inputs = consumeParams(obj);
        consumeEoi(obj);
        return new StructFragment(_guard$2, name, inputs);
      }
      return new StructFragment(_guard$2, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);
    }
    static isFragment(value) {
      return value && value[internal$1] === StructFragmentInternal;
    }
  }
  const PanicReasons$1 = /* @__PURE__ */ new Map();
  PanicReasons$1.set(0, "GENERIC_PANIC");
  PanicReasons$1.set(1, "ASSERT_FALSE");
  PanicReasons$1.set(17, "OVERFLOW");
  PanicReasons$1.set(18, "DIVIDE_BY_ZERO");
  PanicReasons$1.set(33, "ENUM_RANGE_ERROR");
  PanicReasons$1.set(34, "BAD_STORAGE_DATA");
  PanicReasons$1.set(49, "STACK_UNDERFLOW");
  PanicReasons$1.set(50, "ARRAY_RANGE_ERROR");
  PanicReasons$1.set(65, "OUT_OF_MEMORY");
  PanicReasons$1.set(81, "UNINITIALIZED_FUNCTION_CALL");
  const paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
  const paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
  let defaultCoder = null;
  function getBuiltinCallException(action, tx, data, abiCoder) {
    let message = "missing revert data";
    let reason = null;
    const invocation = null;
    let revert = null;
    if (data) {
      message = "execution reverted";
      const bytes2 = getBytes(data);
      data = hexlify(data);
      if (bytes2.length % 32 !== 4) {
        message += " (could not decode reason; invalid data length)";
      } else if (hexlify(bytes2.slice(0, 4)) === "0x08c379a0") {
        try {
          reason = abiCoder.decode(["string"], bytes2.slice(4))[0];
          revert = {
            signature: "Error(string)",
            name: "Error",
            args: [reason]
          };
          message += `: ${JSON.stringify(reason)}`;
        } catch (error) {
          formatAppLog("log", "at node_modules/ethers/lib.esm/abi/abi-coder.js:67", error);
          message += " (could not decode reason; invalid data)";
        }
      } else if (hexlify(bytes2.slice(0, 4)) === "0x4e487b71") {
        try {
          const code = Number(abiCoder.decode(["uint256"], bytes2.slice(4))[0]);
          revert = {
            signature: "Panic(uint256)",
            name: "Panic",
            args: [code]
          };
          reason = `Panic due to ${PanicReasons$1.get(code) || "UNKNOWN"}(${code})`;
          message += `: ${reason}`;
        } catch (error) {
          formatAppLog("log", "at node_modules/ethers/lib.esm/abi/abi-coder.js:84", error);
          message += " (could not decode panic reason)";
        }
      } else {
        message += " (unknown custom error)";
      }
    }
    const transaction = {
      to: tx.to ? getAddress(tx.to) : null,
      data: tx.data || "0x"
    };
    if (tx.from) {
      transaction.from = getAddress(tx.from);
    }
    return makeError(message, "CALL_EXCEPTION", {
      action,
      data,
      reason,
      transaction,
      invocation,
      revert
    });
  }
  const _AbiCoder = class {
    constructor() {
      __privateAdd(this, _getCoder);
    }
    getDefaultValue(types) {
      const coders = types.map((type) => __privateMethod(this, _getCoder, getCoder_fn).call(this, ParamType.from(type)));
      const coder = new TupleCoder(coders, "_");
      return coder.defaultValue();
    }
    encode(types, values) {
      assertArgumentCount(values.length, types.length, "types/values length mismatch");
      const coders = types.map((type) => __privateMethod(this, _getCoder, getCoder_fn).call(this, ParamType.from(type)));
      const coder = new TupleCoder(coders, "_");
      const writer = new Writer();
      coder.encode(writer, values);
      return writer.data;
    }
    decode(types, data, loose) {
      const coders = types.map((type) => __privateMethod(this, _getCoder, getCoder_fn).call(this, ParamType.from(type)));
      const coder = new TupleCoder(coders, "_");
      return coder.decode(new Reader(data, loose));
    }
    static defaultAbiCoder() {
      if (defaultCoder == null) {
        defaultCoder = new _AbiCoder();
      }
      return defaultCoder;
    }
    static getBuiltinCallException(action, tx, data) {
      return getBuiltinCallException(action, tx, data, _AbiCoder.defaultAbiCoder());
    }
  };
  let AbiCoder = _AbiCoder;
  _getCoder = new WeakSet();
  getCoder_fn = function(param) {
    if (param.isArray()) {
      return new ArrayCoder(__privateMethod(this, _getCoder, getCoder_fn).call(this, param.arrayChildren), param.arrayLength, param.name);
    }
    if (param.isTuple()) {
      return new TupleCoder(param.components.map((c2) => __privateMethod(this, _getCoder, getCoder_fn).call(this, c2)), param.name);
    }
    switch (param.baseType) {
      case "address":
        return new AddressCoder(param.name);
      case "bool":
        return new BooleanCoder(param.name);
      case "string":
        return new StringCoder(param.name);
      case "bytes":
        return new BytesCoder(param.name);
      case "":
        return new NullCoder(param.name);
    }
    let match = param.type.match(paramTypeNumber);
    if (match) {
      let size = parseInt(match[2] || "256");
      assertArgument(size !== 0 && size <= 256 && size % 8 === 0, "invalid " + match[1] + " bit length", "param", param);
      return new NumberCoder(size / 8, match[1] === "int", param.name);
    }
    match = param.type.match(paramTypeBytes);
    if (match) {
      let size = parseInt(match[1]);
      assertArgument(size !== 0 && size <= 32, "invalid bytes length", "param", param);
      return new FixedBytesCoder(size, param.name);
    }
    assertArgument(false, "invalid type", "type", param.type);
  };
  class LogDescription {
    constructor(fragment, topic, args) {
      const name = fragment.name, signature = fragment.format();
      defineProperties(this, {
        fragment,
        name,
        signature,
        topic,
        args
      });
    }
  }
  class TransactionDescription {
    constructor(fragment, selector, args, value) {
      const name = fragment.name, signature = fragment.format();
      defineProperties(this, {
        fragment,
        name,
        args,
        signature,
        selector,
        value
      });
    }
  }
  class ErrorDescription {
    constructor(fragment, selector, args) {
      const name = fragment.name, signature = fragment.format();
      defineProperties(this, {
        fragment,
        name,
        args,
        signature,
        selector
      });
    }
  }
  class Indexed {
    static isIndexed(value) {
      return !!(value && value._isIndexed);
    }
    constructor(hash2) {
      defineProperties(this, { hash: hash2, _isIndexed: true });
    }
  }
  const PanicReasons = {
    "0": "generic panic",
    "1": "assert(false)",
    "17": "arithmetic overflow",
    "18": "division or modulo by zero",
    "33": "enum overflow",
    "34": "invalid encoded storage byte array accessed",
    "49": "out-of-bounds array access; popping on an empty array",
    "50": "out-of-bounds access of an array or bytesN",
    "65": "out of memory",
    "81": "uninitialized function"
  };
  const BuiltinErrors = {
    "0x08c379a0": {
      signature: "Error(string)",
      name: "Error",
      inputs: ["string"],
      reason: (message) => {
        return `reverted with reason string ${JSON.stringify(message)}`;
      }
    },
    "0x4e487b71": {
      signature: "Panic(uint256)",
      name: "Panic",
      inputs: ["uint256"],
      reason: (code) => {
        let reason = "unknown panic code";
        if (code >= 0 && code <= 255 && PanicReasons[code.toString()]) {
          reason = PanicReasons[code.toString()];
        }
        return `reverted with panic code 0x${code.toString(16)} (${reason})`;
      }
    }
  };
  const _Interface = class {
    constructor(fragments) {
      __privateAdd(this, _getFunction);
      __privateAdd(this, _getEvent);
      __privateAdd(this, _errors, void 0);
      __privateAdd(this, _events, void 0);
      __privateAdd(this, _functions, void 0);
      __privateAdd(this, _abiCoder, void 0);
      let abi = [];
      if (typeof fragments === "string") {
        abi = JSON.parse(fragments);
      } else {
        abi = fragments;
      }
      __privateSet(this, _functions, /* @__PURE__ */ new Map());
      __privateSet(this, _errors, /* @__PURE__ */ new Map());
      __privateSet(this, _events, /* @__PURE__ */ new Map());
      const frags = [];
      for (const a2 of abi) {
        try {
          frags.push(Fragment.from(a2));
        } catch (error) {
          formatAppLog("log", "at node_modules/ethers/lib.esm/abi/interface.js:152", "EE", error);
        }
      }
      defineProperties(this, {
        fragments: Object.freeze(frags)
      });
      let fallback = null;
      let receive = false;
      __privateSet(this, _abiCoder, this.getAbiCoder());
      this.fragments.forEach((fragment, index) => {
        let bucket;
        switch (fragment.type) {
          case "constructor":
            if (this.deploy) {
              formatAppLog("log", "at node_modules/ethers/lib.esm/abi/interface.js:167", "duplicate definition - constructor");
              return;
            }
            defineProperties(this, { deploy: fragment });
            return;
          case "fallback":
            if (fragment.inputs.length === 0) {
              receive = true;
            } else {
              assertArgument(!fallback || fragment.payable !== fallback.payable, "conflicting fallback fragments", `fragments[${index}]`, fragment);
              fallback = fragment;
              receive = fallback.payable;
            }
            return;
          case "function":
            bucket = __privateGet(this, _functions);
            break;
          case "event":
            bucket = __privateGet(this, _events);
            break;
          case "error":
            bucket = __privateGet(this, _errors);
            break;
          default:
            return;
        }
        const signature = fragment.format();
        if (bucket.has(signature)) {
          return;
        }
        bucket.set(signature, fragment);
      });
      if (!this.deploy) {
        defineProperties(this, {
          deploy: ConstructorFragment.from("constructor()")
        });
      }
      defineProperties(this, { fallback, receive });
    }
    format(minimal) {
      const format2 = minimal ? "minimal" : "full";
      const abi = this.fragments.map((f2) => f2.format(format2));
      return abi;
    }
    formatJson() {
      const abi = this.fragments.map((f2) => f2.format("json"));
      return JSON.stringify(abi.map((j2) => JSON.parse(j2)));
    }
    getAbiCoder() {
      return AbiCoder.defaultAbiCoder();
    }
    getFunctionName(key) {
      const fragment = __privateMethod(this, _getFunction, getFunction_fn).call(this, key, null, false);
      assertArgument(fragment, "no matching function", "key", key);
      return fragment.name;
    }
    getFunction(key, values) {
      return __privateMethod(this, _getFunction, getFunction_fn).call(this, key, values || null, true);
    }
    forEachFunction(callback) {
      const names2 = Array.from(__privateGet(this, _functions).keys());
      names2.sort((a2, b2) => a2.localeCompare(b2));
      for (let i2 = 0; i2 < names2.length; i2++) {
        const name = names2[i2];
        callback(__privateGet(this, _functions).get(name), i2);
      }
    }
    getEventName(key) {
      const fragment = __privateMethod(this, _getEvent, getEvent_fn).call(this, key, null, false);
      assertArgument(fragment, "no matching event", "key", key);
      return fragment.name;
    }
    getEvent(key, values) {
      return __privateMethod(this, _getEvent, getEvent_fn).call(this, key, values || null, true);
    }
    forEachEvent(callback) {
      const names2 = Array.from(__privateGet(this, _events).keys());
      names2.sort((a2, b2) => a2.localeCompare(b2));
      for (let i2 = 0; i2 < names2.length; i2++) {
        const name = names2[i2];
        callback(__privateGet(this, _events).get(name), i2);
      }
    }
    getError(key, values) {
      if (isHexString(key)) {
        const selector = key.toLowerCase();
        if (BuiltinErrors[selector]) {
          return ErrorFragment.from(BuiltinErrors[selector].signature);
        }
        for (const fragment of __privateGet(this, _errors).values()) {
          if (selector === fragment.selector) {
            return fragment;
          }
        }
        return null;
      }
      if (key.indexOf("(") === -1) {
        const matching = [];
        for (const [name, fragment] of __privateGet(this, _errors)) {
          if (name.split("(")[0] === key) {
            matching.push(fragment);
          }
        }
        if (matching.length === 0) {
          if (key === "Error") {
            return ErrorFragment.from("error Error(string)");
          }
          if (key === "Panic") {
            return ErrorFragment.from("error Panic(uint256)");
          }
          return null;
        } else if (matching.length > 1) {
          const matchStr = matching.map((m2) => JSON.stringify(m2.format())).join(", ");
          assertArgument(false, `ambiguous error description (i.e. ${matchStr})`, "name", key);
        }
        return matching[0];
      }
      key = ErrorFragment.from(key).format();
      if (key === "Error(string)") {
        return ErrorFragment.from("error Error(string)");
      }
      if (key === "Panic(uint256)") {
        return ErrorFragment.from("error Panic(uint256)");
      }
      const result = __privateGet(this, _errors).get(key);
      if (result) {
        return result;
      }
      return null;
    }
    forEachError(callback) {
      const names2 = Array.from(__privateGet(this, _errors).keys());
      names2.sort((a2, b2) => a2.localeCompare(b2));
      for (let i2 = 0; i2 < names2.length; i2++) {
        const name = names2[i2];
        callback(__privateGet(this, _errors).get(name), i2);
      }
    }
    _decodeParams(params, data) {
      return __privateGet(this, _abiCoder).decode(params, data);
    }
    _encodeParams(params, values) {
      return __privateGet(this, _abiCoder).encode(params, values);
    }
    encodeDeploy(values) {
      return this._encodeParams(this.deploy.inputs, values || []);
    }
    decodeErrorResult(fragment, data) {
      if (typeof fragment === "string") {
        const f2 = this.getError(fragment);
        assertArgument(f2, "unknown error", "fragment", fragment);
        fragment = f2;
      }
      assertArgument(dataSlice(data, 0, 4) === fragment.selector, `data signature does not match error ${fragment.name}.`, "data", data);
      return this._decodeParams(fragment.inputs, dataSlice(data, 4));
    }
    encodeErrorResult(fragment, values) {
      if (typeof fragment === "string") {
        const f2 = this.getError(fragment);
        assertArgument(f2, "unknown error", "fragment", fragment);
        fragment = f2;
      }
      return concat([
        fragment.selector,
        this._encodeParams(fragment.inputs, values || [])
      ]);
    }
    decodeFunctionData(fragment, data) {
      if (typeof fragment === "string") {
        const f2 = this.getFunction(fragment);
        assertArgument(f2, "unknown function", "fragment", fragment);
        fragment = f2;
      }
      assertArgument(dataSlice(data, 0, 4) === fragment.selector, `data signature does not match function ${fragment.name}.`, "data", data);
      return this._decodeParams(fragment.inputs, dataSlice(data, 4));
    }
    encodeFunctionData(fragment, values) {
      if (typeof fragment === "string") {
        const f2 = this.getFunction(fragment);
        assertArgument(f2, "unknown function", "fragment", fragment);
        fragment = f2;
      }
      return concat([
        fragment.selector,
        this._encodeParams(fragment.inputs, values || [])
      ]);
    }
    decodeFunctionResult(fragment, data) {
      if (typeof fragment === "string") {
        const f2 = this.getFunction(fragment);
        assertArgument(f2, "unknown function", "fragment", fragment);
        fragment = f2;
      }
      let message = "invalid length for result data";
      const bytes2 = getBytesCopy(data);
      if (bytes2.length % 32 === 0) {
        try {
          return __privateGet(this, _abiCoder).decode(fragment.outputs, bytes2);
        } catch (error) {
          message = "could not decode result data";
        }
      }
      assert$1(false, message, "BAD_DATA", {
        value: hexlify(bytes2),
        info: { method: fragment.name, signature: fragment.format() }
      });
    }
    makeError(_data5, tx) {
      const data = getBytes(_data5, "data");
      const error = AbiCoder.getBuiltinCallException("call", tx, data);
      if (!error.message.match(/could not decode/)) {
        const selector = hexlify(data.slice(0, 4));
        error.message = "execution reverted (unknown custom error)";
        const ef = this.getError(selector);
        if (ef) {
          try {
            error.revert = {
              name: ef.name,
              signature: ef.format(),
              args: __privateGet(this, _abiCoder).decode(ef.inputs, data.slice(4))
            };
            error.reason = error.revert.signature;
            error.message = `execution reverted: ${error.reason}`;
          } catch (e) {
            error.message = `execution reverted (coult not decode custom error)`;
          }
        }
      }
      const parsed = this.parseTransaction(tx);
      if (parsed) {
        error.invocation = {
          method: parsed.name,
          signature: parsed.signature,
          args: parsed.args
        };
      }
      return error;
    }
    encodeFunctionResult(fragment, values) {
      if (typeof fragment === "string") {
        const f2 = this.getFunction(fragment);
        assertArgument(f2, "unknown function", "fragment", fragment);
        fragment = f2;
      }
      return hexlify(__privateGet(this, _abiCoder).encode(fragment.outputs, values || []));
    }
    encodeFilterTopics(fragment, values) {
      if (typeof fragment === "string") {
        const f2 = this.getEvent(fragment);
        assertArgument(f2, "unknown event", "eventFragment", fragment);
        fragment = f2;
      }
      assert$1(values.length <= fragment.inputs.length, `too many arguments for ${fragment.format()}`, "UNEXPECTED_ARGUMENT", { count: values.length, expectedCount: fragment.inputs.length });
      const topics = [];
      if (!fragment.anonymous) {
        topics.push(fragment.topicHash);
      }
      const encodeTopic = (param, value) => {
        if (param.type === "string") {
          return id(value);
        } else if (param.type === "bytes") {
          return keccak256(hexlify(value));
        }
        if (param.type === "bool" && typeof value === "boolean") {
          value = value ? "0x01" : "0x00";
        }
        if (param.type.match(/^u?int/)) {
          value = toBeHex(value);
        }
        if (param.type === "address") {
          __privateGet(this, _abiCoder).encode(["address"], [value]);
        }
        return zeroPadValue(hexlify(value), 32);
      };
      values.forEach((value, index) => {
        const param = fragment.inputs[index];
        if (!param.indexed) {
          assertArgument(value == null, "cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
          return;
        }
        if (value == null) {
          topics.push(null);
        } else if (param.baseType === "array" || param.baseType === "tuple") {
          assertArgument(false, "filtering with tuples or arrays not supported", "contract." + param.name, value);
        } else if (Array.isArray(value)) {
          topics.push(value.map((value2) => encodeTopic(param, value2)));
        } else {
          topics.push(encodeTopic(param, value));
        }
      });
      while (topics.length && topics[topics.length - 1] === null) {
        topics.pop();
      }
      return topics;
    }
    encodeEventLog(fragment, values) {
      if (typeof fragment === "string") {
        const f2 = this.getEvent(fragment);
        assertArgument(f2, "unknown event", "eventFragment", fragment);
        fragment = f2;
      }
      const topics = [];
      const dataTypes = [];
      const dataValues = [];
      if (!fragment.anonymous) {
        topics.push(fragment.topicHash);
      }
      assertArgument(values.length === fragment.inputs.length, "event arguments/values mismatch", "values", values);
      fragment.inputs.forEach((param, index) => {
        const value = values[index];
        if (param.indexed) {
          if (param.type === "string") {
            topics.push(id(value));
          } else if (param.type === "bytes") {
            topics.push(keccak256(value));
          } else if (param.baseType === "tuple" || param.baseType === "array") {
            throw new Error("not implemented");
          } else {
            topics.push(__privateGet(this, _abiCoder).encode([param.type], [value]));
          }
        } else {
          dataTypes.push(param);
          dataValues.push(value);
        }
      });
      return {
        data: __privateGet(this, _abiCoder).encode(dataTypes, dataValues),
        topics
      };
    }
    decodeEventLog(fragment, data, topics) {
      if (typeof fragment === "string") {
        const f2 = this.getEvent(fragment);
        assertArgument(f2, "unknown event", "eventFragment", fragment);
        fragment = f2;
      }
      if (topics != null && !fragment.anonymous) {
        const eventTopic = fragment.topicHash;
        assertArgument(isHexString(topics[0], 32) && topics[0].toLowerCase() === eventTopic, "fragment/topic mismatch", "topics[0]", topics[0]);
        topics = topics.slice(1);
      }
      const indexed = [];
      const nonIndexed = [];
      const dynamic = [];
      fragment.inputs.forEach((param, index) => {
        if (param.indexed) {
          if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
            indexed.push(ParamType.from({ type: "bytes32", name: param.name }));
            dynamic.push(true);
          } else {
            indexed.push(param);
            dynamic.push(false);
          }
        } else {
          nonIndexed.push(param);
          dynamic.push(false);
        }
      });
      const resultIndexed = topics != null ? __privateGet(this, _abiCoder).decode(indexed, concat(topics)) : null;
      const resultNonIndexed = __privateGet(this, _abiCoder).decode(nonIndexed, data, true);
      const values = [];
      const keys = [];
      let nonIndexedIndex = 0, indexedIndex = 0;
      fragment.inputs.forEach((param, index) => {
        let value = null;
        if (param.indexed) {
          if (resultIndexed == null) {
            value = new Indexed(null);
          } else if (dynamic[index]) {
            value = new Indexed(resultIndexed[indexedIndex++]);
          } else {
            try {
              value = resultIndexed[indexedIndex++];
            } catch (error) {
              value = error;
            }
          }
        } else {
          try {
            value = resultNonIndexed[nonIndexedIndex++];
          } catch (error) {
            value = error;
          }
        }
        values.push(value);
        keys.push(param.name || null);
      });
      return Result.fromItems(values, keys);
    }
    parseTransaction(tx) {
      const data = getBytes(tx.data, "tx.data");
      const value = getBigInt(tx.value != null ? tx.value : 0, "tx.value");
      const fragment = this.getFunction(hexlify(data.slice(0, 4)));
      if (!fragment) {
        return null;
      }
      const args = __privateGet(this, _abiCoder).decode(fragment.inputs, data.slice(4));
      return new TransactionDescription(fragment, fragment.selector, args, value);
    }
    parseCallResult(data) {
      throw new Error("@TODO");
    }
    parseLog(log) {
      const fragment = this.getEvent(log.topics[0]);
      if (!fragment || fragment.anonymous) {
        return null;
      }
      return new LogDescription(fragment, fragment.topicHash, this.decodeEventLog(fragment, log.data, log.topics));
    }
    parseError(data) {
      const hexData = hexlify(data);
      const fragment = this.getError(dataSlice(hexData, 0, 4));
      if (!fragment) {
        return null;
      }
      const args = __privateGet(this, _abiCoder).decode(fragment.inputs, dataSlice(hexData, 4));
      return new ErrorDescription(fragment, fragment.selector, args);
    }
    static from(value) {
      if (value instanceof _Interface) {
        return value;
      }
      if (typeof value === "string") {
        return new _Interface(JSON.parse(value));
      }
      if (typeof value.format === "function") {
        return new _Interface(value.format("json"));
      }
      return new _Interface(value);
    }
  };
  let Interface = _Interface;
  _errors = new WeakMap();
  _events = new WeakMap();
  _functions = new WeakMap();
  _abiCoder = new WeakMap();
  _getFunction = new WeakSet();
  getFunction_fn = function(key, values, forceUnique) {
    if (isHexString(key)) {
      const selector = key.toLowerCase();
      for (const fragment of __privateGet(this, _functions).values()) {
        if (selector === fragment.selector) {
          return fragment;
        }
      }
      return null;
    }
    if (key.indexOf("(") === -1) {
      const matching = [];
      for (const [name, fragment] of __privateGet(this, _functions)) {
        if (name.split("(")[0] === key) {
          matching.push(fragment);
        }
      }
      if (values) {
        const lastValue = values.length > 0 ? values[values.length - 1] : null;
        let valueLength = values.length;
        let allowOptions = true;
        if (Typed.isTyped(lastValue) && lastValue.type === "overrides") {
          allowOptions = false;
          valueLength--;
        }
        for (let i2 = matching.length - 1; i2 >= 0; i2--) {
          const inputs = matching[i2].inputs.length;
          if (inputs !== valueLength && (!allowOptions || inputs !== valueLength - 1)) {
            matching.splice(i2, 1);
          }
        }
        for (let i2 = matching.length - 1; i2 >= 0; i2--) {
          const inputs = matching[i2].inputs;
          for (let j2 = 0; j2 < values.length; j2++) {
            if (!Typed.isTyped(values[j2])) {
              continue;
            }
            if (j2 >= inputs.length) {
              if (values[j2].type === "overrides") {
                continue;
              }
              matching.splice(i2, 1);
              break;
            }
            if (values[j2].type !== inputs[j2].baseType) {
              matching.splice(i2, 1);
              break;
            }
          }
        }
      }
      if (matching.length === 1 && values && values.length !== matching[0].inputs.length) {
        const lastArg = values[values.length - 1];
        if (lastArg == null || Array.isArray(lastArg) || typeof lastArg !== "object") {
          matching.splice(0, 1);
        }
      }
      if (matching.length === 0) {
        return null;
      }
      if (matching.length > 1 && forceUnique) {
        const matchStr = matching.map((m2) => JSON.stringify(m2.format())).join(", ");
        assertArgument(false, `ambiguous function description (i.e. matches ${matchStr})`, "key", key);
      }
      return matching[0];
    }
    const result = __privateGet(this, _functions).get(FunctionFragment.from(key).format());
    if (result) {
      return result;
    }
    return null;
  };
  _getEvent = new WeakSet();
  getEvent_fn = function(key, values, forceUnique) {
    if (isHexString(key)) {
      const eventTopic = key.toLowerCase();
      for (const fragment of __privateGet(this, _events).values()) {
        if (eventTopic === fragment.topicHash) {
          return fragment;
        }
      }
      return null;
    }
    if (key.indexOf("(") === -1) {
      const matching = [];
      for (const [name, fragment] of __privateGet(this, _events)) {
        if (name.split("(")[0] === key) {
          matching.push(fragment);
        }
      }
      if (values) {
        for (let i2 = matching.length - 1; i2 >= 0; i2--) {
          if (matching[i2].inputs.length < values.length) {
            matching.splice(i2, 1);
          }
        }
        for (let i2 = matching.length - 1; i2 >= 0; i2--) {
          const inputs = matching[i2].inputs;
          for (let j2 = 0; j2 < values.length; j2++) {
            if (!Typed.isTyped(values[j2])) {
              continue;
            }
            if (values[j2].type !== inputs[j2].baseType) {
              matching.splice(i2, 1);
              break;
            }
          }
        }
      }
      if (matching.length === 0) {
        return null;
      }
      if (matching.length > 1 && forceUnique) {
        const matchStr = matching.map((m2) => JSON.stringify(m2.format())).join(", ");
        assertArgument(false, `ambiguous event description (i.e. matches ${matchStr})`, "key", key);
      }
      return matching[0];
    }
    const result = __privateGet(this, _events).get(EventFragment.from(key).format());
    if (result) {
      return result;
    }
    return null;
  };
  const BN_0$2 = BigInt(0);
  function getValue(value) {
    if (value == null) {
      return null;
    }
    return value;
  }
  function toJson(value) {
    if (value == null) {
      return null;
    }
    return value.toString();
  }
  class FeeData {
    constructor(gasPrice, maxFeePerGas, maxPriorityFeePerGas) {
      defineProperties(this, {
        gasPrice: getValue(gasPrice),
        maxFeePerGas: getValue(maxFeePerGas),
        maxPriorityFeePerGas: getValue(maxPriorityFeePerGas)
      });
    }
    toJSON() {
      const { gasPrice, maxFeePerGas, maxPriorityFeePerGas } = this;
      return {
        _type: "FeeData",
        gasPrice: toJson(gasPrice),
        maxFeePerGas: toJson(maxFeePerGas),
        maxPriorityFeePerGas: toJson(maxPriorityFeePerGas)
      };
    }
  }
  function copyRequest(req) {
    const result = {};
    if (req.to) {
      result.to = req.to;
    }
    if (req.from) {
      result.from = req.from;
    }
    if (req.data) {
      result.data = hexlify(req.data);
    }
    const bigIntKeys = "chainId,gasLimit,gasPrice,maxFeePerGas, maxPriorityFeePerGas,value".split(/,/);
    for (const key of bigIntKeys) {
      if (!(key in req) || req[key] == null) {
        continue;
      }
      result[key] = getBigInt(req[key], `request.${key}`);
    }
    const numberKeys = "type,nonce".split(/,/);
    for (const key of numberKeys) {
      if (!(key in req) || req[key] == null) {
        continue;
      }
      result[key] = getNumber(req[key], `request.${key}`);
    }
    if (req.accessList) {
      result.accessList = accessListify(req.accessList);
    }
    if ("blockTag" in req) {
      result.blockTag = req.blockTag;
    }
    if ("enableCcipRead" in req) {
      result.enableCcipReadEnabled = !!req.enableCcipRead;
    }
    if ("customData" in req) {
      result.customData = req.customData;
    }
    return result;
  }
  class Block {
    constructor(block, provider) {
      __privateAdd(this, _transactions, void 0);
      __privateSet(this, _transactions, block.transactions.map((tx) => {
        if (typeof tx !== "string") {
          return new TransactionResponse(tx, provider);
        }
        return tx;
      }));
      defineProperties(this, {
        provider,
        hash: getValue(block.hash),
        number: block.number,
        timestamp: block.timestamp,
        parentHash: block.parentHash,
        nonce: block.nonce,
        difficulty: block.difficulty,
        gasLimit: block.gasLimit,
        gasUsed: block.gasUsed,
        miner: block.miner,
        extraData: block.extraData,
        baseFeePerGas: getValue(block.baseFeePerGas)
      });
    }
    get transactions() {
      return __privateGet(this, _transactions).map((tx) => {
        if (typeof tx === "string") {
          return tx;
        }
        return tx.hash;
      });
    }
    get prefetchedTransactions() {
      const txs = __privateGet(this, _transactions).slice();
      if (txs.length === 0) {
        return [];
      }
      assert$1(typeof txs[0] === "object", "transactions were not prefetched with block request", "UNSUPPORTED_OPERATION", {
        operation: "transactionResponses()"
      });
      return txs;
    }
    toJSON() {
      const { baseFeePerGas, difficulty, extraData, gasLimit, gasUsed, hash: hash2, miner, nonce, number: number2, parentHash, timestamp, transactions } = this;
      return {
        _type: "Block",
        baseFeePerGas: toJson(baseFeePerGas),
        difficulty: toJson(difficulty),
        extraData,
        gasLimit: toJson(gasLimit),
        gasUsed: toJson(gasUsed),
        hash: hash2,
        miner,
        nonce,
        number: number2,
        parentHash,
        timestamp,
        transactions
      };
    }
    [Symbol.iterator]() {
      let index = 0;
      const txs = this.transactions;
      return {
        next: () => {
          if (index < this.length) {
            return {
              value: txs[index++],
              done: false
            };
          }
          return { value: void 0, done: true };
        }
      };
    }
    get length() {
      return __privateGet(this, _transactions).length;
    }
    get date() {
      if (this.timestamp == null) {
        return null;
      }
      return new Date(this.timestamp * 1e3);
    }
    async getTransaction(indexOrHash) {
      let tx = void 0;
      if (typeof indexOrHash === "number") {
        tx = __privateGet(this, _transactions)[indexOrHash];
      } else {
        const hash2 = indexOrHash.toLowerCase();
        for (const v2 of __privateGet(this, _transactions)) {
          if (typeof v2 === "string") {
            if (v2 !== hash2) {
              continue;
            }
            tx = v2;
            break;
          } else {
            if (v2.hash === hash2) {
              continue;
            }
            tx = v2;
            break;
          }
        }
      }
      if (tx == null) {
        throw new Error("no such tx");
      }
      if (typeof tx === "string") {
        return await this.provider.getTransaction(tx);
      } else {
        return tx;
      }
    }
    getPrefetchedTransaction(indexOrHash) {
      const txs = this.prefetchedTransactions;
      if (typeof indexOrHash === "number") {
        return txs[indexOrHash];
      }
      indexOrHash = indexOrHash.toLowerCase();
      for (const tx of txs) {
        if (tx.hash === indexOrHash) {
          return tx;
        }
      }
      assertArgument(false, "no matching transaction", "indexOrHash", indexOrHash);
    }
    isMined() {
      return !!this.hash;
    }
    isLondon() {
      return !!this.baseFeePerGas;
    }
    orphanedEvent() {
      if (!this.isMined()) {
        throw new Error("");
      }
      return createOrphanedBlockFilter(this);
    }
  }
  _transactions = new WeakMap();
  class Log {
    constructor(log, provider) {
      this.provider = provider;
      const topics = Object.freeze(log.topics.slice());
      defineProperties(this, {
        transactionHash: log.transactionHash,
        blockHash: log.blockHash,
        blockNumber: log.blockNumber,
        removed: log.removed,
        address: log.address,
        data: log.data,
        topics,
        index: log.index,
        transactionIndex: log.transactionIndex
      });
    }
    toJSON() {
      const { address, blockHash, blockNumber, data, index, removed, topics, transactionHash, transactionIndex } = this;
      return {
        _type: "log",
        address,
        blockHash,
        blockNumber,
        data,
        index,
        removed,
        topics,
        transactionHash,
        transactionIndex
      };
    }
    async getBlock() {
      const block = await this.provider.getBlock(this.blockHash);
      assert$1(!!block, "failed to find transaction", "UNKNOWN_ERROR", {});
      return block;
    }
    async getTransaction() {
      const tx = await this.provider.getTransaction(this.transactionHash);
      assert$1(!!tx, "failed to find transaction", "UNKNOWN_ERROR", {});
      return tx;
    }
    async getTransactionReceipt() {
      const receipt = await this.provider.getTransactionReceipt(this.transactionHash);
      assert$1(!!receipt, "failed to find transaction receipt", "UNKNOWN_ERROR", {});
      return receipt;
    }
    removedEvent() {
      return createRemovedLogFilter(this);
    }
  }
  class TransactionReceipt {
    constructor(tx, provider) {
      __privateAdd(this, _logs, void 0);
      __privateSet(this, _logs, Object.freeze(tx.logs.map((log) => {
        return new Log(log, provider);
      })));
      defineProperties(this, {
        provider,
        to: tx.to,
        from: tx.from,
        contractAddress: tx.contractAddress,
        hash: tx.hash,
        index: tx.index,
        blockHash: tx.blockHash,
        blockNumber: tx.blockNumber,
        logsBloom: tx.logsBloom,
        gasUsed: tx.gasUsed,
        cumulativeGasUsed: tx.cumulativeGasUsed,
        gasPrice: tx.effectiveGasPrice || tx.gasPrice,
        type: tx.type,
        status: tx.status,
        root: tx.root
      });
    }
    get logs() {
      return __privateGet(this, _logs);
    }
    toJSON() {
      const {
        to,
        from,
        contractAddress,
        hash: hash2,
        index,
        blockHash,
        blockNumber,
        logsBloom,
        logs,
        status,
        root: root2
      } = this;
      return {
        _type: "TransactionReceipt",
        blockHash,
        blockNumber,
        contractAddress,
        cumulativeGasUsed: toJson(this.cumulativeGasUsed),
        from,
        gasPrice: toJson(this.gasPrice),
        gasUsed: toJson(this.gasUsed),
        hash: hash2,
        index,
        logs,
        logsBloom,
        root: root2,
        status,
        to
      };
    }
    get length() {
      return this.logs.length;
    }
    [Symbol.iterator]() {
      let index = 0;
      return {
        next: () => {
          if (index < this.length) {
            return { value: this.logs[index++], done: false };
          }
          return { value: void 0, done: true };
        }
      };
    }
    get fee() {
      return this.gasUsed * this.gasPrice;
    }
    async getBlock() {
      const block = await this.provider.getBlock(this.blockHash);
      if (block == null) {
        throw new Error("TODO");
      }
      return block;
    }
    async getTransaction() {
      const tx = await this.provider.getTransaction(this.hash);
      if (tx == null) {
        throw new Error("TODO");
      }
      return tx;
    }
    async getResult() {
      return await this.provider.getTransactionResult(this.hash);
    }
    async confirmations() {
      return await this.provider.getBlockNumber() - this.blockNumber + 1;
    }
    removedEvent() {
      return createRemovedTransactionFilter(this);
    }
    reorderedEvent(other) {
      assert$1(!other || other.isMined(), "unmined 'other' transction cannot be orphaned", "UNSUPPORTED_OPERATION", { operation: "reorderedEvent(other)" });
      return createReorderedTransactionFilter(this, other);
    }
  }
  _logs = new WeakMap();
  const _TransactionResponse = class {
    constructor(tx, provider) {
      __privateAdd(this, _startBlock, void 0);
      this.provider = provider;
      this.blockNumber = tx.blockNumber != null ? tx.blockNumber : null;
      this.blockHash = tx.blockHash != null ? tx.blockHash : null;
      this.hash = tx.hash;
      this.index = tx.index;
      this.type = tx.type;
      this.from = tx.from;
      this.to = tx.to || null;
      this.gasLimit = tx.gasLimit;
      this.nonce = tx.nonce;
      this.data = tx.data;
      this.value = tx.value;
      this.gasPrice = tx.gasPrice;
      this.maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? tx.maxPriorityFeePerGas : null;
      this.maxFeePerGas = tx.maxFeePerGas != null ? tx.maxFeePerGas : null;
      this.chainId = tx.chainId;
      this.signature = tx.signature;
      this.accessList = tx.accessList != null ? tx.accessList : null;
      __privateSet(this, _startBlock, -1);
    }
    toJSON() {
      const { blockNumber, blockHash, index, hash: hash2, type, to, from, nonce, data, signature, accessList } = this;
      return {
        _type: "TransactionReceipt",
        accessList,
        blockNumber,
        blockHash,
        chainId: toJson(this.chainId),
        data,
        from,
        gasLimit: toJson(this.gasLimit),
        gasPrice: toJson(this.gasPrice),
        hash: hash2,
        maxFeePerGas: toJson(this.maxFeePerGas),
        maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),
        nonce,
        signature,
        to,
        index,
        type,
        value: toJson(this.value)
      };
    }
    async getBlock() {
      let blockNumber = this.blockNumber;
      if (blockNumber == null) {
        const tx = await this.getTransaction();
        if (tx) {
          blockNumber = tx.blockNumber;
        }
      }
      if (blockNumber == null) {
        return null;
      }
      const block = this.provider.getBlock(blockNumber);
      if (block == null) {
        throw new Error("TODO");
      }
      return block;
    }
    async getTransaction() {
      return this.provider.getTransaction(this.hash);
    }
    async wait(_confirms, _timeout2) {
      const confirms = _confirms == null ? 1 : _confirms;
      const timeout = _timeout2 == null ? 0 : _timeout2;
      let startBlock = __privateGet(this, _startBlock);
      let nextScan = -1;
      let stopScanning = startBlock === -1 ? true : false;
      const checkReplacement = async () => {
        if (stopScanning) {
          return null;
        }
        const { blockNumber, nonce } = await resolveProperties({
          blockNumber: this.provider.getBlockNumber(),
          nonce: this.provider.getTransactionCount(this.from)
        });
        if (nonce < this.nonce) {
          startBlock = blockNumber;
          return;
        }
        if (stopScanning) {
          return null;
        }
        const mined = await this.getTransaction();
        if (mined && mined.blockNumber != null) {
          return;
        }
        if (nextScan === -1) {
          nextScan = startBlock - 3;
          if (nextScan < __privateGet(this, _startBlock)) {
            nextScan = __privateGet(this, _startBlock);
          }
        }
        while (nextScan <= blockNumber) {
          if (stopScanning) {
            return null;
          }
          const block = await this.provider.getBlock(nextScan, true);
          if (block == null) {
            return;
          }
          for (const hash2 of block) {
            if (hash2 === this.hash) {
              return;
            }
          }
          for (let i2 = 0; i2 < block.length; i2++) {
            const tx = await block.getTransaction(i2);
            if (tx.from === this.from && tx.nonce === this.nonce) {
              if (stopScanning) {
                return null;
              }
              const receipt2 = await this.provider.getTransactionReceipt(tx.hash);
              if (receipt2 == null) {
                return;
              }
              if (blockNumber - receipt2.blockNumber + 1 < confirms) {
                return;
              }
              let reason = "replaced";
              if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {
                reason = "repriced";
              } else if (tx.data === "0x" && tx.from === tx.to && tx.value === BN_0$2) {
                reason = "cancelled";
              }
              assert$1(false, "transaction was replaced", "TRANSACTION_REPLACED", {
                cancelled: reason === "replaced" || reason === "cancelled",
                reason,
                replacement: tx.replaceableTransaction(startBlock),
                hash: tx.hash,
                receipt: receipt2
              });
            }
          }
          nextScan++;
        }
        return;
      };
      const receipt = await this.provider.getTransactionReceipt(this.hash);
      if (receipt) {
        if (await receipt.confirmations() >= confirms) {
          return receipt;
        }
      } else {
        await checkReplacement();
        if (confirms === 0) {
          return null;
        }
      }
      const waiter = new Promise((resolve, reject) => {
        const cancellers = [];
        const cancel = () => {
          cancellers.forEach((c2) => c2());
        };
        cancellers.push(() => {
          stopScanning = true;
        });
        if (timeout > 0) {
          const timer = setTimeout(() => {
            cancel();
            reject(makeError("wait for transaction timeout", "TIMEOUT"));
          }, timeout);
          cancellers.push(() => {
            clearTimeout(timer);
          });
        }
        const txListener = async (receipt2) => {
          if (await receipt2.confirmations() >= confirms) {
            cancel();
            resolve(receipt2);
          }
        };
        cancellers.push(() => {
          this.provider.off(this.hash, txListener);
        });
        this.provider.on(this.hash, txListener);
        if (startBlock >= 0) {
          const replaceListener = async () => {
            try {
              await checkReplacement();
            } catch (error) {
              if (isError(error, "TRANSACTION_REPLACED")) {
                cancel();
                reject(error);
                return;
              }
            }
            if (!stopScanning) {
              this.provider.once("block", replaceListener);
            }
          };
          cancellers.push(() => {
            this.provider.off("block", replaceListener);
          });
          this.provider.once("block", replaceListener);
        }
      });
      return await waiter;
    }
    isMined() {
      return this.blockHash != null;
    }
    isLegacy() {
      return this.type === 0;
    }
    isBerlin() {
      return this.type === 1;
    }
    isLondon() {
      return this.type === 2;
    }
    removedEvent() {
      assert$1(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
      return createRemovedTransactionFilter(this);
    }
    reorderedEvent(other) {
      assert$1(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
      assert$1(!other || other.isMined(), "unmined 'other' transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
      return createReorderedTransactionFilter(this, other);
    }
    replaceableTransaction(startBlock) {
      assertArgument(Number.isInteger(startBlock) && startBlock >= 0, "invalid startBlock", "startBlock", startBlock);
      const tx = new _TransactionResponse(this, this.provider);
      __privateSet(tx, _startBlock, startBlock);
      return tx;
    }
  };
  let TransactionResponse = _TransactionResponse;
  _startBlock = new WeakMap();
  function createOrphanedBlockFilter(block) {
    return { orphan: "drop-block", hash: block.hash, number: block.number };
  }
  function createReorderedTransactionFilter(tx, other) {
    return { orphan: "reorder-transaction", tx, other };
  }
  function createRemovedTransactionFilter(tx) {
    return { orphan: "drop-transaction", tx };
  }
  function createRemovedLogFilter(log) {
    return { orphan: "drop-log", log: {
      transactionHash: log.transactionHash,
      blockHash: log.blockHash,
      blockNumber: log.blockNumber,
      address: log.address,
      data: log.data,
      topics: Object.freeze(log.topics.slice()),
      index: log.index
    } };
  }
  class EventLog extends Log {
    constructor(log, iface, fragment) {
      super(log, log.provider);
      const args = iface.decodeEventLog(fragment, log.data, log.topics);
      defineProperties(this, { args, fragment, interface: iface });
    }
    get eventName() {
      return this.fragment.name;
    }
    get eventSignature() {
      return this.fragment.format();
    }
  }
  class ContractTransactionReceipt extends TransactionReceipt {
    constructor(iface, provider, tx) {
      super(tx, provider);
      __privateAdd(this, _interface, void 0);
      __privateSet(this, _interface, iface);
    }
    get logs() {
      return super.logs.map((log) => {
        const fragment = log.topics.length ? __privateGet(this, _interface).getEvent(log.topics[0]) : null;
        if (fragment) {
          return new EventLog(log, __privateGet(this, _interface), fragment);
        } else {
          return log;
        }
      });
    }
  }
  _interface = new WeakMap();
  class ContractTransactionResponse extends TransactionResponse {
    constructor(iface, provider, tx) {
      super(tx, provider);
      __privateAdd(this, _interface2, void 0);
      __privateSet(this, _interface2, iface);
    }
    async wait(confirms) {
      const receipt = await super.wait();
      if (receipt == null) {
        return null;
      }
      return new ContractTransactionReceipt(__privateGet(this, _interface2), this.provider, receipt);
    }
  }
  _interface2 = new WeakMap();
  class ContractUnknownEventPayload extends EventPayload {
    constructor(contract, listener, filter, log) {
      super(contract, listener, filter);
      defineProperties(this, { log });
    }
    async getBlock() {
      return await this.log.getBlock();
    }
    async getTransaction() {
      return await this.log.getTransaction();
    }
    async getTransactionReceipt() {
      return await this.log.getTransactionReceipt();
    }
  }
  class ContractEventPayload extends ContractUnknownEventPayload {
    constructor(contract, listener, filter, fragment, _log) {
      super(contract, listener, filter, new EventLog(_log, contract.interface, fragment));
      const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);
      defineProperties(this, { args, fragment });
    }
    get eventName() {
      return this.fragment.name;
    }
    get eventSignature() {
      return this.fragment.format();
    }
  }
  const BN_0$1 = BigInt(0);
  function canCall(value) {
    return value && typeof value.call === "function";
  }
  function canEstimate(value) {
    return value && typeof value.estimateGas === "function";
  }
  function canResolve(value) {
    return value && typeof value.resolveName === "function";
  }
  function canSend(value) {
    return value && typeof value.sendTransaction === "function";
  }
  class PreparedTopicFilter {
    constructor(contract, fragment, args) {
      __privateAdd(this, _filter, void 0);
      defineProperties(this, { fragment });
      if (fragment.inputs.length < args.length) {
        throw new Error("too many arguments");
      }
      const runner = getRunner(contract.runner, "resolveName");
      const resolver = canResolve(runner) ? runner : null;
      __privateSet(this, _filter, async function() {
        const resolvedArgs = await Promise.all(fragment.inputs.map((param, index) => {
          const arg = args[index];
          if (arg == null) {
            return null;
          }
          return param.walkAsync(args[index], (type, value) => {
            if (type === "address") {
              return resolveAddress(value, resolver);
            }
            return value;
          });
        }));
        return contract.interface.encodeFilterTopics(fragment, resolvedArgs);
      }());
    }
    getTopicFilter() {
      return __privateGet(this, _filter);
    }
  }
  _filter = new WeakMap();
  function _WrappedMethodBase() {
    return Function;
  }
  function getRunner(value, feature) {
    if (value == null) {
      return null;
    }
    if (typeof value[feature] === "function") {
      return value;
    }
    if (value.provider && typeof value.provider[feature] === "function") {
      return value.provider;
    }
    return null;
  }
  function getProvider(value) {
    if (value == null) {
      return null;
    }
    return value.provider || null;
  }
  async function copyOverrides(arg, allowed) {
    const overrides = copyRequest(Typed.dereference(arg, "overrides"));
    assertArgument(overrides.to == null || (allowed || []).indexOf("to") >= 0, "cannot override to", "overrides.to", overrides.to);
    assertArgument(overrides.data == null || (allowed || []).indexOf("data") >= 0, "cannot override data", "overrides.data", overrides.data);
    if (overrides.from) {
      overrides.from = await resolveAddress(overrides.from);
    }
    return overrides;
  }
  async function resolveArgs(_runner, inputs, args) {
    const runner = getRunner(_runner, "resolveName");
    const resolver = canResolve(runner) ? runner : null;
    return await Promise.all(inputs.map((param, index) => {
      return param.walkAsync(args[index], (type, value) => {
        value = Typed.dereference(value, type);
        if (type === "address") {
          return resolveAddress(value, resolver);
        }
        return value;
      });
    }));
  }
  class WrappedFallback {
    constructor(contract) {
      defineProperties(this, { _contract: contract });
      const proxy = new Proxy(this, {
        apply: async (target, thisArg, args) => {
          return await target.send(...args);
        }
      });
      return proxy;
    }
    async populateTransaction(overrides) {
      const tx = await copyOverrides(overrides, ["data"]);
      tx.to = await this._contract.getAddress();
      const iface = this._contract.interface;
      const payable = iface.receive || iface.fallback && iface.fallback.payable;
      assertArgument(payable || (tx.value || BN_0$1) === BN_0$1, "cannot send value to non-payable contract", "overrides.value", tx.value);
      assertArgument(iface.fallback || (tx.data || "0x") === "0x", "cannot send data to receive-only contract", "overrides.data", tx.data);
      return tx;
    }
    async staticCall(overrides) {
      const runner = getRunner(this._contract.runner, "call");
      assert$1(canCall(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
      const tx = await this.populateTransaction(overrides);
      try {
        return await runner.call(tx);
      } catch (error) {
        if (isCallException(error) && error.data) {
          throw this._contract.interface.makeError(error.data, tx);
        }
        throw error;
      }
    }
    async send(overrides) {
      const runner = this._contract.runner;
      assert$1(canSend(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
      const tx = await runner.sendTransaction(await this.populateTransaction(overrides));
      const provider = getProvider(this._contract.runner);
      return new ContractTransactionResponse(this._contract.interface, provider, tx);
    }
    async estimateGas(overrides) {
      const runner = getRunner(this._contract.runner, "estimateGas");
      assert$1(canEstimate(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" });
      return await runner.estimateGas(await this.populateTransaction(overrides));
    }
  }
  class WrappedMethod extends _WrappedMethodBase() {
    constructor(contract, key) {
      super();
      this.name = "";
      defineProperties(this, {
        name: contract.interface.getFunctionName(key),
        _contract: contract,
        _key: key
      });
      const proxy = new Proxy(this, {
        apply: async (target, thisArg, args) => {
          const fragment = target.getFragment(...args);
          if (fragment.constant) {
            return await target.staticCall(...args);
          }
          return await target.send(...args);
        }
      });
      return proxy;
    }
    get fragment() {
      const fragment = this._contract.interface.getFunction(this._key);
      assert$1(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
        operation: "fragment"
      });
      return fragment;
    }
    getFragment(...args) {
      const fragment = this._contract.interface.getFunction(this._key, args);
      assert$1(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
        operation: "fragment"
      });
      return fragment;
    }
    async populateTransaction(...args) {
      const fragment = this.getFragment(...args);
      let overrides = {};
      if (fragment.inputs.length + 1 === args.length) {
        overrides = await copyOverrides(args.pop());
      }
      if (fragment.inputs.length !== args.length) {
        throw new Error("internal error: fragment inputs doesn't match arguments; should not happen");
      }
      const resolvedArgs = await resolveArgs(this._contract.runner, fragment.inputs, args);
      return Object.assign({}, overrides, await resolveProperties({
        to: this._contract.getAddress(),
        data: this._contract.interface.encodeFunctionData(fragment, resolvedArgs)
      }));
    }
    async staticCall(...args) {
      const result = await this.staticCallResult(...args);
      if (result.length === 1) {
        return result[0];
      }
      return result;
    }
    async send(...args) {
      const runner = this._contract.runner;
      assert$1(canSend(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
      const tx = await runner.sendTransaction(await this.populateTransaction(...args));
      const provider = getProvider(this._contract.runner);
      return new ContractTransactionResponse(this._contract.interface, provider, tx);
    }
    async estimateGas(...args) {
      const runner = getRunner(this._contract.runner, "estimateGas");
      assert$1(canEstimate(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" });
      return await runner.estimateGas(await this.populateTransaction(...args));
    }
    async staticCallResult(...args) {
      const runner = getRunner(this._contract.runner, "call");
      assert$1(canCall(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
      const tx = await this.populateTransaction(...args);
      let result = "0x";
      try {
        result = await runner.call(tx);
      } catch (error) {
        if (isCallException(error) && error.data) {
          throw this._contract.interface.makeError(error.data, tx);
        }
        throw error;
      }
      const fragment = this.getFragment(...args);
      return this._contract.interface.decodeFunctionResult(fragment, result);
    }
  }
  function _WrappedEventBase() {
    return Function;
  }
  class WrappedEvent extends _WrappedEventBase() {
    constructor(contract, key) {
      super();
      this.name = "";
      defineProperties(this, {
        name: contract.interface.getEventName(key),
        _contract: contract,
        _key: key
      });
      return new Proxy(this, {
        apply: (target, thisArg, args) => {
          return new PreparedTopicFilter(contract, target.getFragment(...args), args);
        }
      });
    }
    get fragment() {
      const fragment = this._contract.interface.getEvent(this._key);
      assert$1(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
        operation: "fragment"
      });
      return fragment;
    }
    getFragment(...args) {
      const fragment = this._contract.interface.getEvent(this._key, args);
      assert$1(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
        operation: "fragment"
      });
      return fragment;
    }
  }
  const internal = Symbol.for("_ethersInternal_contract");
  const internalValues = /* @__PURE__ */ new WeakMap();
  function setInternal(contract, values) {
    internalValues.set(contract[internal], values);
  }
  function getInternal(contract) {
    return internalValues.get(contract[internal]);
  }
  function isDeferred(value) {
    return value && typeof value === "object" && "getTopicFilter" in value && typeof value.getTopicFilter === "function" && value.fragment;
  }
  async function getSubInfo(contract, event) {
    let topics;
    let fragment = null;
    if (Array.isArray(event)) {
      const topicHashify = function(name) {
        if (isHexString(name, 32)) {
          return name;
        }
        const fragment2 = contract.interface.getEvent(name);
        assertArgument(fragment2, "unknown fragment", "name", name);
        return fragment2.topicHash;
      };
      topics = event.map((e) => {
        if (e == null) {
          return null;
        }
        if (Array.isArray(e)) {
          return e.map(topicHashify);
        }
        return topicHashify(e);
      });
    } else if (event === "*") {
      topics = [null];
    } else if (typeof event === "string") {
      if (isHexString(event, 32)) {
        topics = [event];
      } else {
        fragment = contract.interface.getEvent(event);
        assertArgument(fragment, "unknown fragment", "event", event);
        topics = [fragment.topicHash];
      }
    } else if (isDeferred(event)) {
      topics = await event.getTopicFilter();
    } else if ("fragment" in event) {
      fragment = event.fragment;
      topics = [fragment.topicHash];
    } else {
      assertArgument(false, "unknown event name", "event", event);
    }
    topics = topics.map((t2) => {
      if (t2 == null) {
        return null;
      }
      if (Array.isArray(t2)) {
        const items = Array.from(new Set(t2.map((t3) => t3.toLowerCase())).values());
        if (items.length === 1) {
          return items[0];
        }
        items.sort();
        return items;
      }
      return t2.toLowerCase();
    });
    const tag = topics.map((t2) => {
      if (t2 == null) {
        return "null";
      }
      if (Array.isArray(t2)) {
        return t2.join("|");
      }
      return t2;
    }).join("&");
    return { fragment, tag, topics };
  }
  async function hasSub(contract, event) {
    const { subs } = getInternal(contract);
    return subs.get((await getSubInfo(contract, event)).tag) || null;
  }
  async function getSub(contract, operation, event) {
    const provider = getProvider(contract.runner);
    assert$1(provider, "contract runner does not support subscribing", "UNSUPPORTED_OPERATION", { operation });
    const { fragment, tag, topics } = await getSubInfo(contract, event);
    const { addr, subs } = getInternal(contract);
    let sub = subs.get(tag);
    if (!sub) {
      const address = addr ? addr : contract;
      const filter = { address, topics };
      const listener = (log) => {
        let foundFragment = fragment;
        if (foundFragment == null) {
          try {
            foundFragment = contract.interface.getEvent(log.topics[0]);
          } catch (error) {
          }
        }
        if (foundFragment) {
          const _foundFragment = foundFragment;
          const args = fragment ? contract.interface.decodeEventLog(fragment, log.data, log.topics) : [];
          emit(contract, event, args, (listener2) => {
            return new ContractEventPayload(contract, listener2, event, _foundFragment, log);
          });
        } else {
          emit(contract, event, [], (listener2) => {
            return new ContractUnknownEventPayload(contract, listener2, event, log);
          });
        }
      };
      let starting = [];
      const start = () => {
        if (starting.length) {
          return;
        }
        starting.push(provider.on(filter, listener));
      };
      const stop = async () => {
        if (starting.length == 0) {
          return;
        }
        let started = starting;
        starting = [];
        await Promise.all(started);
        provider.off(filter, listener);
      };
      sub = { tag, listeners: [], start, stop };
      subs.set(tag, sub);
    }
    return sub;
  }
  let lastEmit = Promise.resolve();
  async function _emit(contract, event, args, payloadFunc) {
    await lastEmit;
    const sub = await hasSub(contract, event);
    if (!sub) {
      return false;
    }
    const count = sub.listeners.length;
    sub.listeners = sub.listeners.filter(({ listener, once }) => {
      const passArgs = args.slice();
      if (payloadFunc) {
        passArgs.push(payloadFunc(once ? null : listener));
      }
      try {
        listener.call(contract, ...passArgs);
      } catch (error) {
      }
      return !once;
    });
    return count > 0;
  }
  async function emit(contract, event, args, payloadFunc) {
    try {
      await lastEmit;
    } catch (error) {
    }
    const resultPromise = _emit(contract, event, args, payloadFunc);
    lastEmit = resultPromise;
    return await resultPromise;
  }
  const passProperties = ["then"];
  const _BaseContract = class {
    constructor(target, abi, runner, _deployTx) {
      if (runner == null) {
        runner = null;
      }
      const iface = Interface.from(abi);
      defineProperties(this, { target, runner, interface: iface });
      Object.defineProperty(this, internal, { value: {} });
      let addrPromise;
      let addr = null;
      let deployTx = null;
      if (_deployTx) {
        const provider = getProvider(runner);
        deployTx = new ContractTransactionResponse(this.interface, provider, _deployTx);
      }
      let subs = /* @__PURE__ */ new Map();
      if (typeof target === "string") {
        if (isHexString(target)) {
          addr = target;
          addrPromise = Promise.resolve(target);
        } else {
          const resolver = getRunner(runner, "resolveName");
          if (!canResolve(resolver)) {
            throw makeError("contract runner does not support name resolution", "UNSUPPORTED_OPERATION", {
              operation: "resolveName"
            });
          }
          addrPromise = resolver.resolveName(target).then((addr2) => {
            if (addr2 == null) {
              throw new Error("TODO");
            }
            getInternal(this).addr = addr2;
            return addr2;
          });
        }
      } else {
        addrPromise = target.getAddress().then((addr2) => {
          if (addr2 == null) {
            throw new Error("TODO");
          }
          getInternal(this).addr = addr2;
          return addr2;
        });
      }
      setInternal(this, { addrPromise, addr, deployTx, subs });
      const filters = new Proxy({}, {
        get: (target2, _prop, receiver) => {
          if (passProperties.indexOf(_prop) >= 0) {
            return Reflect.get(target2, _prop, receiver);
          }
          const prop = String(_prop);
          const result = this.getEvent(prop);
          if (result) {
            return result;
          }
          throw new Error(`unknown contract event: ${prop}`);
        }
      });
      defineProperties(this, { filters });
      defineProperties(this, {
        fallback: iface.receive || iface.fallback ? new WrappedFallback(this) : null
      });
      return new Proxy(this, {
        get: (target2, _prop, receiver) => {
          if (_prop in target2 || passProperties.indexOf(_prop) >= 0) {
            return Reflect.get(target2, _prop, receiver);
          }
          const prop = String(_prop);
          const result = target2.getFunction(prop);
          if (result) {
            return result;
          }
          throw new Error(`unknown contract method: ${prop}`);
        }
      });
    }
    connect(runner) {
      return new _BaseContract(this.target, this.interface, runner);
    }
    async getAddress() {
      return await getInternal(this).addrPromise;
    }
    async getDeployedCode() {
      const provider = getProvider(this.runner);
      assert$1(provider, "runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "getDeployedCode" });
      const code = await provider.getCode(await this.getAddress());
      if (code === "0x") {
        return null;
      }
      return code;
    }
    async waitForDeployment() {
      const deployTx = this.deploymentTransaction();
      if (deployTx) {
        await deployTx.wait();
        return this;
      }
      const code = await this.getDeployedCode();
      if (code != null) {
        return this;
      }
      const provider = getProvider(this.runner);
      assert$1(provider != null, "contract runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "waitForDeployment" });
      return new Promise((resolve, reject) => {
        const checkCode = async () => {
          try {
            const code2 = await this.getDeployedCode();
            if (code2 != null) {
              return resolve(this);
            }
            provider.once("block", checkCode);
          } catch (error) {
            reject(error);
          }
        };
        checkCode();
      });
    }
    deploymentTransaction() {
      return getInternal(this).deployTx;
    }
    getFunction(key) {
      if (typeof key !== "string") {
        key = key.format();
      }
      return new WrappedMethod(this, key);
    }
    getEvent(key) {
      if (typeof key !== "string") {
        key = key.format();
      }
      return new WrappedEvent(this, key);
    }
    async queryTransaction(hash2) {
      throw new Error("@TODO");
    }
    async queryFilter(event, fromBlock, toBlock) {
      if (fromBlock == null) {
        fromBlock = 0;
      }
      if (toBlock == null) {
        toBlock = "latest";
      }
      const { addr, addrPromise } = getInternal(this);
      const address = addr ? addr : await addrPromise;
      const { fragment, topics } = await getSubInfo(this, event);
      const filter = { address, topics, fromBlock, toBlock };
      const provider = getProvider(this.runner);
      assert$1(provider, "contract runner does not have a provider", "UNSUPPORTED_OPERATION", { operation: "queryFilter" });
      return (await provider.getLogs(filter)).map((log) => {
        let foundFragment = fragment;
        if (foundFragment == null) {
          try {
            foundFragment = this.interface.getEvent(log.topics[0]);
          } catch (error) {
          }
        }
        if (foundFragment) {
          return new EventLog(log, this.interface, foundFragment);
        } else {
          return new Log(log, provider);
        }
      });
    }
    async on(event, listener) {
      const sub = await getSub(this, "on", event);
      sub.listeners.push({ listener, once: false });
      sub.start();
      return this;
    }
    async once(event, listener) {
      const sub = await getSub(this, "once", event);
      sub.listeners.push({ listener, once: true });
      sub.start();
      return this;
    }
    async emit(event, ...args) {
      return await emit(this, event, args, null);
    }
    async listenerCount(event) {
      if (event) {
        const sub = await hasSub(this, event);
        if (!sub) {
          return 0;
        }
        return sub.listeners.length;
      }
      const { subs } = getInternal(this);
      let total = 0;
      for (const { listeners } of subs.values()) {
        total += listeners.length;
      }
      return total;
    }
    async listeners(event) {
      if (event) {
        const sub = await hasSub(this, event);
        if (!sub) {
          return [];
        }
        return sub.listeners.map(({ listener }) => listener);
      }
      const { subs } = getInternal(this);
      let result = [];
      for (const { listeners } of subs.values()) {
        result = result.concat(listeners.map(({ listener }) => listener));
      }
      return result;
    }
    async off(event, listener) {
      const sub = await hasSub(this, event);
      if (!sub) {
        return this;
      }
      if (listener) {
        const index = sub.listeners.map(({ listener: listener2 }) => listener2).indexOf(listener);
        if (index >= 0) {
          sub.listeners.splice(index, 1);
        }
      }
      if (listener == null || sub.listeners.length === 0) {
        sub.stop();
        getInternal(this).subs.delete(sub.tag);
      }
      return this;
    }
    async removeAllListeners(event) {
      if (event) {
        const sub = await hasSub(this, event);
        if (!sub) {
          return this;
        }
        sub.stop();
        getInternal(this).subs.delete(sub.tag);
      } else {
        const { subs } = getInternal(this);
        for (const { tag, stop } of subs.values()) {
          stop();
          subs.delete(tag);
        }
      }
      return this;
    }
    async addListener(event, listener) {
      return await this.on(event, listener);
    }
    async removeListener(event, listener) {
      return await this.off(event, listener);
    }
    static buildClass(abi) {
      class CustomContract extends _BaseContract {
        constructor(address, runner = null) {
          super(address, abi, runner);
        }
      }
      return CustomContract;
    }
    static from(target, abi, runner) {
      if (runner == null) {
        runner = null;
      }
      const contract = new this(target, abi, runner);
      return contract;
    }
  };
  let BaseContract = _BaseContract;
  internal;
  function _ContractBase() {
    return BaseContract;
  }
  class Contract extends _ContractBase() {
  }
  function getIpfsLink(link) {
    if (link.match(/^ipfs:\/\/ipfs\//i)) {
      link = link.substring(12);
    } else if (link.match(/^ipfs:\/\//i)) {
      link = link.substring(7);
    } else {
      assertArgument(false, "unsupported IPFS format", "link", link);
    }
    return `https://gateway.ipfs.io/ipfs/${link}`;
  }
  class MulticoinProviderPlugin {
    constructor(name) {
      defineProperties(this, { name });
    }
    connect(proivder) {
      return this;
    }
    supportsCoinType(coinType) {
      return false;
    }
    async encodeAddress(coinType, address) {
      throw new Error("unsupported coin");
    }
    async decodeAddress(coinType, data) {
      throw new Error("unsupported coin");
    }
  }
  const matcherIpfs = new RegExp("^(ipfs)://(.*)$", "i");
  const matchers = [
    new RegExp("^(https)://(.*)$", "i"),
    new RegExp("^(data):(.*)$", "i"),
    matcherIpfs,
    new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i")
  ];
  const _EnsResolver = class {
    constructor(provider, address, name) {
      __privateAdd(this, _fetch);
      __privateAdd(this, _supports2544, void 0);
      __privateAdd(this, _resolver, void 0);
      defineProperties(this, { provider, address, name });
      __privateSet(this, _supports2544, null);
      __privateSet(this, _resolver, new Contract(address, [
        "function supportsInterface(bytes4) view returns (bool)",
        "function resolve(bytes, bytes) view returns (bytes)",
        "function addr(bytes32) view returns (address)",
        "function addr(bytes32, uint) view returns (address)",
        "function text(bytes32, string) view returns (string)",
        "function contenthash() view returns (bytes)"
      ], provider));
    }
    async supportsWildcard() {
      if (__privateGet(this, _supports2544) == null) {
        __privateSet(this, _supports2544, (async () => {
          try {
            return await __privateGet(this, _resolver).supportsInterface("0x9061b923");
          } catch (error) {
            if (isError(error, "CALL_EXCEPTION")) {
              return false;
            }
            __privateSet(this, _supports2544, null);
            throw error;
          }
        })());
      }
      return await __privateGet(this, _supports2544);
    }
    async getAddress(coinType) {
      if (coinType == null) {
        coinType = 60;
      }
      if (coinType === 60) {
        try {
          const result = await __privateMethod(this, _fetch, fetch_fn).call(this, "addr(bytes32)");
          if (result == null || result === ZeroAddress) {
            return null;
          }
          return result;
        } catch (error) {
          if (isError(error, "CALL_EXCEPTION")) {
            return null;
          }
          throw error;
        }
      }
      let coinPlugin = null;
      for (const plugin of this.provider.plugins) {
        if (!(plugin instanceof MulticoinProviderPlugin)) {
          continue;
        }
        if (plugin.supportsCoinType(coinType)) {
          coinPlugin = plugin;
          break;
        }
      }
      if (coinPlugin == null) {
        return null;
      }
      const data = await __privateMethod(this, _fetch, fetch_fn).call(this, "addr(bytes32,uint)", [coinType]);
      if (data == null || data === "0x") {
        return null;
      }
      const address = await coinPlugin.encodeAddress(coinType, data);
      if (address != null) {
        return address;
      }
      assert$1(false, `invalid coin data`, "UNSUPPORTED_OPERATION", {
        operation: `getAddress(${coinType})`,
        info: { coinType, data }
      });
    }
    async getText(key) {
      const data = await __privateMethod(this, _fetch, fetch_fn).call(this, "text(bytes32,string)", [key]);
      if (data == null || data === "0x") {
        return null;
      }
      return data;
    }
    async getContentHash() {
      const data = await __privateMethod(this, _fetch, fetch_fn).call(this, "contenthash()");
      if (data == null || data === "0x") {
        return null;
      }
      const ipfs = data.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
      if (ipfs) {
        const scheme = ipfs[1] === "e3010170" ? "ipfs" : "ipns";
        const length = parseInt(ipfs[4], 16);
        if (ipfs[5].length === length * 2) {
          return `${scheme}://${encodeBase58("0x" + ipfs[2])}`;
        }
      }
      const swarm = data.match(/^0xe40101fa011b20([0-9a-f]*)$/);
      if (swarm && swarm[1].length === 64) {
        return `bzz://${swarm[1]}`;
      }
      assert$1(false, `invalid or unsupported content hash data`, "UNSUPPORTED_OPERATION", {
        operation: "getContentHash()",
        info: { data }
      });
    }
    async getAvatar() {
      const avatar = await this._getAvatar();
      return avatar.url;
    }
    async _getAvatar() {
      const linkage = [{ type: "name", value: this.name }];
      try {
        const avatar = await this.getText("avatar");
        if (avatar == null) {
          linkage.push({ type: "!avatar", value: "" });
          return { url: null, linkage };
        }
        linkage.push({ type: "avatar", value: avatar });
        for (let i2 = 0; i2 < matchers.length; i2++) {
          const match = avatar.match(matchers[i2]);
          if (match == null) {
            continue;
          }
          const scheme = match[1].toLowerCase();
          switch (scheme) {
            case "https":
            case "data":
              linkage.push({ type: "url", value: avatar });
              return { linkage, url: avatar };
            case "ipfs": {
              const url = getIpfsLink(avatar);
              linkage.push({ type: "ipfs", value: avatar });
              linkage.push({ type: "url", value: url });
              return { linkage, url };
            }
            case "erc721":
            case "erc1155": {
              const selector = scheme === "erc721" ? "tokenURI(uint256)" : "uri(uint256)";
              linkage.push({ type: scheme, value: avatar });
              const owner = await this.getAddress();
              if (owner == null) {
                linkage.push({ type: "!owner", value: "" });
                return { url: null, linkage };
              }
              const comps = (match[2] || "").split("/");
              if (comps.length !== 2) {
                linkage.push({ type: `!${scheme}caip`, value: match[2] || "" });
                return { url: null, linkage };
              }
              const tokenId = comps[1];
              const contract = new Contract(comps[0], [
                "function tokenURI(uint) view returns (string)",
                "function ownerOf(uint) view returns (address)",
                "function uri(uint) view returns (string)",
                "function balanceOf(address, uint256) view returns (uint)"
              ], this.provider);
              if (scheme === "erc721") {
                const tokenOwner = await contract.ownerOf(tokenId);
                if (owner !== tokenOwner) {
                  linkage.push({ type: "!owner", value: tokenOwner });
                  return { url: null, linkage };
                }
                linkage.push({ type: "owner", value: tokenOwner });
              } else if (scheme === "erc1155") {
                const balance = await contract.balanceOf(owner, tokenId);
                if (!balance) {
                  linkage.push({ type: "!balance", value: "0" });
                  return { url: null, linkage };
                }
                linkage.push({ type: "balance", value: balance.toString() });
              }
              let metadataUrl = await contract[selector](tokenId);
              if (metadataUrl == null || metadataUrl === "0x") {
                linkage.push({ type: "!metadata-url", value: "" });
                return { url: null, linkage };
              }
              linkage.push({ type: "metadata-url-base", value: metadataUrl });
              if (scheme === "erc1155") {
                metadataUrl = metadataUrl.replace("{id}", toBeHex(tokenId, 32).substring(2));
                linkage.push({ type: "metadata-url-expanded", value: metadataUrl });
              }
              if (metadataUrl.match(/^ipfs:/i)) {
                metadataUrl = getIpfsLink(metadataUrl);
              }
              linkage.push({ type: "metadata-url", value: metadataUrl });
              let metadata = {};
              const response = await new FetchRequest(metadataUrl).send();
              response.assertOk();
              try {
                metadata = response.bodyJson;
              } catch (error) {
                try {
                  linkage.push({ type: "!metadata", value: response.bodyText });
                } catch (error2) {
                  const bytes2 = response.body;
                  if (bytes2) {
                    linkage.push({ type: "!metadata", value: hexlify(bytes2) });
                  }
                  return { url: null, linkage };
                }
                return { url: null, linkage };
              }
              if (!metadata) {
                linkage.push({ type: "!metadata", value: "" });
                return { url: null, linkage };
              }
              linkage.push({ type: "metadata", value: JSON.stringify(metadata) });
              let imageUrl = metadata.image;
              if (typeof imageUrl !== "string") {
                linkage.push({ type: "!imageUrl", value: "" });
                return { url: null, linkage };
              }
              if (imageUrl.match(/^(https:\/\/|data:)/i)) {
              } else {
                const ipfs = imageUrl.match(matcherIpfs);
                if (ipfs == null) {
                  linkage.push({ type: "!imageUrl-ipfs", value: imageUrl });
                  return { url: null, linkage };
                }
                linkage.push({ type: "imageUrl-ipfs", value: imageUrl });
                imageUrl = getIpfsLink(imageUrl);
              }
              linkage.push({ type: "url", value: imageUrl });
              return { linkage, url: imageUrl };
            }
          }
        }
      } catch (error) {
      }
      return { linkage, url: null };
    }
    static async getEnsAddress(provider) {
      const network = await provider.getNetwork();
      const ensPlugin = network.getPlugin("org.ethers.plugins.network.Ens");
      assert$1(ensPlugin, "network does not support ENS", "UNSUPPORTED_OPERATION", {
        operation: "getEnsAddress",
        info: { network }
      });
      return ensPlugin.address;
    }
    static async fromName(provider, name) {
      var _a;
      let currentName = name;
      while (true) {
        if (currentName === "" || currentName === ".") {
          return null;
        }
        if (name !== "eth" && currentName === "eth") {
          return null;
        }
        const addr = await __privateMethod(_a = _EnsResolver, _getResolver, getResolver_fn).call(_a, provider, currentName);
        if (addr != null) {
          const resolver = new _EnsResolver(provider, addr, name);
          if (currentName !== name && !await resolver.supportsWildcard()) {
            return null;
          }
          return resolver;
        }
        currentName = currentName.split(".").slice(1).join(".");
      }
    }
  };
  let EnsResolver = _EnsResolver;
  _supports2544 = new WeakMap();
  _resolver = new WeakMap();
  _fetch = new WeakSet();
  fetch_fn = async function(funcName, params) {
    params = (params || []).slice();
    const iface = __privateGet(this, _resolver).interface;
    params.unshift(namehash(this.name));
    let fragment = null;
    if (await this.supportsWildcard()) {
      fragment = iface.getFunction(funcName);
      assert$1(fragment, "missing fragment", "UNKNOWN_ERROR", {
        info: { funcName }
      });
      params = [
        dnsEncode(this.name),
        iface.encodeFunctionData(fragment, params)
      ];
      funcName = "resolve(bytes,bytes)";
    }
    params.push({
      ccipReadEnable: true
    });
    try {
      const result = await __privateGet(this, _resolver)[funcName](...params);
      if (fragment) {
        return iface.decodeFunctionResult(fragment, result)[0];
      }
      return result;
    } catch (error) {
      if (!isError(error, "CALL_EXCEPTION")) {
        throw error;
      }
    }
    return null;
  };
  _getResolver = new WeakSet();
  getResolver_fn = async function(provider, name) {
    const ensAddr = await _EnsResolver.getEnsAddress(provider);
    try {
      const contract = new Contract(ensAddr, [
        "function resolver(bytes32) view returns (address)"
      ], provider);
      const addr = await contract.resolver(namehash(name), {
        enableCcipRead: true
      });
      if (addr === ZeroAddress) {
        return null;
      }
      return addr;
    } catch (error) {
      throw error;
    }
    return null;
  };
  __privateAdd(EnsResolver, _getResolver);
  const BN_0 = BigInt(0);
  function allowNull(format2, nullValue) {
    return function(value) {
      if (value == null) {
        return nullValue;
      }
      return format2(value);
    };
  }
  function arrayOf(format2) {
    return (array) => {
      if (!Array.isArray(array)) {
        throw new Error("not an array");
      }
      return array.map((i2) => format2(i2));
    };
  }
  function object(format2, altNames) {
    return (value) => {
      const result = {};
      for (const key in format2) {
        let srcKey = key;
        if (altNames && key in altNames && !(srcKey in value)) {
          for (const altKey of altNames[key]) {
            if (altKey in value) {
              srcKey = altKey;
              break;
            }
          }
        }
        try {
          const nv = format2[key](value[srcKey]);
          if (nv !== void 0) {
            result[key] = nv;
          }
        } catch (error) {
          const message = error instanceof Error ? error.message : "not-an-error";
          assert$1(false, `invalid value for value.${key} (${message})`, "BAD_DATA", { value });
        }
      }
      return result;
    };
  }
  function formatBoolean(value) {
    switch (value) {
      case true:
      case "true":
        return true;
      case false:
      case "false":
        return false;
    }
    assertArgument(false, `invalid boolean; ${JSON.stringify(value)}`, "value", value);
  }
  function formatData(value) {
    assertArgument(isHexString(value, true), "invalid data", "value", value);
    return value;
  }
  function formatHash(value) {
    assertArgument(isHexString(value, 32), "invalid hash", "value", value);
    return value;
  }
  const _formatLog = object({
    address: getAddress,
    blockHash: formatHash,
    blockNumber: getNumber,
    data: formatData,
    index: getNumber,
    removed: formatBoolean,
    topics: arrayOf(formatHash),
    transactionHash: formatHash,
    transactionIndex: getNumber
  }, {
    index: ["logIndex"]
  });
  function formatLog(value) {
    return _formatLog(value);
  }
  const _formatBlock = object({
    hash: allowNull(formatHash),
    parentHash: formatHash,
    number: getNumber,
    timestamp: getNumber,
    nonce: allowNull(formatData),
    difficulty: getBigInt,
    gasLimit: getBigInt,
    gasUsed: getBigInt,
    miner: allowNull(getAddress),
    extraData: formatData,
    baseFeePerGas: allowNull(getBigInt)
  });
  function formatBlock(value) {
    const result = _formatBlock(value);
    result.transactions = value.transactions.map((tx) => {
      if (typeof tx === "string") {
        return tx;
      }
      return formatTransactionResponse(tx);
    });
    return result;
  }
  const _formatReceiptLog = object({
    transactionIndex: getNumber,
    blockNumber: getNumber,
    transactionHash: formatHash,
    address: getAddress,
    topics: arrayOf(formatHash),
    data: formatData,
    index: getNumber,
    blockHash: formatHash
  }, {
    index: ["logIndex"]
  });
  function formatReceiptLog(value) {
    return _formatReceiptLog(value);
  }
  const _formatTransactionReceipt = object({
    to: allowNull(getAddress, null),
    from: allowNull(getAddress, null),
    contractAddress: allowNull(getAddress, null),
    index: getNumber,
    root: allowNull(hexlify),
    gasUsed: getBigInt,
    logsBloom: allowNull(formatData),
    blockHash: formatHash,
    hash: formatHash,
    logs: arrayOf(formatReceiptLog),
    blockNumber: getNumber,
    cumulativeGasUsed: getBigInt,
    effectiveGasPrice: allowNull(getBigInt),
    status: allowNull(getNumber),
    type: getNumber
  }, {
    effectiveGasPrice: ["gasPrice"],
    hash: ["transactionHash"],
    index: ["transactionIndex"]
  });
  function formatTransactionReceipt(value) {
    return _formatTransactionReceipt(value);
  }
  function formatTransactionResponse(value) {
    if (value.to && getBigInt(value.to) === BN_0) {
      value.to = "0x0000000000000000000000000000000000000000";
    }
    const result = object({
      hash: formatHash,
      type: (value2) => {
        if (value2 === "0x" || value2 == null) {
          return 0;
        }
        return getNumber(value2);
      },
      accessList: allowNull(accessListify, null),
      blockHash: allowNull(formatHash, null),
      blockNumber: allowNull(getNumber, null),
      transactionIndex: allowNull(getNumber, null),
      from: getAddress,
      gasPrice: allowNull(getBigInt),
      maxPriorityFeePerGas: allowNull(getBigInt),
      maxFeePerGas: allowNull(getBigInt),
      gasLimit: getBigInt,
      to: allowNull(getAddress, null),
      value: getBigInt,
      nonce: getNumber,
      data: formatData,
      creates: allowNull(getAddress, null),
      chainId: allowNull(getBigInt, null)
    }, {
      data: ["input"],
      gasLimit: ["gas"]
    })(value);
    if (result.to == null && result.creates == null) {
      result.creates = getCreateAddress(result);
    }
    if ((value.type === 1 || value.type === 2) && value.accessList == null) {
      result.accessList = [];
    }
    if (value.signature) {
      result.signature = Signature.from(value.signature);
    } else {
      result.signature = Signature.from(value);
    }
    if (result.chainId == null) {
      const chainId = result.signature.legacyChainId;
      if (chainId != null) {
        result.chainId = chainId;
      }
    }
    if (result.blockHash && getBigInt(result.blockHash) === BN_0) {
      result.blockHash = null;
    }
    return result;
  }
  const EnsAddress = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
  class NetworkPlugin {
    constructor(name) {
      defineProperties(this, { name });
    }
    clone() {
      return new NetworkPlugin(this.name);
    }
  }
  class GasCostPlugin extends NetworkPlugin {
    constructor(effectiveBlock, costs) {
      if (effectiveBlock == null) {
        effectiveBlock = 0;
      }
      super(`org.ethers.network.plugins.GasCost#${effectiveBlock || 0}`);
      const props = { effectiveBlock };
      function set(name, nullish) {
        let value = (costs || {})[name];
        if (value == null) {
          value = nullish;
        }
        assertArgument(typeof value === "number", `invalud value for ${name}`, "costs", costs);
        props[name] = value;
      }
      set("txBase", 21e3);
      set("txCreate", 32e3);
      set("txDataZero", 4);
      set("txDataNonzero", 16);
      set("txAccessListStorageKey", 1900);
      set("txAccessListAddress", 2400);
      defineProperties(this, props);
    }
    clone() {
      return new GasCostPlugin(this.effectiveBlock, this);
    }
  }
  class EnsPlugin extends NetworkPlugin {
    constructor(address, targetNetwork) {
      super("org.ethers.plugins.network.Ens");
      defineProperties(this, {
        address: address || EnsAddress,
        targetNetwork: targetNetwork == null ? 1 : targetNetwork
      });
    }
    clone() {
      return new EnsPlugin(this.address, this.targetNetwork);
    }
  }
  const Networks = /* @__PURE__ */ new Map();
  const _Network = class {
    constructor(name, chainId) {
      __privateAdd(this, _name, void 0);
      __privateAdd(this, _chainId2, void 0);
      __privateAdd(this, _plugins, void 0);
      __privateSet(this, _name, name);
      __privateSet(this, _chainId2, getBigInt(chainId));
      __privateSet(this, _plugins, /* @__PURE__ */ new Map());
    }
    toJSON() {
      return { name: this.name, chainId: this.chainId };
    }
    get name() {
      return __privateGet(this, _name);
    }
    set name(value) {
      __privateSet(this, _name, value);
    }
    get chainId() {
      return __privateGet(this, _chainId2);
    }
    set chainId(value) {
      __privateSet(this, _chainId2, getBigInt(value, "chainId"));
    }
    get plugins() {
      return Array.from(__privateGet(this, _plugins).values());
    }
    attachPlugin(plugin) {
      if (__privateGet(this, _plugins).get(plugin.name)) {
        throw new Error(`cannot replace existing plugin: ${plugin.name} `);
      }
      __privateGet(this, _plugins).set(plugin.name, plugin.clone());
      return this;
    }
    getPlugin(name) {
      return __privateGet(this, _plugins).get(name) || null;
    }
    getPlugins(basename) {
      return this.plugins.filter((p2) => p2.name.split("#")[0] === basename);
    }
    clone() {
      const clone = new _Network(this.name, this.chainId);
      this.plugins.forEach((plugin) => {
        clone.attachPlugin(plugin.clone());
      });
      return clone;
    }
    computeIntrinsicGas(tx) {
      const costs = this.getPlugin("org.ethers.plugins.network.GasCost") || new GasCostPlugin();
      let gas = costs.txBase;
      if (tx.to == null) {
        gas += costs.txCreate;
      }
      if (tx.data) {
        for (let i2 = 2; i2 < tx.data.length; i2 += 2) {
          if (tx.data.substring(i2, i2 + 2) === "00") {
            gas += costs.txDataZero;
          } else {
            gas += costs.txDataNonzero;
          }
        }
      }
      if (tx.accessList) {
        const accessList = accessListify(tx.accessList);
        for (const addr in accessList) {
          gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;
        }
      }
      return gas;
    }
    static from(network) {
      injectCommonNetworks();
      if (network == null) {
        return _Network.from("mainnet");
      }
      if (typeof network === "number") {
        network = BigInt(network);
      }
      if (typeof network === "string" || typeof network === "bigint") {
        const networkFunc = Networks.get(network);
        if (networkFunc) {
          return networkFunc();
        }
        if (typeof network === "bigint") {
          return new _Network("unknown", network);
        }
        assertArgument(false, "unknown network", "network", network);
      }
      if (typeof network.clone === "function") {
        const clone = network.clone();
        return clone;
      }
      if (typeof network === "object") {
        assertArgument(typeof network.name === "string" && typeof network.chainId === "number", "invalid network object name or chainId", "network", network);
        const custom = new _Network(network.name, network.chainId);
        if (network.ensAddress || network.ensNetwork != null) {
          custom.attachPlugin(new EnsPlugin(network.ensAddress, network.ensNetwork));
        }
        return custom;
      }
      assertArgument(false, "invalid network", "network", network);
    }
    static register(nameOrChainId, networkFunc) {
      if (typeof nameOrChainId === "number") {
        nameOrChainId = BigInt(nameOrChainId);
      }
      const existing = Networks.get(nameOrChainId);
      if (existing) {
        assertArgument(false, `conflicting network for ${JSON.stringify(existing.name)}`, "nameOrChainId", nameOrChainId);
      }
      Networks.set(nameOrChainId, networkFunc);
    }
  };
  let Network = _Network;
  _name = new WeakMap();
  _chainId2 = new WeakMap();
  _plugins = new WeakMap();
  let injected = false;
  function injectCommonNetworks() {
    if (injected) {
      return;
    }
    injected = true;
    function registerEth(name, chainId, options) {
      const func = function() {
        const network = new Network(name, chainId);
        if (options.ensNetwork != null) {
          network.attachPlugin(new EnsPlugin(null, options.ensNetwork));
        }
        if (options.priorityFee)
          ;
        network.attachPlugin(new GasCostPlugin());
        return network;
      };
      Network.register(name, func);
      Network.register(chainId, func);
      if (options.altNames) {
        options.altNames.forEach((name2) => {
          Network.register(name2, func);
        });
      }
    }
    registerEth("mainnet", 1, { ensNetwork: 1, altNames: ["homestead"] });
    registerEth("ropsten", 3, { ensNetwork: 3 });
    registerEth("rinkeby", 4, { ensNetwork: 4 });
    registerEth("goerli", 5, { ensNetwork: 5 });
    registerEth("kovan", 42, { ensNetwork: 42 });
    registerEth("classic", 61, {});
    registerEth("classicKotti", 6, {});
    registerEth("xdai", 100, { ensNetwork: 1 });
    registerEth("matic", 137, {
      ensNetwork: 1,
      etherscan: {
        apiKey: "W6T8DJW654GNTQ34EFEYYP3EZD9DD27CT7",
        url: "https://api.polygonscan.com/"
      }
    });
    registerEth("maticMumbai", 80001, {
      etherscan: {
        apiKey: "W6T8DJW654GNTQ34EFEYYP3EZD9DD27CT7",
        url: "https://api-testnet.polygonscan.com/"
      }
    });
    registerEth("bnb", 56, {
      ensNetwork: 1,
      etherscan: {
        apiKey: "EVTS3CU31AATZV72YQ55TPGXGMVIFUQ9M9",
        url: "http://api.bscscan.com"
      }
    });
    registerEth("bnbt", 97, {
      etherscan: {
        apiKey: "EVTS3CU31AATZV72YQ55TPGXGMVIFUQ9M9",
        url: "http://api-testnet.bscscan.com"
      }
    });
  }
  function copy$2(obj) {
    return JSON.parse(JSON.stringify(obj));
  }
  class PollingBlockSubscriber {
    constructor(provider) {
      __privateAdd(this, _poll);
      __privateAdd(this, _provider, void 0);
      __privateAdd(this, _poller, void 0);
      __privateAdd(this, _interval, void 0);
      __privateAdd(this, _blockNumber, void 0);
      __privateSet(this, _provider, provider);
      __privateSet(this, _poller, null);
      __privateSet(this, _interval, 4e3);
      __privateSet(this, _blockNumber, -2);
    }
    get pollingInterval() {
      return __privateGet(this, _interval);
    }
    set pollingInterval(value) {
      __privateSet(this, _interval, value);
    }
    start() {
      if (__privateGet(this, _poller)) {
        return;
      }
      __privateSet(this, _poller, __privateGet(this, _provider)._setTimeout(__privateMethod(this, _poll, poll_fn).bind(this), __privateGet(this, _interval)));
      __privateMethod(this, _poll, poll_fn).call(this);
    }
    stop() {
      if (!__privateGet(this, _poller)) {
        return;
      }
      __privateGet(this, _provider)._clearTimeout(__privateGet(this, _poller));
      __privateSet(this, _poller, null);
    }
    pause(dropWhilePaused) {
      this.stop();
      if (dropWhilePaused) {
        __privateSet(this, _blockNumber, -2);
      }
    }
    resume() {
      this.start();
    }
  }
  _provider = new WeakMap();
  _poller = new WeakMap();
  _interval = new WeakMap();
  _blockNumber = new WeakMap();
  _poll = new WeakSet();
  poll_fn = async function() {
    const blockNumber = await __privateGet(this, _provider).getBlockNumber();
    if (__privateGet(this, _blockNumber) === -2) {
      __privateSet(this, _blockNumber, blockNumber);
      return;
    }
    if (blockNumber !== __privateGet(this, _blockNumber)) {
      for (let b2 = __privateGet(this, _blockNumber) + 1; b2 <= blockNumber; b2++) {
        if (__privateGet(this, _poller) == null) {
          return;
        }
        await __privateGet(this, _provider).emit("block", b2);
      }
      __privateSet(this, _blockNumber, blockNumber);
    }
    if (__privateGet(this, _poller) == null) {
      return;
    }
    __privateSet(this, _poller, __privateGet(this, _provider)._setTimeout(__privateMethod(this, _poll, poll_fn).bind(this), __privateGet(this, _interval)));
  };
  class OnBlockSubscriber {
    constructor(provider) {
      __privateAdd(this, _provider2, void 0);
      __privateAdd(this, _poll2, void 0);
      __privateAdd(this, _running, void 0);
      __privateSet(this, _provider2, provider);
      __privateSet(this, _running, false);
      __privateSet(this, _poll2, (blockNumber) => {
        this._poll(blockNumber, __privateGet(this, _provider2));
      });
    }
    async _poll(blockNumber, provider) {
      throw new Error("sub-classes must override this");
    }
    start() {
      if (__privateGet(this, _running)) {
        return;
      }
      __privateSet(this, _running, true);
      __privateGet(this, _poll2).call(this, -2);
      __privateGet(this, _provider2).on("block", __privateGet(this, _poll2));
    }
    stop() {
      if (!__privateGet(this, _running)) {
        return;
      }
      __privateSet(this, _running, false);
      __privateGet(this, _provider2).off("block", __privateGet(this, _poll2));
    }
    pause(dropWhilePaused) {
      this.stop();
    }
    resume() {
      this.start();
    }
  }
  _provider2 = new WeakMap();
  _poll2 = new WeakMap();
  _running = new WeakMap();
  class PollingOrphanSubscriber extends OnBlockSubscriber {
    constructor(provider, filter) {
      super(provider);
      __privateAdd(this, _filter2, void 0);
      __privateSet(this, _filter2, copy$2(filter));
    }
    async _poll(blockNumber, provider) {
      throw new Error("@TODO");
    }
  }
  _filter2 = new WeakMap();
  class PollingTransactionSubscriber extends OnBlockSubscriber {
    constructor(provider, hash2) {
      super(provider);
      __privateAdd(this, _hash, void 0);
      __privateSet(this, _hash, hash2);
    }
    async _poll(blockNumber, provider) {
      const tx = await provider.getTransactionReceipt(__privateGet(this, _hash));
      if (tx) {
        provider.emit(__privateGet(this, _hash), tx);
      }
    }
  }
  _hash = new WeakMap();
  class PollingEventSubscriber {
    constructor(provider, filter) {
      __privateAdd(this, _poll3);
      __privateAdd(this, _provider3, void 0);
      __privateAdd(this, _filter3, void 0);
      __privateAdd(this, _poller2, void 0);
      __privateAdd(this, _running2, void 0);
      __privateAdd(this, _blockNumber2, void 0);
      __privateSet(this, _provider3, provider);
      __privateSet(this, _filter3, copy$2(filter));
      __privateSet(this, _poller2, __privateMethod(this, _poll3, poll_fn2).bind(this));
      __privateSet(this, _running2, false);
      __privateSet(this, _blockNumber2, -2);
    }
    start() {
      if (__privateGet(this, _running2)) {
        return;
      }
      __privateSet(this, _running2, true);
      if (__privateGet(this, _blockNumber2) === -2) {
        __privateGet(this, _provider3).getBlockNumber().then((blockNumber) => {
          __privateSet(this, _blockNumber2, blockNumber);
        });
      }
      __privateGet(this, _provider3).on("block", __privateGet(this, _poller2));
    }
    stop() {
      if (!__privateGet(this, _running2)) {
        return;
      }
      __privateSet(this, _running2, false);
      __privateGet(this, _provider3).off("block", __privateGet(this, _poller2));
    }
    pause(dropWhilePaused) {
      this.stop();
      if (dropWhilePaused) {
        __privateSet(this, _blockNumber2, -2);
      }
    }
    resume() {
      this.start();
    }
  }
  _provider3 = new WeakMap();
  _filter3 = new WeakMap();
  _poller2 = new WeakMap();
  _running2 = new WeakMap();
  _blockNumber2 = new WeakMap();
  _poll3 = new WeakSet();
  poll_fn2 = async function(blockNumber) {
    if (__privateGet(this, _blockNumber2) === -2) {
      return;
    }
    const filter = copy$2(__privateGet(this, _filter3));
    filter.fromBlock = __privateGet(this, _blockNumber2) + 1;
    filter.toBlock = blockNumber;
    const logs = await __privateGet(this, _provider3).getLogs(filter);
    if (logs.length === 0) {
      if (__privateGet(this, _blockNumber2) < blockNumber - 60) {
        __privateSet(this, _blockNumber2, blockNumber - 60);
      }
      return;
    }
    __privateSet(this, _blockNumber2, blockNumber);
    for (const log of logs) {
      __privateGet(this, _provider3).emit(__privateGet(this, _filter3), log);
    }
  };
  const BN_2 = BigInt(2);
  const MAX_CCIP_REDIRECTS = 10;
  function isPromise(value) {
    return value && typeof value.then === "function";
  }
  function getTag(prefix, value) {
    return prefix + ":" + JSON.stringify(value, (k2, v2) => {
      if (v2 == null) {
        return "null";
      }
      if (typeof v2 === "bigint") {
        return `bigint:${v2.toString()}`;
      }
      if (typeof v2 === "string") {
        return v2.toLowerCase();
      }
      if (typeof v2 === "object" && !Array.isArray(v2)) {
        const keys = Object.keys(v2);
        keys.sort();
        return keys.reduce((accum, key) => {
          accum[key] = v2[key];
          return accum;
        }, {});
      }
      return v2;
    });
  }
  class UnmanagedSubscriber {
    constructor(name) {
      defineProperties(this, { name });
    }
    start() {
    }
    stop() {
    }
    pause(dropWhilePaused) {
    }
    resume() {
    }
  }
  function copy$1(value) {
    return JSON.parse(JSON.stringify(value));
  }
  function concisify(items) {
    items = Array.from(new Set(items).values());
    items.sort();
    return items;
  }
  async function getSubscription(_event2, provider) {
    if (_event2 == null) {
      throw new Error("invalid event");
    }
    if (Array.isArray(_event2)) {
      _event2 = { topics: _event2 };
    }
    if (typeof _event2 === "string") {
      switch (_event2) {
        case "block":
        case "pending":
        case "debug":
        case "network": {
          return { type: _event2, tag: _event2 };
        }
      }
    }
    if (isHexString(_event2, 32)) {
      const hash2 = _event2.toLowerCase();
      return { type: "transaction", tag: getTag("tx", { hash: hash2 }), hash: hash2 };
    }
    if (_event2.orphan) {
      const event = _event2;
      return { type: "orphan", tag: getTag("orphan", event), filter: copy$1(event) };
    }
    if (_event2.address || _event2.topics) {
      const event = _event2;
      const filter = {
        topics: (event.topics || []).map((t2) => {
          if (t2 == null) {
            return null;
          }
          if (Array.isArray(t2)) {
            return concisify(t2.map((t3) => t3.toLowerCase()));
          }
          return t2.toLowerCase();
        })
      };
      if (event.address) {
        const addresses = [];
        const promises = [];
        const addAddress = (addr) => {
          if (isHexString(addr)) {
            addresses.push(addr);
          } else {
            promises.push((async () => {
              addresses.push(await resolveAddress(addr, provider));
            })());
          }
        };
        if (Array.isArray(event.address)) {
          event.address.forEach(addAddress);
        } else {
          addAddress(event.address);
        }
        if (promises.length) {
          await Promise.all(promises);
        }
        filter.address = concisify(addresses.map((a2) => a2.toLowerCase()));
      }
      return { filter, tag: getTag("event", filter), type: "event" };
    }
    assertArgument(false, "unknown ProviderEvent", "event", _event2);
  }
  function getTime() {
    return new Date().getTime();
  }
  class AbstractProvider {
    constructor(_network3) {
      __privateAdd(this, _perform);
      __privateAdd(this, _call);
      __privateAdd(this, _checkNetwork);
      __privateAdd(this, _getAccountValue);
      __privateAdd(this, _getBlock);
      __privateAdd(this, _hasSub);
      __privateAdd(this, _getSub);
      __privateAdd(this, _subs, void 0);
      __privateAdd(this, _plugins2, void 0);
      __privateAdd(this, _pausedState, void 0);
      __privateAdd(this, _networkPromise, void 0);
      __privateAdd(this, _anyNetwork, void 0);
      __privateAdd(this, _performCache, void 0);
      __privateAdd(this, _lastBlockNumber, void 0);
      __privateAdd(this, _nextTimer, void 0);
      __privateAdd(this, _timers, void 0);
      __privateAdd(this, _disableCcipRead, void 0);
      if (_network3 === "any") {
        __privateSet(this, _anyNetwork, true);
        __privateSet(this, _networkPromise, null);
      } else if (_network3) {
        const network = Network.from(_network3);
        __privateSet(this, _anyNetwork, false);
        __privateSet(this, _networkPromise, Promise.resolve(network));
        setTimeout(() => {
          this.emit("network", network, null);
        }, 0);
      } else {
        __privateSet(this, _anyNetwork, false);
        __privateSet(this, _networkPromise, null);
      }
      __privateSet(this, _lastBlockNumber, -1);
      __privateSet(this, _performCache, /* @__PURE__ */ new Map());
      __privateSet(this, _subs, /* @__PURE__ */ new Map());
      __privateSet(this, _plugins2, /* @__PURE__ */ new Map());
      __privateSet(this, _pausedState, null);
      __privateSet(this, _nextTimer, 1);
      __privateSet(this, _timers, /* @__PURE__ */ new Map());
      __privateSet(this, _disableCcipRead, false);
    }
    get provider() {
      return this;
    }
    get plugins() {
      return Array.from(__privateGet(this, _plugins2).values());
    }
    attachPlugin(plugin) {
      if (__privateGet(this, _plugins2).get(plugin.name)) {
        throw new Error(`cannot replace existing plugin: ${plugin.name} `);
      }
      __privateGet(this, _plugins2).set(plugin.name, plugin.connect(this));
      return this;
    }
    getPlugin(name) {
      return __privateGet(this, _plugins2).get(name) || null;
    }
    get disableCcipRead() {
      return __privateGet(this, _disableCcipRead);
    }
    set disableCcipRead(value) {
      __privateSet(this, _disableCcipRead, !!value);
    }
    async ccipReadFetch(tx, calldata, urls) {
      if (this.disableCcipRead || urls.length === 0 || tx.to == null) {
        return null;
      }
      const sender = tx.to.toLowerCase();
      const data = calldata.toLowerCase();
      const errorMessages2 = [];
      for (let i2 = 0; i2 < urls.length; i2++) {
        const url = urls[i2];
        const href = url.replace("{sender}", sender).replace("{data}", data);
        const request2 = new FetchRequest(href);
        if (url.indexOf("{data}") === -1) {
          request2.body = { data, sender };
        }
        this.emit("debug", { action: "sendCcipReadFetchRequest", request: request2, index: i2, urls });
        let errorMessage = "unknown error";
        const resp = await request2.send();
        try {
          const result = resp.bodyJson;
          if (result.data) {
            this.emit("debug", { action: "receiveCcipReadFetchResult", request: request2, result });
            return result.data;
          }
          if (result.message) {
            errorMessage = result.message;
          }
          this.emit("debug", { action: "receiveCcipReadFetchError", request: request2, result });
        } catch (error) {
        }
        assert$1(resp.statusCode < 400 || resp.statusCode >= 500, `response not found during CCIP fetch: ${errorMessage}`, "OFFCHAIN_FAULT", { reason: "404_MISSING_RESOURCE", transaction: tx, info: { url, errorMessage } });
        errorMessages2.push(errorMessage);
      }
      assert$1(false, `error encountered during CCIP fetch: ${errorMessages2.map((m2) => JSON.stringify(m2)).join(", ")}`, "OFFCHAIN_FAULT", {
        reason: "500_SERVER_ERROR",
        transaction: tx,
        info: { urls, errorMessages: errorMessages2 }
      });
    }
    _wrapBlock(value, network) {
      return new Block(formatBlock(value), this);
    }
    _wrapLog(value, network) {
      return new Log(formatLog(value), this);
    }
    _wrapTransactionReceipt(value, network) {
      return new TransactionReceipt(formatTransactionReceipt(value), this);
    }
    _wrapTransactionResponse(tx, network) {
      return new TransactionResponse(tx, this);
    }
    _detectNetwork() {
      assert$1(false, "sub-classes must implement this", "UNSUPPORTED_OPERATION", {
        operation: "_detectNetwork"
      });
    }
    async _perform(req) {
      assert$1(false, `unsupported method: ${req.method}`, "UNSUPPORTED_OPERATION", {
        operation: req.method,
        info: req
      });
    }
    async getBlockNumber() {
      const blockNumber = getNumber(await __privateMethod(this, _perform, perform_fn).call(this, { method: "getBlockNumber" }), "%response");
      if (__privateGet(this, _lastBlockNumber) >= 0) {
        __privateSet(this, _lastBlockNumber, blockNumber);
      }
      return blockNumber;
    }
    _getAddress(address) {
      return resolveAddress(address, this);
    }
    _getBlockTag(blockTag) {
      if (blockTag == null) {
        return "latest";
      }
      switch (blockTag) {
        case "earliest":
          return "0x0";
        case "latest":
        case "pending":
        case "safe":
        case "finalized":
          return blockTag;
      }
      if (isHexString(blockTag)) {
        if (isHexString(blockTag, 32)) {
          return blockTag;
        }
        return toQuantity(blockTag);
      }
      if (typeof blockTag === "number") {
        if (blockTag >= 0) {
          return toQuantity(blockTag);
        }
        if (__privateGet(this, _lastBlockNumber) >= 0) {
          return toQuantity(__privateGet(this, _lastBlockNumber) + blockTag);
        }
        return this.getBlockNumber().then((b2) => toQuantity(b2 + blockTag));
      }
      assertArgument(false, "invalid blockTag", "blockTag", blockTag);
    }
    _getFilter(filter) {
      const topics = (filter.topics || []).map((t2) => {
        if (t2 == null) {
          return null;
        }
        if (Array.isArray(t2)) {
          return concisify(t2.map((t3) => t3.toLowerCase()));
        }
        return t2.toLowerCase();
      });
      const blockHash = "blockHash" in filter ? filter.blockHash : void 0;
      const resolve = (_address, fromBlock2, toBlock2) => {
        let address2 = void 0;
        switch (_address.length) {
          case 0:
            break;
          case 1:
            address2 = _address[0];
            break;
          default:
            _address.sort();
            address2 = _address;
        }
        if (blockHash) {
          if (fromBlock2 != null || toBlock2 != null) {
            throw new Error("invalid filter");
          }
        }
        const filter2 = {};
        if (address2) {
          filter2.address = address2;
        }
        if (topics.length) {
          filter2.topics = topics;
        }
        if (fromBlock2) {
          filter2.fromBlock = fromBlock2;
        }
        if (toBlock2) {
          filter2.toBlock = toBlock2;
        }
        if (blockHash) {
          filter2.blockHash = blockHash;
        }
        return filter2;
      };
      let address = [];
      if (filter.address) {
        if (Array.isArray(filter.address)) {
          for (const addr of filter.address) {
            address.push(this._getAddress(addr));
          }
        } else {
          address.push(this._getAddress(filter.address));
        }
      }
      let fromBlock = void 0;
      if ("fromBlock" in filter) {
        fromBlock = this._getBlockTag(filter.fromBlock);
      }
      let toBlock = void 0;
      if ("toBlock" in filter) {
        toBlock = this._getBlockTag(filter.toBlock);
      }
      if (address.filter((a2) => typeof a2 !== "string").length || fromBlock != null && typeof fromBlock !== "string" || toBlock != null && typeof toBlock !== "string") {
        return Promise.all([Promise.all(address), fromBlock, toBlock]).then((result) => {
          return resolve(result[0], result[1], result[2]);
        });
      }
      return resolve(address, fromBlock, toBlock);
    }
    _getTransactionRequest(_request2) {
      const request2 = copyRequest(_request2);
      const promises = [];
      ["to", "from"].forEach((key) => {
        if (request2[key] == null) {
          return;
        }
        const addr = resolveAddress(request2[key]);
        if (isPromise(addr)) {
          promises.push(async function() {
            request2[key] = await addr;
          }());
        } else {
          request2[key] = addr;
        }
      });
      if (request2.blockTag != null) {
        const blockTag = this._getBlockTag(request2.blockTag);
        if (isPromise(blockTag)) {
          promises.push(async function() {
            request2.blockTag = await blockTag;
          }());
        } else {
          request2.blockTag = blockTag;
        }
      }
      if (promises.length) {
        return async function() {
          await Promise.all(promises);
          return request2;
        }();
      }
      return request2;
    }
    async getNetwork() {
      if (__privateGet(this, _networkPromise) == null) {
        const detectNetwork = this._detectNetwork().then((network) => {
          this.emit("network", network, null);
          return network;
        }, (error) => {
          if (__privateGet(this, _networkPromise) === detectNetwork) {
            __privateSet(this, _networkPromise, null);
          }
          throw error;
        });
        __privateSet(this, _networkPromise, detectNetwork);
        return (await detectNetwork).clone();
      }
      const networkPromise = __privateGet(this, _networkPromise);
      const [expected, actual] = await Promise.all([
        networkPromise,
        this._detectNetwork()
      ]);
      if (expected.chainId !== actual.chainId) {
        if (__privateGet(this, _anyNetwork)) {
          this.emit("network", actual, expected);
          if (__privateGet(this, _networkPromise) === networkPromise) {
            __privateSet(this, _networkPromise, Promise.resolve(actual));
          }
        } else {
          assert$1(false, `network changed: ${expected.chainId} => ${actual.chainId} `, "NETWORK_ERROR", {
            event: "changed"
          });
        }
      }
      return expected.clone();
    }
    async getFeeData() {
      const { block, gasPrice } = await resolveProperties({
        block: this.getBlock("latest"),
        gasPrice: (async () => {
          try {
            const gasPrice2 = await __privateMethod(this, _perform, perform_fn).call(this, { method: "getGasPrice" });
            return getBigInt(gasPrice2, "%response");
          } catch (error) {
          }
          return null;
        })()
      });
      let maxFeePerGas = null, maxPriorityFeePerGas = null;
      if (block && block.baseFeePerGas) {
        maxPriorityFeePerGas = BigInt("1000000000");
        maxFeePerGas = block.baseFeePerGas * BN_2 + maxPriorityFeePerGas;
      }
      return new FeeData(gasPrice, maxFeePerGas, maxPriorityFeePerGas);
    }
    async estimateGas(_tx) {
      let tx = this._getTransactionRequest(_tx);
      if (isPromise(tx)) {
        tx = await tx;
      }
      return getBigInt(await __privateMethod(this, _perform, perform_fn).call(this, {
        method: "estimateGas",
        transaction: tx
      }), "%response");
    }
    async call(_tx) {
      const { tx, blockTag } = await resolveProperties({
        tx: this._getTransactionRequest(_tx),
        blockTag: this._getBlockTag(_tx.blockTag)
      });
      return await __privateMethod(this, _checkNetwork, checkNetwork_fn).call(this, __privateMethod(this, _call, call_fn).call(this, tx, blockTag, _tx.enableCcipRead ? 0 : -1));
    }
    async getBalance(address, blockTag) {
      return getBigInt(await __privateMethod(this, _getAccountValue, getAccountValue_fn).call(this, { method: "getBalance" }, address, blockTag), "%response");
    }
    async getTransactionCount(address, blockTag) {
      return getNumber(await __privateMethod(this, _getAccountValue, getAccountValue_fn).call(this, { method: "getTransactionCount" }, address, blockTag), "%response");
    }
    async getCode(address, blockTag) {
      return hexlify(await __privateMethod(this, _getAccountValue, getAccountValue_fn).call(this, { method: "getCode" }, address, blockTag));
    }
    async getStorage(address, _position, blockTag) {
      const position = getBigInt(_position, "position");
      return hexlify(await __privateMethod(this, _getAccountValue, getAccountValue_fn).call(this, { method: "getStorage", position }, address, blockTag));
    }
    async broadcastTransaction(signedTx) {
      const { blockNumber, hash: hash2, network } = await resolveProperties({
        blockNumber: this.getBlockNumber(),
        hash: this._perform({
          method: "broadcastTransaction",
          signedTransaction: signedTx
        }),
        network: this.getNetwork()
      });
      const tx = Transaction.from(signedTx);
      if (tx.hash !== hash2) {
        throw new Error("@TODO: the returned hash did not match");
      }
      return this._wrapTransactionResponse(tx, network).replaceableTransaction(blockNumber);
    }
    async getBlock(block, prefetchTxs) {
      const { network, params } = await resolveProperties({
        network: this.getNetwork(),
        params: __privateMethod(this, _getBlock, getBlock_fn).call(this, block, !!prefetchTxs)
      });
      if (params == null) {
        return null;
      }
      return this._wrapBlock(formatBlock(params), network);
    }
    async getTransaction(hash2) {
      const { network, params } = await resolveProperties({
        network: this.getNetwork(),
        params: __privateMethod(this, _perform, perform_fn).call(this, { method: "getTransaction", hash: hash2 })
      });
      if (params == null) {
        return null;
      }
      return this._wrapTransactionResponse(formatTransactionResponse(params), network);
    }
    async getTransactionReceipt(hash2) {
      const { network, params } = await resolveProperties({
        network: this.getNetwork(),
        params: __privateMethod(this, _perform, perform_fn).call(this, { method: "getTransactionReceipt", hash: hash2 })
      });
      if (params == null) {
        return null;
      }
      if (params.gasPrice == null && params.effectiveGasPrice == null) {
        const tx = await __privateMethod(this, _perform, perform_fn).call(this, { method: "getTransaction", hash: hash2 });
        if (tx == null) {
          throw new Error("report this; could not find tx or effectiveGasPrice");
        }
        params.effectiveGasPrice = tx.gasPrice;
      }
      return this._wrapTransactionReceipt(formatTransactionReceipt(params), network);
    }
    async getTransactionResult(hash2) {
      const { result } = await resolveProperties({
        network: this.getNetwork(),
        result: __privateMethod(this, _perform, perform_fn).call(this, { method: "getTransactionResult", hash: hash2 })
      });
      if (result == null) {
        return null;
      }
      return hexlify(result);
    }
    async getLogs(_filter4) {
      let filter = this._getFilter(_filter4);
      if (isPromise(filter)) {
        filter = await filter;
      }
      const { network, params } = await resolveProperties({
        network: this.getNetwork(),
        params: __privateMethod(this, _perform, perform_fn).call(this, { method: "getLogs", filter })
      });
      return params.map((p2) => this._wrapLog(formatLog(p2), network));
    }
    _getProvider(chainId) {
      assert$1(false, "provider cannot connect to target network", "UNSUPPORTED_OPERATION", {
        operation: "_getProvider()"
      });
    }
    async getResolver(name) {
      return await EnsResolver.fromName(this, name);
    }
    async getAvatar(name) {
      const resolver = await this.getResolver(name);
      if (resolver) {
        return await resolver.getAvatar();
      }
      return null;
    }
    async resolveName(name) {
      const resolver = await this.getResolver(name);
      if (resolver) {
        return await resolver.getAddress();
      }
      return null;
    }
    async lookupAddress(address) {
      address = getAddress(address);
      const node = namehash(address.substring(2).toLowerCase() + ".addr.reverse");
      try {
        const ensAddr = await EnsResolver.getEnsAddress(this);
        const ensContract = new Contract(ensAddr, [
          "function resolver(bytes32) view returns (address)"
        ], this);
        const resolver = await ensContract.resolver(node);
        if (resolver == null || resolver === ZeroHash) {
          return null;
        }
        const resolverContract = new Contract(resolver, [
          "function name(bytes32) view returns (string)"
        ], this);
        const name = await resolverContract.name(node);
        const check = await this.resolveName(name);
        if (check !== address) {
          formatAppLog("log", "at node_modules/ethers/lib.esm/providers/abstract-provider.js:734", "FAIL", address, check);
        }
        return name;
      } catch (error) {
        formatAppLog("log", "at node_modules/ethers/lib.esm/providers/abstract-provider.js:739", "TEMP", error);
      }
      return null;
    }
    async waitForTransaction(hash2, _confirms, timeout) {
      const confirms = _confirms != null ? _confirms : 1;
      if (confirms === 0) {
        return this.getTransactionReceipt(hash2);
      }
      return new Promise(async (resolve, reject) => {
        let timer = null;
        const listener = async (blockNumber) => {
          try {
            const receipt = await this.getTransactionReceipt(hash2);
            if (receipt != null) {
              if (blockNumber - receipt.blockNumber + 1 >= confirms) {
                resolve(receipt);
                if (timer) {
                  clearTimeout(timer);
                  timer = null;
                }
                return;
              }
            }
          } catch (error) {
            formatAppLog("log", "at node_modules/ethers/lib.esm/providers/abstract-provider.js:766", "EEE", error);
          }
          this.once("block", listener);
        };
        if (timeout != null) {
          timer = setTimeout(() => {
            if (timer == null) {
              return;
            }
            timer = null;
            this.off("block", listener);
            reject(makeError("timeout", "TIMEOUT", { reason: "timeout" }));
          }, timeout);
        }
        listener(await this.getBlockNumber());
      });
    }
    async waitForBlock(blockTag) {
      assert$1(false, "not implemented yet", "NOT_IMPLEMENTED", {
        operation: "waitForBlock"
      });
    }
    _clearTimeout(timerId) {
      const timer = __privateGet(this, _timers).get(timerId);
      if (!timer) {
        return;
      }
      if (timer.timer) {
        clearTimeout(timer.timer);
      }
      __privateGet(this, _timers).delete(timerId);
    }
    _setTimeout(_func, timeout) {
      if (timeout == null) {
        timeout = 0;
      }
      const timerId = __privateWrapper(this, _nextTimer)._++;
      const func = () => {
        __privateGet(this, _timers).delete(timerId);
        _func();
      };
      if (this.paused) {
        __privateGet(this, _timers).set(timerId, { timer: null, func, time: timeout });
      } else {
        const timer = setTimeout(func, timeout);
        __privateGet(this, _timers).set(timerId, { timer, func, time: getTime() });
      }
      return timerId;
    }
    _forEachSubscriber(func) {
      for (const sub of __privateGet(this, _subs).values()) {
        func(sub.subscriber);
      }
    }
    _getSubscriber(sub) {
      switch (sub.type) {
        case "debug":
        case "network":
          return new UnmanagedSubscriber(sub.type);
        case "block":
          return new PollingBlockSubscriber(this);
        case "event":
          return new PollingEventSubscriber(this, sub.filter);
        case "transaction":
          return new PollingTransactionSubscriber(this, sub.hash);
        case "orphan":
          return new PollingOrphanSubscriber(this, sub.filter);
      }
      throw new Error(`unsupported event: ${sub.type}`);
    }
    _recoverSubscriber(oldSub, newSub) {
      for (const sub of __privateGet(this, _subs).values()) {
        if (sub.subscriber === oldSub) {
          if (sub.started) {
            sub.subscriber.stop();
          }
          sub.subscriber = newSub;
          if (sub.started) {
            newSub.start();
          }
          if (__privateGet(this, _pausedState) != null) {
            newSub.pause(__privateGet(this, _pausedState));
          }
          break;
        }
      }
    }
    async on(event, listener) {
      const sub = await __privateMethod(this, _getSub, getSub_fn).call(this, event);
      sub.listeners.push({ listener, once: false });
      if (!sub.started) {
        sub.subscriber.start();
        sub.started = true;
        if (__privateGet(this, _pausedState) != null) {
          sub.subscriber.pause(__privateGet(this, _pausedState));
        }
      }
      return this;
    }
    async once(event, listener) {
      const sub = await __privateMethod(this, _getSub, getSub_fn).call(this, event);
      sub.listeners.push({ listener, once: true });
      if (!sub.started) {
        sub.subscriber.start();
        sub.started = true;
        if (__privateGet(this, _pausedState) != null) {
          sub.subscriber.pause(__privateGet(this, _pausedState));
        }
      }
      return this;
    }
    async emit(event, ...args) {
      const sub = await __privateMethod(this, _hasSub, hasSub_fn).call(this, event, args);
      if (!sub || sub.listeners.length === 0) {
        return false;
      }
      const count = sub.listeners.length;
      sub.listeners = sub.listeners.filter(({ listener, once }) => {
        const payload = new EventPayload(this, once ? null : listener, event);
        try {
          listener.call(this, ...args, payload);
        } catch (error) {
        }
        return !once;
      });
      if (sub.listeners.length === 0) {
        if (sub.started) {
          sub.subscriber.stop();
        }
        __privateGet(this, _subs).delete(sub.tag);
      }
      return count > 0;
    }
    async listenerCount(event) {
      if (event) {
        const sub = await __privateMethod(this, _hasSub, hasSub_fn).call(this, event);
        if (!sub) {
          return 0;
        }
        return sub.listeners.length;
      }
      let total = 0;
      for (const { listeners } of __privateGet(this, _subs).values()) {
        total += listeners.length;
      }
      return total;
    }
    async listeners(event) {
      if (event) {
        const sub = await __privateMethod(this, _hasSub, hasSub_fn).call(this, event);
        if (!sub) {
          return [];
        }
        return sub.listeners.map(({ listener }) => listener);
      }
      let result = [];
      for (const { listeners } of __privateGet(this, _subs).values()) {
        result = result.concat(listeners.map(({ listener }) => listener));
      }
      return result;
    }
    async off(event, listener) {
      const sub = await __privateMethod(this, _hasSub, hasSub_fn).call(this, event);
      if (!sub) {
        return this;
      }
      if (listener) {
        const index = sub.listeners.map(({ listener: listener2 }) => listener2).indexOf(listener);
        if (index >= 0) {
          sub.listeners.splice(index, 1);
        }
      }
      if (!listener || sub.listeners.length === 0) {
        if (sub.started) {
          sub.subscriber.stop();
        }
        __privateGet(this, _subs).delete(sub.tag);
      }
      return this;
    }
    async removeAllListeners(event) {
      if (event) {
        const { tag, started, subscriber } = await __privateMethod(this, _getSub, getSub_fn).call(this, event);
        if (started) {
          subscriber.stop();
        }
        __privateGet(this, _subs).delete(tag);
      } else {
        for (const [tag, { started, subscriber }] of __privateGet(this, _subs)) {
          if (started) {
            subscriber.stop();
          }
          __privateGet(this, _subs).delete(tag);
        }
      }
      return this;
    }
    async addListener(event, listener) {
      return await this.on(event, listener);
    }
    async removeListener(event, listener) {
      return this.off(event, listener);
    }
    destroy() {
      this.removeAllListeners();
      for (const timerId of __privateGet(this, _timers).keys()) {
        this._clearTimeout(timerId);
      }
    }
    get paused() {
      return __privateGet(this, _pausedState) != null;
    }
    set paused(pause) {
      if (!!pause === this.paused) {
        return;
      }
      if (this.paused) {
        this.resume();
      } else {
        this.pause(false);
      }
    }
    pause(dropWhilePaused) {
      __privateSet(this, _lastBlockNumber, -1);
      if (__privateGet(this, _pausedState) != null) {
        if (__privateGet(this, _pausedState) == !!dropWhilePaused) {
          return;
        }
        assert$1(false, "cannot change pause type; resume first", "UNSUPPORTED_OPERATION", {
          operation: "pause"
        });
      }
      this._forEachSubscriber((s2) => s2.pause(dropWhilePaused));
      __privateSet(this, _pausedState, !!dropWhilePaused);
      for (const timer of __privateGet(this, _timers).values()) {
        if (timer.timer) {
          clearTimeout(timer.timer);
        }
        timer.time = getTime() - timer.time;
      }
    }
    resume() {
      if (__privateGet(this, _pausedState) == null) {
        return;
      }
      this._forEachSubscriber((s2) => s2.resume());
      __privateSet(this, _pausedState, null);
      for (const timer of __privateGet(this, _timers).values()) {
        let timeout = timer.time;
        if (timeout < 0) {
          timeout = 0;
        }
        timer.time = getTime();
        setTimeout(timer.func, timeout);
      }
    }
  }
  _subs = new WeakMap();
  _plugins2 = new WeakMap();
  _pausedState = new WeakMap();
  _networkPromise = new WeakMap();
  _anyNetwork = new WeakMap();
  _performCache = new WeakMap();
  _lastBlockNumber = new WeakMap();
  _nextTimer = new WeakMap();
  _timers = new WeakMap();
  _disableCcipRead = new WeakMap();
  _perform = new WeakSet();
  perform_fn = async function(req) {
    const tag = getTag(req.method, req);
    let perform = __privateGet(this, _performCache).get(tag);
    if (!perform) {
      perform = this._perform(req);
      __privateGet(this, _performCache).set(tag, perform);
      setTimeout(() => {
        if (__privateGet(this, _performCache).get(tag) === perform) {
          __privateGet(this, _performCache).delete(tag);
        }
      }, 250);
    }
    return await perform;
  };
  _call = new WeakSet();
  call_fn = async function(tx, blockTag, attempt) {
    assert$1(attempt < MAX_CCIP_REDIRECTS, "CCIP read exceeded maximum redirections", "OFFCHAIN_FAULT", {
      reason: "TOO_MANY_REDIRECTS",
      transaction: Object.assign({}, tx, { blockTag, enableCcipRead: true })
    });
    const transaction = copyRequest(tx);
    try {
      return hexlify(await this._perform({ method: "call", transaction, blockTag }));
    } catch (error) {
      if (!this.disableCcipRead && isCallException(error) && error.data && attempt >= 0 && blockTag === "latest" && transaction.to != null && dataSlice(error.data, 0, 4) === "0x556f1830") {
        const data = error.data;
        const txSender = await resolveAddress(transaction.to, this);
        let ccipArgs;
        try {
          ccipArgs = parseOffchainLookup(dataSlice(error.data, 4));
        } catch (error2) {
          assert$1(false, error2.message, "OFFCHAIN_FAULT", {
            reason: "BAD_DATA",
            transaction,
            info: { data }
          });
        }
        assert$1(ccipArgs.sender.toLowerCase() === txSender.toLowerCase(), "CCIP Read sender mismatch", "CALL_EXCEPTION", {
          action: "call",
          data,
          reason: "OffchainLookup",
          transaction,
          invocation: null,
          revert: {
            signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
            name: "OffchainLookup",
            args: ccipArgs.errorArgs
          }
        });
        const ccipResult = await this.ccipReadFetch(transaction, ccipArgs.calldata, ccipArgs.urls);
        assert$1(ccipResult != null, "CCIP Read failed to fetch data", "OFFCHAIN_FAULT", {
          reason: "FETCH_FAILED",
          transaction,
          info: { data: error.data, errorArgs: ccipArgs.errorArgs }
        });
        const tx2 = {
          to: txSender,
          data: concat([ccipArgs.selector, encodeBytes([ccipResult, ccipArgs.extraData])])
        };
        this.emit("debug", { action: "sendCcipReadCall", transaction: tx2 });
        try {
          const result = await __privateMethod(this, _call, call_fn).call(this, tx2, blockTag, attempt + 1);
          this.emit("debug", { action: "receiveCcipReadCallResult", transaction: Object.assign({}, tx2), result });
          return result;
        } catch (error2) {
          this.emit("debug", { action: "receiveCcipReadCallError", transaction: Object.assign({}, tx2), error: error2 });
          throw error2;
        }
      }
      throw error;
    }
  };
  _checkNetwork = new WeakSet();
  checkNetwork_fn = async function(promise) {
    const { value } = await resolveProperties({
      network: this.getNetwork(),
      value: promise
    });
    return value;
  };
  _getAccountValue = new WeakSet();
  getAccountValue_fn = async function(request2, _address, _blockTag) {
    let address = this._getAddress(_address);
    let blockTag = this._getBlockTag(_blockTag);
    if (typeof address !== "string" || typeof blockTag !== "string") {
      [address, blockTag] = await Promise.all([address, blockTag]);
    }
    return await __privateMethod(this, _checkNetwork, checkNetwork_fn).call(this, __privateMethod(this, _perform, perform_fn).call(this, Object.assign(request2, { address, blockTag })));
  };
  _getBlock = new WeakSet();
  getBlock_fn = async function(block, includeTransactions) {
    if (isHexString(block, 32)) {
      return await __privateMethod(this, _perform, perform_fn).call(this, {
        method: "getBlock",
        blockHash: block,
        includeTransactions
      });
    }
    let blockTag = this._getBlockTag(block);
    if (typeof blockTag !== "string") {
      blockTag = await blockTag;
    }
    return await __privateMethod(this, _perform, perform_fn).call(this, {
      method: "getBlock",
      blockTag,
      includeTransactions
    });
  };
  _hasSub = new WeakSet();
  hasSub_fn = async function(event, emitArgs) {
    let sub = await getSubscription(event, this);
    if (sub.type === "event" && emitArgs && emitArgs.length > 0 && emitArgs[0].removed === true) {
      sub = await getSubscription({ orphan: "drop-log", log: emitArgs[0] }, this);
    }
    return __privateGet(this, _subs).get(sub.tag) || null;
  };
  _getSub = new WeakSet();
  getSub_fn = async function(event) {
    const subscription = await getSubscription(event, this);
    const tag = subscription.tag;
    let sub = __privateGet(this, _subs).get(tag);
    if (!sub) {
      const subscriber = this._getSubscriber(subscription);
      const addressableMap = /* @__PURE__ */ new WeakMap();
      const nameMap = /* @__PURE__ */ new Map();
      sub = { subscriber, tag, addressableMap, nameMap, started: false, listeners: [] };
      __privateGet(this, _subs).set(tag, sub);
    }
    return sub;
  };
  function _parseString(result, start) {
    try {
      const bytes2 = _parseBytes(result, start);
      if (bytes2) {
        return toUtf8String(bytes2);
      }
    } catch (error) {
    }
    return null;
  }
  function _parseBytes(result, start) {
    if (result === "0x") {
      return null;
    }
    try {
      const offset = getNumber(dataSlice(result, start, start + 32));
      const length = getNumber(dataSlice(result, offset, offset + 32));
      return dataSlice(result, offset + 32, offset + 32 + length);
    } catch (error) {
    }
    return null;
  }
  function numPad(value) {
    const result = toBeArray(value);
    if (result.length > 32) {
      throw new Error("internal; should not happen");
    }
    const padded = new Uint8Array(32);
    padded.set(result, 32 - result.length);
    return padded;
  }
  function bytesPad(value) {
    if (value.length % 32 === 0) {
      return value;
    }
    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);
    result.set(value);
    return result;
  }
  const empty = new Uint8Array([]);
  function encodeBytes(datas) {
    const result = [];
    let byteCount = 0;
    for (let i2 = 0; i2 < datas.length; i2++) {
      result.push(empty);
      byteCount += 32;
    }
    for (let i2 = 0; i2 < datas.length; i2++) {
      const data = getBytes(datas[i2]);
      result[i2] = numPad(byteCount);
      result.push(numPad(data.length));
      result.push(bytesPad(data));
      byteCount += 32 + Math.ceil(data.length / 32) * 32;
    }
    return concat(result);
  }
  const zeros = "0x0000000000000000000000000000000000000000000000000000000000000000";
  function parseOffchainLookup(data) {
    const result = {
      sender: "",
      urls: [],
      calldata: "",
      selector: "",
      extraData: "",
      errorArgs: []
    };
    assert$1(dataLength(data) >= 5 * 32, "insufficient OffchainLookup data", "OFFCHAIN_FAULT", {
      reason: "insufficient OffchainLookup data"
    });
    const sender = dataSlice(data, 0, 32);
    assert$1(dataSlice(sender, 0, 12) === dataSlice(zeros, 0, 12), "corrupt OffchainLookup sender", "OFFCHAIN_FAULT", {
      reason: "corrupt OffchainLookup sender"
    });
    result.sender = dataSlice(sender, 12);
    try {
      const urls = [];
      const urlsOffset = getNumber(dataSlice(data, 32, 64));
      const urlsLength = getNumber(dataSlice(data, urlsOffset, urlsOffset + 32));
      const urlsData = dataSlice(data, urlsOffset + 32);
      for (let u2 = 0; u2 < urlsLength; u2++) {
        const url = _parseString(urlsData, u2 * 32);
        if (url == null) {
          throw new Error("abort");
        }
        urls.push(url);
      }
      result.urls = urls;
    } catch (error) {
      assert$1(false, "corrupt OffchainLookup urls", "OFFCHAIN_FAULT", {
        reason: "corrupt OffchainLookup urls"
      });
    }
    try {
      const calldata = _parseBytes(data, 64);
      if (calldata == null) {
        throw new Error("abort");
      }
      result.calldata = calldata;
    } catch (error) {
      assert$1(false, "corrupt OffchainLookup calldata", "OFFCHAIN_FAULT", {
        reason: "corrupt OffchainLookup calldata"
      });
    }
    assert$1(dataSlice(data, 100, 128) === dataSlice(zeros, 0, 28), "corrupt OffchainLookup callbaackSelector", "OFFCHAIN_FAULT", {
      reason: "corrupt OffchainLookup callbaackSelector"
    });
    result.selector = dataSlice(data, 96, 100);
    try {
      const extraData = _parseBytes(data, 128);
      if (extraData == null) {
        throw new Error("abort");
      }
      result.extraData = extraData;
    } catch (error) {
      assert$1(false, "corrupt OffchainLookup extraData", "OFFCHAIN_FAULT", {
        reason: "corrupt OffchainLookup extraData"
      });
    }
    result.errorArgs = "sender,urls,calldata,selector,extraData".split(/,/).map((k2) => result[k2]);
    return result;
  }
  function checkProvider(signer, operation) {
    if (signer.provider) {
      return signer.provider;
    }
    assert$1(false, "missing provider", "UNSUPPORTED_OPERATION", { operation });
  }
  async function populate(signer, tx) {
    let pop = copyRequest(tx);
    if (pop.to != null) {
      pop.to = resolveAddress(pop.to, signer);
    }
    if (pop.from != null) {
      const from = pop.from;
      pop.from = Promise.all([
        signer.getAddress(),
        resolveAddress(from, signer)
      ]).then(([address, from2]) => {
        assertArgument(address.toLowerCase() === from2.toLowerCase(), "transaction from mismatch", "tx.from", from2);
        return address;
      });
    } else {
      pop.from = signer.getAddress();
    }
    return await resolveProperties(pop);
  }
  class AbstractSigner {
    constructor(provider) {
      defineProperties(this, { provider: provider || null });
    }
    async getNonce(blockTag) {
      return checkProvider(this, "getTransactionCount").getTransactionCount(await this.getAddress(), blockTag);
    }
    async populateCall(tx) {
      const pop = await populate(this, tx);
      return pop;
    }
    async populateTransaction(tx) {
      const provider = checkProvider(this, "populateTransaction");
      const pop = await populate(this, tx);
      if (pop.nonce == null) {
        pop.nonce = await this.getNonce("pending");
      }
      if (pop.gasLimit == null) {
        pop.gasLimit = await this.estimateGas(pop);
      }
      const network = await this.provider.getNetwork();
      if (pop.chainId != null) {
        const chainId = getBigInt(pop.chainId);
        assertArgument(chainId === network.chainId, "transaction chainId mismatch", "tx.chainId", tx.chainId);
      } else {
        pop.chainId = network.chainId;
      }
      const hasEip1559 = pop.maxFeePerGas != null || pop.maxPriorityFeePerGas != null;
      if (pop.gasPrice != null && (pop.type === 2 || hasEip1559)) {
        assertArgument(false, "eip-1559 transaction do not support gasPrice", "tx", tx);
      } else if ((pop.type === 0 || pop.type === 1) && hasEip1559) {
        assertArgument(false, "pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "tx", tx);
      }
      if ((pop.type === 2 || pop.type == null) && (pop.maxFeePerGas != null && pop.maxPriorityFeePerGas != null)) {
        pop.type = 2;
      } else if (pop.type === 0 || pop.type === 1) {
        const feeData = await provider.getFeeData();
        assert$1(feeData.gasPrice != null, "network does not support gasPrice", "UNSUPPORTED_OPERATION", {
          operation: "getGasPrice"
        });
        if (pop.gasPrice == null) {
          pop.gasPrice = feeData.gasPrice;
        }
      } else {
        const feeData = await provider.getFeeData();
        if (pop.type == null) {
          if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
            pop.type = 2;
            if (pop.gasPrice != null) {
              const gasPrice = pop.gasPrice;
              delete pop.gasPrice;
              pop.maxFeePerGas = gasPrice;
              pop.maxPriorityFeePerGas = gasPrice;
            } else {
              if (pop.maxFeePerGas == null) {
                pop.maxFeePerGas = feeData.maxFeePerGas;
              }
              if (pop.maxPriorityFeePerGas == null) {
                pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
              }
            }
          } else if (feeData.gasPrice != null) {
            assert$1(!hasEip1559, "network does not support EIP-1559", "UNSUPPORTED_OPERATION", {
              operation: "populateTransaction"
            });
            if (pop.gasPrice == null) {
              pop.gasPrice = feeData.gasPrice;
            }
            pop.type = 0;
          } else {
            assert$1(false, "failed to get consistent fee data", "UNSUPPORTED_OPERATION", {
              operation: "signer.getFeeData"
            });
          }
        } else if (pop.type === 2) {
          if (pop.maxFeePerGas == null) {
            pop.maxFeePerGas = feeData.maxFeePerGas;
          }
          if (pop.maxPriorityFeePerGas == null) {
            pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
          }
        }
      }
      return await resolveProperties(pop);
    }
    async estimateGas(tx) {
      return checkProvider(this, "estimateGas").estimateGas(await this.populateCall(tx));
    }
    async call(tx) {
      return checkProvider(this, "call").call(await this.populateCall(tx));
    }
    async resolveName(name) {
      const provider = checkProvider(this, "resolveName");
      return await provider.resolveName(name);
    }
    async sendTransaction(tx) {
      const provider = checkProvider(this, "sendTransaction");
      const pop = await this.populateTransaction(tx);
      delete pop.from;
      const txObj = Transaction.from(pop);
      return await provider.broadcastTransaction(await this.signTransaction(txObj));
    }
  }
  const _VoidSigner = class extends AbstractSigner {
    constructor(address, provider) {
      super(provider);
      __privateAdd(this, _throwUnsupported);
      defineProperties(this, { address });
    }
    async getAddress() {
      return this.address;
    }
    connect(provider) {
      return new _VoidSigner(this.address, provider);
    }
    async signTransaction(tx) {
      __privateMethod(this, _throwUnsupported, throwUnsupported_fn).call(this, "transactions", "signTransaction");
    }
    async signMessage(message) {
      __privateMethod(this, _throwUnsupported, throwUnsupported_fn).call(this, "messages", "signMessage");
    }
    async signTypedData(domain, types, value) {
      __privateMethod(this, _throwUnsupported, throwUnsupported_fn).call(this, "typed-data", "signTypedData");
    }
  };
  let VoidSigner = _VoidSigner;
  _throwUnsupported = new WeakSet();
  throwUnsupported_fn = function(suffix, operation) {
    assert$1(false, `VoidSigner cannot sign ${suffix}`, "UNSUPPORTED_OPERATION", { operation });
  };
  function copy(obj) {
    return JSON.parse(JSON.stringify(obj));
  }
  class FilterIdSubscriber {
    constructor(provider) {
      __privateAdd(this, _poll4);
      __privateAdd(this, _teardown);
      __privateAdd(this, _provider4, void 0);
      __privateAdd(this, _filterIdPromise, void 0);
      __privateAdd(this, _poller3, void 0);
      __privateAdd(this, _running3, void 0);
      __privateAdd(this, _network, void 0);
      __privateAdd(this, _hault, void 0);
      __privateSet(this, _provider4, provider);
      __privateSet(this, _filterIdPromise, null);
      __privateSet(this, _poller3, __privateMethod(this, _poll4, poll_fn3).bind(this));
      __privateSet(this, _running3, false);
      __privateSet(this, _network, null);
      __privateSet(this, _hault, false);
    }
    _subscribe(provider) {
      throw new Error("subclasses must override this");
    }
    _emitResults(provider, result) {
      throw new Error("subclasses must override this");
    }
    _recover(provider) {
      throw new Error("subclasses must override this");
    }
    start() {
      if (__privateGet(this, _running3)) {
        return;
      }
      __privateSet(this, _running3, true);
      __privateMethod(this, _poll4, poll_fn3).call(this, -2);
    }
    stop() {
      if (!__privateGet(this, _running3)) {
        return;
      }
      __privateSet(this, _running3, false);
      __privateSet(this, _hault, true);
      __privateMethod(this, _teardown, teardown_fn).call(this);
      __privateGet(this, _provider4).off("block", __privateGet(this, _poller3));
    }
    pause(dropWhilePaused) {
      if (dropWhilePaused) {
        __privateMethod(this, _teardown, teardown_fn).call(this);
      }
      __privateGet(this, _provider4).off("block", __privateGet(this, _poller3));
    }
    resume() {
      this.start();
    }
  }
  _provider4 = new WeakMap();
  _filterIdPromise = new WeakMap();
  _poller3 = new WeakMap();
  _running3 = new WeakMap();
  _network = new WeakMap();
  _hault = new WeakMap();
  _poll4 = new WeakSet();
  poll_fn3 = async function(blockNumber) {
    try {
      if (__privateGet(this, _filterIdPromise) == null) {
        __privateSet(this, _filterIdPromise, this._subscribe(__privateGet(this, _provider4)));
      }
      const filterId = await __privateGet(this, _filterIdPromise);
      if (filterId == null) {
        __privateGet(this, _provider4)._recoverSubscriber(this, this._recover(__privateGet(this, _provider4)));
        return;
      }
      const network = await __privateGet(this, _provider4).getNetwork();
      if (!__privateGet(this, _network)) {
        __privateSet(this, _network, network);
      }
      if (__privateGet(this, _network).chainId !== network.chainId) {
        throw new Error("chaid changed");
      }
      if (__privateGet(this, _hault)) {
        return;
      }
      const result = await __privateGet(this, _provider4).send("eth_getFilterChanges", [filterId]);
      await this._emitResults(__privateGet(this, _provider4), result);
    } catch (error) {
      formatAppLog("log", "at node_modules/ethers/lib.esm/providers/subscriber-filterid.js:63", "@TODO", error);
    }
    __privateGet(this, _provider4).once("block", __privateGet(this, _poller3));
  };
  _teardown = new WeakSet();
  teardown_fn = function() {
    const filterIdPromise = __privateGet(this, _filterIdPromise);
    if (filterIdPromise) {
      __privateSet(this, _filterIdPromise, null);
      filterIdPromise.then((filterId) => {
        __privateGet(this, _provider4).send("eth_uninstallFilter", [filterId]);
      });
    }
  };
  class FilterIdEventSubscriber extends FilterIdSubscriber {
    constructor(provider, filter) {
      super(provider);
      __privateAdd(this, _event, void 0);
      __privateSet(this, _event, copy(filter));
    }
    _recover(provider) {
      return new PollingEventSubscriber(provider, __privateGet(this, _event));
    }
    async _subscribe(provider) {
      const filterId = await provider.send("eth_newFilter", [__privateGet(this, _event)]);
      return filterId;
    }
    async _emitResults(provider, results) {
      for (const result of results) {
        provider.emit(__privateGet(this, _event), provider._wrapLog(result, provider._network));
      }
    }
  }
  _event = new WeakMap();
  class FilterIdPendingSubscriber extends FilterIdSubscriber {
    async _subscribe(provider) {
      return await provider.send("eth_newPendingTransactionFilter", []);
    }
    async _emitResults(provider, results) {
      for (const result of results) {
        provider.emit("pending", result);
      }
    }
  }
  const Primitive = "bigint,boolean,function,number,string,symbol".split(/,/g);
  function deepCopy$1(value) {
    if (value == null || Primitive.indexOf(typeof value) >= 0) {
      return value;
    }
    if (typeof value.getAddress === "function") {
      return value;
    }
    if (Array.isArray(value)) {
      return value.map(deepCopy$1);
    }
    if (typeof value === "object") {
      return Object.keys(value).reduce((accum, key) => {
        accum[key] = value[key];
        return accum;
      }, {});
    }
    throw new Error(`should not happen: ${value} (${typeof value})`);
  }
  function stall$2(duration) {
    return new Promise((resolve) => {
      setTimeout(resolve, duration);
    });
  }
  function getLowerCase(value) {
    if (value) {
      return value.toLowerCase();
    }
    return value;
  }
  function isPollable(value) {
    return value && typeof value.pollingInterval === "number";
  }
  const defaultOptions = {
    polling: false,
    staticNetwork: null,
    batchStallTime: 10,
    batchMaxSize: 1 << 20,
    batchMaxCount: 100
  };
  class JsonRpcSigner extends AbstractSigner {
    constructor(provider, address) {
      super(provider);
      defineProperties(this, { address });
    }
    connect(provider) {
      assert$1(false, "cannot reconnect JsonRpcSigner", "UNSUPPORTED_OPERATION", {
        operation: "signer.connect"
      });
    }
    async getAddress() {
      return this.address;
    }
    async populateTransaction(tx) {
      return await this.populateCall(tx);
    }
    async sendUncheckedTransaction(_tx) {
      const tx = deepCopy$1(_tx);
      const promises = [];
      if (tx.from) {
        const _from = tx.from;
        promises.push((async () => {
          const from = await resolveAddress(_from, this.provider);
          assertArgument(from != null && from.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", _tx);
          tx.from = from;
        })());
      } else {
        tx.from = this.address;
      }
      if (tx.gasLimit == null) {
        promises.push((async () => {
          tx.gasLimit = await this.provider.estimateGas({ ...tx, from: this.address });
        })());
      }
      if (tx.to != null) {
        const _to2 = tx.to;
        promises.push((async () => {
          tx.to = await resolveAddress(_to2, this.provider);
        })());
      }
      if (promises.length) {
        await Promise.all(promises);
      }
      const hexTx = this.provider.getRpcTransaction(tx);
      return this.provider.send("eth_sendTransaction", [hexTx]);
    }
    async sendTransaction(tx) {
      const blockNumber = await this.provider.getBlockNumber();
      const hash2 = await this.sendUncheckedTransaction(tx);
      return await new Promise((resolve, reject) => {
        const timeouts = [1e3, 100];
        const checkTx = async () => {
          const tx2 = await this.provider.getTransaction(hash2);
          if (tx2 != null) {
            resolve(tx2.replaceableTransaction(blockNumber));
            return;
          }
          this.provider._setTimeout(() => {
            checkTx();
          }, timeouts.pop() || 4e3);
        };
        checkTx();
      });
    }
    async signTransaction(_tx) {
      const tx = deepCopy$1(_tx);
      if (tx.from) {
        const from = await resolveAddress(tx.from, this.provider);
        assertArgument(from != null && from.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", _tx);
        tx.from = from;
      } else {
        tx.from = this.address;
      }
      const hexTx = this.provider.getRpcTransaction(tx);
      return await this.provider.send("eth_signTransaction", [hexTx]);
    }
    async signMessage(_message) {
      const message = typeof _message === "string" ? toUtf8Bytes(_message) : _message;
      return await this.provider.send("personal_sign", [
        hexlify(message),
        this.address.toLowerCase()
      ]);
    }
    async signTypedData(domain, types, _value2) {
      const value = deepCopy$1(_value2);
      const populated = await TypedDataEncoder.resolveNames(domain, types, value, async (value2) => {
        const address = await resolveAddress(value2);
        assertArgument(address != null, "TypedData does not support null address", "value", value2);
        return address;
      });
      return await this.provider.send("eth_signTypedData_v4", [
        this.address.toLowerCase(),
        JSON.stringify(TypedDataEncoder.getPayload(populated.domain, types, populated.value))
      ]);
    }
    async unlock(password) {
      return this.provider.send("personal_unlockAccount", [
        this.address.toLowerCase(),
        password,
        null
      ]);
    }
    async _legacySignMessage(_message) {
      const message = typeof _message === "string" ? toUtf8Bytes(_message) : _message;
      return await this.provider.send("eth_sign", [
        this.address.toLowerCase(),
        hexlify(message)
      ]);
    }
  }
  class JsonRpcApiProvider extends AbstractProvider {
    constructor(network, options) {
      super(network);
      __privateAdd(this, _scheduleDrain);
      __privateAdd(this, _options2, void 0);
      __privateAdd(this, _nextId, void 0);
      __privateAdd(this, _payloads, void 0);
      __privateAdd(this, _drainTimer, void 0);
      __privateAdd(this, _notReady, void 0);
      __privateAdd(this, _network2, void 0);
      __privateSet(this, _nextId, 1);
      __privateSet(this, _options2, Object.assign({}, defaultOptions, options || {}));
      __privateSet(this, _payloads, []);
      __privateSet(this, _drainTimer, null);
      __privateSet(this, _network2, null);
      {
        let resolve = null;
        const promise = new Promise((_resolve) => {
          resolve = _resolve;
        });
        __privateSet(this, _notReady, { promise, resolve });
      }
      const staticNetwork = this._getOption("staticNetwork");
      if (staticNetwork) {
        assertArgument(staticNetwork === network, "staticNetwork MUST match network object", "options", options);
        __privateSet(this, _network2, staticNetwork);
      }
    }
    _getOption(key) {
      return __privateGet(this, _options2)[key];
    }
    get _network() {
      assert$1(__privateGet(this, _network2), "network is not available yet", "NETWORK_ERROR");
      return __privateGet(this, _network2);
    }
    async _perform(req) {
      if (req.method === "call" || req.method === "estimateGas") {
        let tx = req.transaction;
        if (tx && tx.type != null && getBigInt(tx.type)) {
          if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {
            const feeData = await this.getFeeData();
            if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
              req = Object.assign({}, req, {
                transaction: Object.assign({}, tx, { type: void 0 })
              });
            }
          }
        }
      }
      const request2 = this.getRpcRequest(req);
      if (request2 != null) {
        return await this.send(request2.method, request2.args);
      }
      return super._perform(req);
    }
    async _detectNetwork() {
      const network = this._getOption("staticNetwork");
      if (network) {
        return network;
      }
      if (this.ready) {
        return Network.from(getBigInt(await this.send("eth_chainId", [])));
      }
      const payload = {
        id: __privateWrapper(this, _nextId)._++,
        method: "eth_chainId",
        params: [],
        jsonrpc: "2.0"
      };
      this.emit("debug", { action: "sendRpcPayload", payload });
      let result;
      try {
        result = (await this._send(payload))[0];
      } catch (error) {
        this.emit("debug", { action: "receiveRpcError", error });
        throw error;
      }
      this.emit("debug", { action: "receiveRpcResult", result });
      if ("result" in result) {
        return Network.from(getBigInt(result.result));
      }
      throw this.getRpcError(payload, result);
    }
    _start() {
      if (__privateGet(this, _notReady) == null || __privateGet(this, _notReady).resolve == null) {
        return;
      }
      __privateGet(this, _notReady).resolve();
      __privateSet(this, _notReady, null);
      (async () => {
        while (__privateGet(this, _network2) == null) {
          try {
            __privateSet(this, _network2, await this._detectNetwork());
          } catch (error) {
            formatAppLog("log", "at node_modules/ethers/lib.esm/providers/provider-jsonrpc.js:391", "JsonRpcProvider failed to startup; retry in 1s");
            await stall$2(1e3);
          }
        }
        __privateMethod(this, _scheduleDrain, scheduleDrain_fn).call(this);
      })();
    }
    async _waitUntilReady() {
      if (__privateGet(this, _notReady) == null) {
        return;
      }
      return await __privateGet(this, _notReady).promise;
    }
    _getSubscriber(sub) {
      if (sub.type === "pending") {
        return new FilterIdPendingSubscriber(this);
      }
      if (sub.type === "event") {
        return new FilterIdEventSubscriber(this, sub.filter);
      }
      if (sub.type === "orphan" && sub.filter.orphan === "drop-log") {
        return new UnmanagedSubscriber("orphan");
      }
      return super._getSubscriber(sub);
    }
    get ready() {
      return __privateGet(this, _notReady) == null;
    }
    getRpcTransaction(tx) {
      const result = {};
      ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach((key) => {
        if (tx[key] == null) {
          return;
        }
        let dstKey = key;
        if (key === "gasLimit") {
          dstKey = "gas";
        }
        result[dstKey] = toQuantity(getBigInt(tx[key], `tx.${key}`));
      });
      ["from", "to", "data"].forEach((key) => {
        if (tx[key] == null) {
          return;
        }
        result[key] = hexlify(tx[key]);
      });
      if (tx.accessList) {
        result["accessList"] = accessListify(tx.accessList);
      }
      return result;
    }
    getRpcRequest(req) {
      switch (req.method) {
        case "chainId":
          return { method: "eth_chainId", args: [] };
        case "getBlockNumber":
          return { method: "eth_blockNumber", args: [] };
        case "getGasPrice":
          return { method: "eth_gasPrice", args: [] };
        case "getBalance":
          return {
            method: "eth_getBalance",
            args: [getLowerCase(req.address), req.blockTag]
          };
        case "getTransactionCount":
          return {
            method: "eth_getTransactionCount",
            args: [getLowerCase(req.address), req.blockTag]
          };
        case "getCode":
          return {
            method: "eth_getCode",
            args: [getLowerCase(req.address), req.blockTag]
          };
        case "getStorage":
          return {
            method: "eth_getStorageAt",
            args: [
              getLowerCase(req.address),
              "0x" + req.position.toString(16),
              req.blockTag
            ]
          };
        case "broadcastTransaction":
          return {
            method: "eth_sendRawTransaction",
            args: [req.signedTransaction]
          };
        case "getBlock":
          if ("blockTag" in req) {
            return {
              method: "eth_getBlockByNumber",
              args: [req.blockTag, !!req.includeTransactions]
            };
          } else if ("blockHash" in req) {
            return {
              method: "eth_getBlockByHash",
              args: [req.blockHash, !!req.includeTransactions]
            };
          }
          break;
        case "getTransaction":
          return {
            method: "eth_getTransactionByHash",
            args: [req.hash]
          };
        case "getTransactionReceipt":
          return {
            method: "eth_getTransactionReceipt",
            args: [req.hash]
          };
        case "call":
          return {
            method: "eth_call",
            args: [this.getRpcTransaction(req.transaction), req.blockTag]
          };
        case "estimateGas": {
          return {
            method: "eth_estimateGas",
            args: [this.getRpcTransaction(req.transaction)]
          };
        }
        case "getLogs":
          if (req.filter && req.filter.address != null) {
            if (Array.isArray(req.filter.address)) {
              req.filter.address = req.filter.address.map(getLowerCase);
            } else {
              req.filter.address = getLowerCase(req.filter.address);
            }
          }
          return { method: "eth_getLogs", args: [req.filter] };
      }
      return null;
    }
    getRpcError(payload, _error2) {
      const { method: method2 } = payload;
      const { error } = _error2;
      if (method2 === "eth_estimateGas" && error.message) {
        const msg = error.message;
        if (!msg.match(/revert/i) && msg.match(/insufficient funds/i)) {
          return makeError("insufficient funds", "INSUFFICIENT_FUNDS", {
            transaction: payload.params[0]
          });
        }
      }
      if (method2 === "eth_call" || method2 === "eth_estimateGas") {
        const result = spelunkData(error);
        const e = AbiCoder.getBuiltinCallException(method2 === "eth_call" ? "call" : "estimateGas", payload.params[0], result ? result.data : null);
        e.info = { error, payload };
        return e;
      }
      const message = JSON.stringify(spelunkMessage(error));
      if (typeof error.message === "string" && error.message.match(/user denied|ethers-user-denied/i)) {
        const actionMap = {
          eth_sign: "signMessage",
          personal_sign: "signMessage",
          eth_signTypedData_v4: "signTypedData",
          eth_signTransaction: "signTransaction",
          eth_sendTransaction: "sendTransaction",
          eth_requestAccounts: "requestAccess",
          wallet_requestAccounts: "requestAccess"
        };
        return makeError(`user rejected action`, "ACTION_REJECTED", {
          action: actionMap[method2] || "unknown",
          reason: "rejected",
          info: { payload, error }
        });
      }
      if (method2 === "eth_sendRawTransaction" || method2 === "eth_sendTransaction") {
        const transaction = payload.params[0];
        if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {
          return makeError("insufficient funds for intrinsic transaction cost", "INSUFFICIENT_FUNDS", {
            transaction
          });
        }
        if (message.match(/nonce/i) && message.match(/too low/i)) {
          return makeError("nonce has already been used", "NONCE_EXPIRED", { transaction });
        }
        if (message.match(/replacement transaction/i) && message.match(/underpriced/i)) {
          return makeError("replacement fee too low", "REPLACEMENT_UNDERPRICED", { transaction });
        }
        if (message.match(/only replay-protected/i)) {
          return makeError("legacy pre-eip-155 transactions not supported", "UNSUPPORTED_OPERATION", {
            operation: method2,
            info: { transaction }
          });
        }
      }
      if (message.match(/the method .* does not exist/i)) {
        return makeError("unsupported operation", "UNSUPPORTED_OPERATION", {
          operation: payload.method
        });
      }
      return makeError("could not coalesce error", "UNKNOWN_ERROR", { error });
    }
    send(method2, params) {
      const id2 = __privateWrapper(this, _nextId)._++;
      const promise = new Promise((resolve, reject) => {
        __privateGet(this, _payloads).push({
          resolve,
          reject,
          payload: { method: method2, params, id: id2, jsonrpc: "2.0" }
        });
      });
      __privateMethod(this, _scheduleDrain, scheduleDrain_fn).call(this);
      return promise;
    }
    async getSigner(address) {
      if (address == null) {
        address = 0;
      }
      const accountsPromise = this.send("eth_accounts", []);
      if (typeof address === "number") {
        const accounts2 = await accountsPromise;
        if (address >= accounts2.length) {
          throw new Error("no such account");
        }
        return new JsonRpcSigner(this, accounts2[address]);
      }
      const { accounts } = await resolveProperties({
        network: this.getNetwork(),
        accounts: accountsPromise
      });
      address = getAddress(address);
      for (const account of accounts) {
        if (getAddress(account) === account) {
          return new JsonRpcSigner(this, account);
        }
      }
      throw new Error("invalid account");
    }
  }
  _options2 = new WeakMap();
  _nextId = new WeakMap();
  _payloads = new WeakMap();
  _drainTimer = new WeakMap();
  _notReady = new WeakMap();
  _network2 = new WeakMap();
  _scheduleDrain = new WeakSet();
  scheduleDrain_fn = function() {
    if (__privateGet(this, _drainTimer)) {
      return;
    }
    const stallTime = this._getOption("batchMaxCount") === 1 ? 0 : this._getOption("batchStallTime");
    __privateSet(this, _drainTimer, setTimeout(() => {
      __privateSet(this, _drainTimer, null);
      const payloads = __privateGet(this, _payloads);
      __privateSet(this, _payloads, []);
      while (payloads.length) {
        const batch = [payloads.shift()];
        while (payloads.length) {
          if (batch.length === __privateGet(this, _options2).batchMaxCount) {
            break;
          }
          batch.push(payloads.shift());
          const bytes2 = JSON.stringify(batch.map((p2) => p2.payload));
          if (bytes2.length > __privateGet(this, _options2).batchMaxSize) {
            payloads.unshift(batch.pop());
            break;
          }
        }
        (async () => {
          const payload = batch.length === 1 ? batch[0].payload : batch.map((p2) => p2.payload);
          this.emit("debug", { action: "sendRpcPayload", payload });
          try {
            const result = await this._send(payload);
            this.emit("debug", { action: "receiveRpcResult", result });
            for (const { resolve, reject, payload: payload2 } of batch) {
              const resp = result.filter((r2) => r2.id === payload2.id)[0];
              if (resp == null) {
                return reject(new Error("@TODO: no result"));
              }
              if ("error" in resp) {
                return reject(this.getRpcError(payload2, resp));
              }
              resolve(resp.result);
            }
          } catch (error) {
            this.emit("debug", { action: "receiveRpcError", error });
            for (const { reject } of batch) {
              reject(error);
            }
          }
        })();
      }
    }, stallTime));
  };
  class JsonRpcApiPollingProvider extends JsonRpcApiProvider {
    constructor(network, options) {
      super(network, options);
      __privateAdd(this, _pollingInterval, void 0);
      __privateSet(this, _pollingInterval, 4e3);
    }
    _getSubscriber(sub) {
      const subscriber = super._getSubscriber(sub);
      if (isPollable(subscriber)) {
        subscriber.pollingInterval = __privateGet(this, _pollingInterval);
      }
      return subscriber;
    }
    get pollingInterval() {
      return __privateGet(this, _pollingInterval);
    }
    set pollingInterval(value) {
      if (!Number.isInteger(value) || value < 0) {
        throw new Error("invalid interval");
      }
      __privateSet(this, _pollingInterval, value);
      this._forEachSubscriber((sub) => {
        if (isPollable(sub)) {
          sub.pollingInterval = __privateGet(this, _pollingInterval);
        }
      });
    }
  }
  _pollingInterval = new WeakMap();
  class JsonRpcProvider extends JsonRpcApiPollingProvider {
    constructor(url, network, options) {
      if (url == null) {
        url = "http://localhost:8545";
      }
      super(network, options);
      __privateAdd(this, _connect, void 0);
      if (typeof url === "string") {
        __privateSet(this, _connect, new FetchRequest(url));
      } else {
        __privateSet(this, _connect, url.clone());
      }
    }
    _getConnection() {
      return __privateGet(this, _connect).clone();
    }
    async send(method2, params) {
      await this._start();
      return await super.send(method2, params);
    }
    async _send(payload) {
      const request2 = this._getConnection();
      request2.body = JSON.stringify(payload);
      request2.setHeader("content-type", "application/json");
      const response = await request2.send();
      response.assertOk();
      let resp = response.bodyJson;
      if (!Array.isArray(resp)) {
        resp = [resp];
      }
      return resp;
    }
  }
  _connect = new WeakMap();
  function spelunkData(value) {
    if (value == null) {
      return null;
    }
    if (typeof value.message === "string" && value.message.match("reverted") && isHexString(value.data)) {
      return { message: value.message, data: value.data };
    }
    if (typeof value === "object") {
      for (const key in value) {
        const result = spelunkData(value[key]);
        if (result) {
          return result;
        }
      }
      return null;
    }
    if (typeof value === "string") {
      try {
        return spelunkData(JSON.parse(value));
      } catch (error) {
      }
    }
    return null;
  }
  function _spelunkMessage(value, result) {
    if (value == null) {
      return;
    }
    if (typeof value.message === "string") {
      result.push(value.message);
    }
    if (typeof value === "object") {
      for (const key in value) {
        _spelunkMessage(value[key], result);
      }
    }
    if (typeof value === "string") {
      try {
        return _spelunkMessage(JSON.parse(value), result);
      } catch (error) {
      }
    }
  }
  function spelunkMessage(value) {
    const result = [];
    _spelunkMessage(value, result);
    return result;
  }
  const _BaseWallet = class extends AbstractSigner {
    constructor(privateKey, provider) {
      super(provider);
      __privateAdd(this, _signingKey, void 0);
      assertArgument(privateKey && typeof privateKey.sign === "function", "invalid private key", "privateKey", "[ REDACTED ]");
      __privateSet(this, _signingKey, privateKey);
      const address = computeAddress(this.signingKey.publicKey);
      defineProperties(this, { address });
    }
    get signingKey() {
      return __privateGet(this, _signingKey);
    }
    get privateKey() {
      return this.signingKey.privateKey;
    }
    async getAddress() {
      return this.address;
    }
    connect(provider) {
      return new _BaseWallet(__privateGet(this, _signingKey), provider);
    }
    async signTransaction(tx) {
      const { to, from } = await resolveProperties({
        to: tx.to ? resolveAddress(tx.to, this.provider) : void 0,
        from: tx.from ? resolveAddress(tx.from, this.provider) : void 0
      });
      if (to != null) {
        tx.to = to;
      }
      if (from != null) {
        tx.from = from;
      }
      if (tx.from != null) {
        assertArgument(getAddress(tx.from) === this.address, "transaction from address mismatch", "tx.from", tx.from);
        delete tx.from;
      }
      const btx = Transaction.from(tx);
      btx.signature = this.signingKey.sign(btx.unsignedHash);
      return btx.serialized;
    }
    async signMessage(message) {
      return this.signMessageSync(message);
    }
    signMessageSync(message) {
      return this.signingKey.sign(hashMessage(message)).serialized;
    }
    async signTypedData(domain, types, value) {
      const populated = await TypedDataEncoder.resolveNames(domain, types, value, async (name) => {
        assert$1(this.provider != null, "cannot resolve ENS names without a provider", "UNSUPPORTED_OPERATION", {
          operation: "resolveName",
          info: { name }
        });
        const address = await this.provider.resolveName(name);
        assert$1(address != null, "unconfigured ENS name", "UNCONFIGURED_NAME", {
          value: name
        });
        return address;
      });
      return this.signingKey.sign(TypedDataEncoder.hash(populated.domain, types, populated.value)).serialized;
    }
  };
  let BaseWallet = _BaseWallet;
  _signingKey = new WeakMap();
  const subsChrs = " !#$%&'()*+,-./<=>?@[]^_`{|}~";
  const Word = /^[a-z]*$/i;
  function unfold(words2, sep) {
    let initial = 97;
    return words2.reduce((accum, word) => {
      if (word === sep) {
        initial++;
      } else if (word.match(Word)) {
        accum.push(String.fromCharCode(initial) + word);
      } else {
        initial = 97;
        accum.push(word);
      }
      return accum;
    }, []);
  }
  function decode(data, subs) {
    for (let i2 = subsChrs.length - 1; i2 >= 0; i2--) {
      data = data.split(subsChrs[i2]).join(subs.substring(2 * i2, 2 * i2 + 2));
    }
    const clumps = [];
    const leftover = data.replace(/(:|([0-9])|([A-Z][a-z]*))/g, (all, item, semi, word) => {
      if (semi) {
        for (let i2 = parseInt(semi); i2 >= 0; i2--) {
          clumps.push(";");
        }
      } else {
        clumps.push(item.toLowerCase());
      }
      return "";
    });
    if (leftover) {
      throw new Error(`leftovers: ${JSON.stringify(leftover)}`);
    }
    return unfold(unfold(clumps, ";"), ":");
  }
  function decodeOwl(data) {
    assertArgument(data[0] === "0", "unsupported auwl data", "data", data);
    return decode(data.substring(1 + 2 * subsChrs.length), data.substring(1, 1 + 2 * subsChrs.length));
  }
  class Wordlist {
    constructor(locale) {
      defineProperties(this, { locale });
    }
    split(phrase) {
      return phrase.toLowerCase().split(/\s+/g);
    }
    join(words2) {
      return words2.join(" ");
    }
  }
  class WordlistOwl extends Wordlist {
    constructor(locale, data, checksum2) {
      super(locale);
      __privateAdd(this, _loadWords);
      __privateAdd(this, _data4, void 0);
      __privateAdd(this, _checksum, void 0);
      __privateAdd(this, _words, void 0);
      __privateSet(this, _data4, data);
      __privateSet(this, _checksum, checksum2);
      __privateSet(this, _words, null);
    }
    get _data() {
      return __privateGet(this, _data4);
    }
    _decodeWords() {
      return decodeOwl(__privateGet(this, _data4));
    }
    getWord(index) {
      const words2 = __privateMethod(this, _loadWords, loadWords_fn).call(this);
      assertArgument(index >= 0 && index < words2.length, `invalid word index: ${index}`, "index", index);
      return words2[index];
    }
    getWordIndex(word) {
      return __privateMethod(this, _loadWords, loadWords_fn).call(this).indexOf(word);
    }
  }
  _data4 = new WeakMap();
  _checksum = new WeakMap();
  _words = new WeakMap();
  _loadWords = new WeakSet();
  loadWords_fn = function() {
    if (__privateGet(this, _words) == null) {
      const words2 = this._decodeWords();
      const checksum2 = id(words2.join("\n") + "\n");
      if (checksum2 !== __privateGet(this, _checksum)) {
        throw new Error(`BIP39 Wordlist for ${this.locale} FAILED`);
      }
      __privateSet(this, _words, words2);
    }
    return __privateGet(this, _words);
  };
  const words = "0erleonalorenseinceregesticitStanvetearctssi#ch2Athck&tneLl0And#Il.yLeOutO=S|S%b/ra@SurdU'0Ce[Cid|CountCu'Hie=IdOu,-Qui*Ro[TT]T%T*[Tu$0AptDD-tD*[Ju,M.UltV<)Vi)0Rob-0FairF%dRaid0A(EEntRee0Ead0MRRp%tS!_rmBumCoholErtI&LLeyLowMo,O}PhaReadySoT Ways0A>urAz(gOngOuntU'd0Aly,Ch%Ci|G G!GryIm$K!Noun)Nu$O` Sw T&naTiqueXietyY1ArtOlogyPe?P!Pro=Ril1ChCt-EaEnaGueMMedM%MyOundR<+Re,Ri=RowTTefa@Ti,Tw%k0KPe@SaultSetSi,SumeThma0H!>OmTa{T&dT.udeTra@0Ct]D.Gu,NtTh%ToTumn0Era+OcadoOid0AkeA*AyEsomeFulKw?d0Is:ByChel%C#D+GL<)Lc#y~MbooN<aNn RRelyRga(R*lSeS-SketTt!3A^AnAutyCau'ComeEfF%eG(Ha=H(dLie=LowLtN^Nef./TrayTt Twe&Y#d3Cyc!DKeNdOlogyRdR`Tt _{AdeAmeAnketA,EakE[IndOodO[omOu'UeUrUsh_rdAtDyIlMbNeNusOkO,Rd R(gRrowSsTtomUn)XY_{etA(AndA[A=EadEezeI{Id+IefIghtIngIskOccoliOk&OnzeOomO` OwnUsh2Bb!DdyD+tFf$oIldLbLkL!tNd!Nk Rd&Rg R,SS(e[SyTt Y Zz:Bba+B(B!CtusGeKe~LmM aMpNN$N)lNdyNn#NoeNvasNy#Pab!P.$Pta(RRb#RdRgoRpetRryRtSeShS(o/!Su$TT$ogT^Teg%yTt!UghtU'Ut]Ve3Il(gL yM|NsusNturyRe$Rta(_irAlkAmp]An+AosApt Ar+A'AtEapE{Ee'EfErryE,I{&IefIldIm}yOi)Oo'R#-U{!UnkUrn0G?Nnam#Rc!Tiz&TyVil_imApArifyAwAyE<ErkEv I{I|IffImbIn-IpO{OgO'O`OudOwnUbUmpU, Ut^_^A,C#utDeFfeeIlInL!@L%LumnMb(eMeMf%tM-Mm#Mp<yNc tNdu@NfirmNg*[N}@Nsid NtrolNv()OkOlPp PyR$ReRnR*@/Tt#U^UntryUp!Ur'Us(V Yo>_{Ad!AftAmA}AshAt AwlAzyEamEd.EekEwI{etImeIspIt-OpO[Ou^OwdUci$UelUi'Umb!Un^UshYY,$2BeLtu*PPbo?dRiousRr|Rta(R=Sh]/omTe3C!:DMa+MpN)Ng R(gShUght WnY3AlBa>BrisCadeCemb CideCl(eC%a>C*a'ErF&'F(eFyG*eLayLiv M<dMi'Ni$Nti,NyP?tP&dPos.P`PutyRi=ScribeS tSignSkSpair/royTailTe@VelopVi)Vo>3AgramAlAm#dAryCeE'lEtFf G.$Gn.yLemmaNn NosaurRe@RtSag*eScov Sea'ShSmi[S%d Splay/<)V tVideV%)Zzy5Ct%Cum|G~Lph(Ma(Na>NkeyN%OrSeUb!Ve_ftAg#AmaA,-AwEamE[IftIllInkIpI=OpUmY2CkMbNeR(g/T^Ty1Arf1Nam-:G G!RlyRnR`Sily/Sy1HoOlogyOnomy0GeItUca>1F%t0G1GhtTh 2BowD E@r-Eg<tEm|Eph<tEvat%I>Se0B?kBodyBra)Er+Ot]PloyPow Pty0Ab!A@DD![D%'EmyErgyF%)Ga+G(eH<)JoyLi,OughR-hRollSu*T Ti*TryVelope1Isode0U$Uip0AA'OdeOs]R%Upt0CapeSayS&)Ta>0Ern$H-s1Id&)IlOkeOl=1A@Amp!Ce[Ch<+C.eCludeCu'Ecu>Erci'Hau,Hib.I!I,ItOt-P<dPe@Pi*Pla(Po'P*[T&dTra0EEbrow:Br-CeCultyDeIntI`~L'MeMilyMousNNcyNtasyRmSh]TT$Th TigueUltV%.e3Atu*Bru?yD $EEdElMa!N)/iv$T^V W3B Ct]EldGu*LeLmLt N$NdNeNg NishReRmR,Sc$ShTT}[X_gAmeAshAtAv%EeIghtIpOatO{O%Ow UidUshY_mCusGIlLd~owOdOtR)Re,R+tRkRtu}RumRw?dSsil/ UndX_gi!AmeEqu|EshI&dIn+OgOntO,OwnOz&U.2ElNNnyRna)RyTu*:D+tInLaxy~ yMePRa+Rba+Rd&Rl-Rm|SSpTeTh U+Ze3N $NiusN*Nt!Nu(e/u*2O,0AntFtGg!Ng RaffeRlVe_dAn)A*A[IdeImp'ObeOomOryO=OwUe_tDde[LdOdO'RillaSpelSsipV nWn_bA)A(AntApeA[Av.yEatE&IdIefItOc yOupOwUnt_rdE[IdeIltIt?N3M:B.IrLfMm M, NdPpyRb%RdRshR=,TVeWkZ?d3AdAl`ArtAvyD+hogIght~oLmetLpNRo3Dd&Gh~NtPRe/%y5BbyCkeyLdLeLiday~owMeNeyOdPeRnRr%R'Sp.$/TelUrV 5BGeM<Mb!M%Nd*dNgryNtRd!RryRtSb<d3Brid:1EOn0EaEntifyLe2N%e4LLeg$L}[0A+Ita>M&'Mu}Pa@Po'Pro=Pul'0ChCludeComeC*a'DexD-a>Do%Du,ryF<tFl-tF%mHa!H .Iti$Je@JuryMa>N Noc|PutQuiryS<eSe@SideSpi*/$lTa@T e,ToVe,V.eVol=3On0L<dOla>Sue0Em1Ory:CketGu?RZz3AlousAns~yWel9BInKeUr}yY5D+I)MpNg!Ni%Nk/:Ng?oo3EnEpT^upY3CkDD}yNdNgdomSsTT^&TeTt&Wi4EeIfeO{Ow:BBelB%Dd DyKeMpNgua+PtopR+T T(UghUndryVaWWnWsu.Y Zy3Ad AfArnA=Ctu*FtGG$G&dIsu*M#NdNg`NsOp?dSs#Tt Vel3ArB tyBr?yC&'FeFtGhtKeMbM.NkOnQuid/Tt!VeZ?d5AdAnB, C$CkG-NelyNgOpTt yUdUn+VeY$5CkyGga+Mb N?N^Xury3R-s:Ch(eDG-G}tIdIlInJ%KeMm$NNa+Nda>NgoNs]Nu$P!Rb!R^Rg(R(eRketRria+SkSs/ T^T i$ThTrixTt XimumZe3AdowAnAsu*AtCh<-D$DiaLodyLtMb M%yNt]NuRcyR+R.RryShSsa+T$Thod3Dd!DnightLk~]M-NdNimumN%Nu>Rac!Rr%S ySs/akeXXedXtu*5Bi!DelDifyMM|N.%NkeyN, N`OnR$ReRn(gSqu.oTh T]T%Unta(U'VeVie5ChFf(LeLtiplySc!SeumShroomS-/Tu$3Self/ yTh:I=MePk(Rrow/yT]Tu*3ArCkEdGati=G!@I` PhewR=/TTw%kUtr$V WsXt3CeGht5B!I'M(eeOd!Rm$R`SeTab!TeTh(gTi)VelW5C!?Mb R'T:K0EyJe@Li+Scu*S =Ta(Vious0CurE<Tob 0Or1FF Fi)T&2L1Ay0DI=Ymp-0It0CeEI#L(eLy1EnEraIn]Po'T]1An+B.Ch?dD D(?yG<I|Ig($Ph<0Tr-h0H 0Tdo%T TputTside0AlEnEr0NN 0Yg&0/ 0O}:CtDd!GeIrLa)LmNdaNelN-N` P RadeR|RkRrotRtySsT^ThTi|TrolTt nU'VeYm|3A)AnutArAs<tL-<NN$tyNcilOp!Pp Rfe@Rm.Rs#T2O}OtoRa'Ys-$0AnoCn-Ctu*E)GGe#~LotNkO} Pe/olT^Zza_)A}tA,-A>AyEa'Ed+U{UgUn+2EmEtIntL?LeLi)NdNyOlPul?Rt]S.]Ssib!/TatoTt yV tyWd W _@i)Ai'Ed-tEf Epa*Es|EttyEv|I)IdeIm?yIntI%.yIs#Iva>IzeOb!mO)[Odu)Of.OgramOje@Omo>OofOp tyOsp O>@OudOvide2Bl-Dd(g~LpL'Mpk(N^PilPpyR^a'R.yRpo'R'ShTZz!3Ramid:99Al.yAntumArt E,]I{ItIzO>:Bb.Cco#CeCkD?DioIlInI'~yMpN^NdomN+PidReTeTh V&WZ%3AdyAlAs#BelBuildC$lCei=CipeC%dCyc!Du)F!@F%mFu'G]G*tGul?Je@LaxLea'LiefLyMa(Memb M(dMo=Nd NewNtOp&PairPeatPla)P%tQui*ScueSemb!Si,Sour)Sp#'SultTi*T*atTurnUn]Ve$ViewW?d2Y`m0BBb#CeChDeD+F!GhtGidNgOtPp!SkTu$V$V 5AdA,BotBu,CketM<)OfOkieOmSeTa>UghUndU>Y$5Bb DeGLeNNwayR$:DDd!D}[FeIlLadLm#L#LtLu>MeMp!NdTisfyToshiU)Usa+VeY1A!AnA*Att E}HemeHoolI&)I[%sOrp]OutRapRe&RiptRub1AAr^As#AtC#dC*tCt]Cur.yEdEkGm|Le@~M(?Ni%N'Nt&)RiesRvi)Ss]Tt!TupV&_dowAftAllowA*EdEllEriffIeldIftI}IpIv O{OeOotOpOrtOuld O=RimpRugUff!Y0Bl(gCkDeE+GhtGnL|Lk~yLv Mil?Mp!N)NgR&/ Tua>XZe1A>Et^IIllInIrtUll0AbAmEepEnd I)IdeIghtImOg<OtOwUsh0AllArtI!OkeOo`0A{AkeApIffOw0ApCc Ci$CkDaFtL?Ldi LidLut]L=Me#eNgOnRryRtUlUndUpUr)U`0A)A*Ati$AwnEakEci$EedEllEndH eI)Id IkeInIr.L.OilOns%O#OrtOtRayReadR(gY0Ua*UeezeUir*l_b!AdiumAffA+AirsAmpAndArtA>AyEakEelEmEpE*oI{IllIngO{Oma^O}OolOryO=Ra>gyReetRikeR#gRugg!Ud|UffUmb!Y!0Bje@Bm.BwayC)[ChDd&Ff G?G+,ItMm NNnyN'tP PplyP*meReRfa)R+Rpri'RroundR=ySpe@/a(1AllowAmpApArmE?EetIftImIngIt^Ord1MbolMptomRup/em:B!Ck!GIlL|LkNkPeR+tSk/eTtooXi3A^Am~NN<tNnisNtRm/Xt_nkAtEmeEnE%yE*EyIngIsOughtReeRi=RowUmbUnd 0CketDeG LtMb MeNyPRedSsueT!5A,BaccoDayDdl EGe` I!tK&MatoM%rowNeNgueNightOlO`PP-Pp!R^RnadoRtoi'SsT$Uri,W?dW WnY_{AdeAff-Ag-A(Ansf ApAshA=lAyEatEeEndI$IbeI{Igg ImIpOphyOub!U{UeUlyUmpetU,U`Y2BeIt]Mb!NaN}lRkeyRnRt!1El=EntyI)InI,O1PeP-$:5Ly5B*lla0Ab!Awa*C!Cov D DoFairFoldHappyIf%mIqueItIv 'KnownLo{TilUsu$Veil1Da>GradeHoldOnP Set1B<Ge0A+EEdEfulE![U$0Il.y:C<tCuumGueLidL!yL=NNishP%Rious/Ult3H-!L=tNd%Ntu*NueRbRifyRs]RyS'lT <3Ab!Br<tCiousCt%yDeoEw~a+Nta+Ol(Rtu$RusSaS.Su$T$Vid5C$I)IdLc<oLumeTeYa+:GeG#ItLk~LnutNtRfa*RmRri%ShSp/eT VeY3Al`Ap#ArA'lA` BDd(gEk&dIrdLcome/T_!AtEatEelEnE*IpIsp 0DeD`FeLd~NNdowNeNgNkNn Nt ReSdomSeShT}[5LfM<Nd OdOlRdRkRldRryR`_pE{E,!I,I>Ong::Rd3Ar~ow9UUngU`:3BraRo9NeO";
  const checksum = "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60";
  let wordlist = null;
  class LangEn extends WordlistOwl {
    constructor() {
      super("en", words, checksum);
    }
    static wordlist() {
      if (wordlist == null) {
        wordlist = new LangEn();
      }
      return wordlist;
    }
  }
  function getUpperMask(bits) {
    return (1 << bits) - 1 << 8 - bits & 255;
  }
  function getLowerMask(bits) {
    return (1 << bits) - 1 & 255;
  }
  function mnemonicToEntropy(mnemonic, wordlist2) {
    assertNormalize("NFKD");
    if (wordlist2 == null) {
      wordlist2 = LangEn.wordlist();
    }
    const words2 = wordlist2.split(mnemonic);
    assertArgument(words2.length % 3 === 0 && words2.length >= 12 && words2.length <= 24, "invalid mnemonic length", "mnemonic", "[ REDACTED ]");
    const entropy = new Uint8Array(Math.ceil(11 * words2.length / 8));
    let offset = 0;
    for (let i2 = 0; i2 < words2.length; i2++) {
      let index = wordlist2.getWordIndex(words2[i2].normalize("NFKD"));
      assertArgument(index >= 0, `invalid mnemonic word at index ${i2}`, "mnemonic", "[ REDACTED ]");
      for (let bit = 0; bit < 11; bit++) {
        if (index & 1 << 10 - bit) {
          entropy[offset >> 3] |= 1 << 7 - offset % 8;
        }
        offset++;
      }
    }
    const entropyBits = 32 * words2.length / 3;
    const checksumBits = words2.length / 3;
    const checksumMask = getUpperMask(checksumBits);
    const checksum2 = getBytes(sha256$1(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
    assertArgument(checksum2 === (entropy[entropy.length - 1] & checksumMask), "invalid mnemonic checksum", "mnemonic", "[ REDACTED ]");
    return hexlify(entropy.slice(0, entropyBits / 8));
  }
  function entropyToMnemonic(entropy, wordlist2) {
    assertArgument(entropy.length % 4 === 0 && entropy.length >= 16 && entropy.length <= 32, "invalid entropy size", "entropy", "[ REDACTED ]");
    if (wordlist2 == null) {
      wordlist2 = LangEn.wordlist();
    }
    const indices = [0];
    let remainingBits = 11;
    for (let i2 = 0; i2 < entropy.length; i2++) {
      if (remainingBits > 8) {
        indices[indices.length - 1] <<= 8;
        indices[indices.length - 1] |= entropy[i2];
        remainingBits -= 8;
      } else {
        indices[indices.length - 1] <<= remainingBits;
        indices[indices.length - 1] |= entropy[i2] >> 8 - remainingBits;
        indices.push(entropy[i2] & getLowerMask(8 - remainingBits));
        remainingBits += 3;
      }
    }
    const checksumBits = entropy.length / 4;
    const checksum2 = parseInt(sha256$1(entropy).substring(2, 4), 16) & getUpperMask(checksumBits);
    indices[indices.length - 1] <<= checksumBits;
    indices[indices.length - 1] |= checksum2 >> 8 - checksumBits;
    return wordlist2.join(indices.map((index) => wordlist2.getWord(index)));
  }
  const _guard$1 = {};
  class Mnemonic {
    constructor(guard, entropy, phrase, password, wordlist2) {
      if (password == null) {
        password = "";
      }
      if (wordlist2 == null) {
        wordlist2 = LangEn.wordlist();
      }
      assertPrivate(guard, _guard$1, "Mnemonic");
      defineProperties(this, { phrase, password, wordlist: wordlist2, entropy });
    }
    computeSeed() {
      const salt = toUtf8Bytes("mnemonic" + this.password, "NFKD");
      return pbkdf2$1(toUtf8Bytes(this.phrase, "NFKD"), salt, 2048, 64, "sha512");
    }
    static fromPhrase(phrase, password, wordlist2) {
      const entropy = mnemonicToEntropy(phrase, wordlist2);
      phrase = entropyToMnemonic(getBytes(entropy), wordlist2);
      return new Mnemonic(_guard$1, entropy, phrase, password, wordlist2);
    }
    static fromEntropy(_entropy, password, wordlist2) {
      const entropy = getBytes(_entropy, "entropy");
      const phrase = entropyToMnemonic(entropy, wordlist2);
      return new Mnemonic(_guard$1, hexlify(entropy), phrase, password, wordlist2);
    }
    static entropyToPhrase(_entropy, wordlist2) {
      const entropy = getBytes(_entropy, "entropy");
      return entropyToMnemonic(entropy, wordlist2);
    }
    static phraseToEntropy(phrase, wordlist2) {
      return mnemonicToEntropy(phrase, wordlist2);
    }
    static isValidMnemonic(phrase, wordlist2) {
      try {
        mnemonicToEntropy(phrase, wordlist2);
        return true;
      } catch (error) {
      }
      return false;
    }
  }
  /*! MIT License. Copyright 2015-2022 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */
  var __classPrivateFieldSet$2 = globalThis && globalThis.__classPrivateFieldSet || function(receiver, state, value, kind, f2) {
    if (kind === "m")
      throw new TypeError("Private method is not writable");
    if (kind === "a" && !f2)
      throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
      throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
  };
  var __classPrivateFieldGet$2 = globalThis && globalThis.__classPrivateFieldGet || function(receiver, state, kind, f2) {
    if (kind === "a" && !f2)
      throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
      throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
  };
  var _AES_key, _AES_Kd, _AES_Ke;
  const numberOfRounds = { 16: 10, 24: 12, 32: 14 };
  const rcon = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145];
  const S = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22];
  const Si = [82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125];
  const T1 = [3328402341, 4168907908, 4000806809, 4135287693, 4294111757, 3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241, 1445669757, 3892248089, 3050821474, 1303096294, 3967186586, 2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171, 2387036105, 4226871307, 1101901292, 3017069671, 1604494077, 1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402, 3791519004, 1033081774, 1277568618, 1815492186, 2118074177, 4126668546, 2211236943, 1748251740, 1369810420, 3521504564, 4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908, 2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135, 798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438, 1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972, 874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614, 1983593293, 3084310113, 2108928974, 1378429307, 3722699582, 1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436, 1075847264, 3825007647, 2041688520, 3059440621, 3563743934, 2378943302, 1740553945, 1916352843, 2487896798, 2555137236, 2958579944, 2244988746, 3151024235, 3320835882, 1336584933, 3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663, 3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106, 1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413, 563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573, 1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300, 403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436, 773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572, 3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905, 2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882, 3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493, 2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571, 201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935, 3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010, 2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682, 1235855840, 3630984372, 2891339514, 4092916743, 3488279077, 3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016, 1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513, 3421038627, 2715671932, 3899946140, 1042226977, 2521517021, 1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956, 3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891, 1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535, 664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707, 2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602, 3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671, 1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982, 3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163, 2824099068, 1841019862, 739644986];
  const T2 = [2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938, 1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202, 3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112, 4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227, 1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910, 1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083, 1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144, 2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098, 2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013, 1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810, 3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234, 2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800, 3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245, 3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766];
  const T3 = [1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298, 3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082, 2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960, 1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418, 2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893, 3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074, 1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308, 3151392187, 372911126];
  const T4 = [1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983, 3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687, 2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760, 1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388, 2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873, 3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839, 1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848, 3149649517, 370555436];
  const T5 = [1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753, 2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485, 1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703, 1172967064, 1576976609, 3274667266, 2169303058, 2370213795, 1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213, 1484005843, 1239443753, 2395588676, 1975683434, 4102977912, 2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444, 1675577880, 3843699074, 2538681184, 1649639237, 2976151520, 3144396420, 4269907996, 4178062228, 1883793496, 2403728665, 2497604743, 1383856311, 2876494627, 1917518562, 3810496343, 1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610, 599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432, 1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293, 2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582, 3178106961, 1042385657, 2531067453, 3711829422, 1306967366, 2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327, 2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483, 2709260871, 2084704233, 4169408201, 0, 159417987, 841739592, 504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415, 168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535, 3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374, 3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893, 766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109, 4144047775, 1551037884, 1147550661, 1543208500, 2336434550, 3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808, 2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059, 3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682, 1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455, 3644379585, 2362090238, 2564033334, 2801107407, 2776292904, 3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698, 4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924, 1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923, 3441850377, 1851332852, 3969562369, 2203032232, 3868552805, 2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284, 699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047, 4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806, 395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715, 1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171, 4211818798, 3009879386, 2463879762, 3910161971, 1842759443, 2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029, 3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775, 1408749034, 1610459739, 3745345300, 2017778566, 3400528769, 3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627, 4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265, 3576870512, 1215061108, 3501741890];
  const T6 = [1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050, 4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162, 3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975, 2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122, 1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602, 1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518, 3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980, 1893020342, 1950903388, 1120974935];
  const T7 = [2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317, 1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239e3, 1910319033, 1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180, 2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107, 2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174, 1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044, 2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991, 3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549, 1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361, 3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225, 344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571, 3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195, 3060847922, 1551124588, 1463996600];
  const T8 = [4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053, 3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287, 1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998e3, 3215307299, 57326082, 377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582, 1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0, 2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413, 3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689, 2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628, 3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464, 410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454, 2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555, 850817237, 1817998408, 3092726480];
  const U1 = [0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795];
  const U2 = [0, 185469197, 370938394, 487725847, 741876788, 657861945, 975451694, 824852259, 1483753576, 1400783205, 1315723890, 1164071807, 1950903388, 2135319889, 1649704518, 1767536459, 2967507152, 3152976349, 2801566410, 2918353863, 2631447780, 2547432937, 2328143614, 2177544179, 3901806776, 3818836405, 4270639778, 4118987695, 3299409036, 3483825537, 3535072918, 3652904859, 2077965243, 1893020342, 1841768865, 1724457132, 1474502543, 1559041666, 1107234197, 1257309336, 598438867, 681933534, 901210569, 1052338372, 261314535, 77422314, 428819965, 310463728, 3409685355, 3224740454, 3710368113, 3593056380, 3875770207, 3960309330, 4045380933, 4195456072, 2471224067, 2554718734, 2237133081, 2388260884, 3212035895, 3028143674, 2842678573, 2724322336, 4138563181, 4255350624, 3769721975, 3955191162, 3667219033, 3516619604, 3431546947, 3347532110, 2933734917, 2782082824, 3099667487, 3016697106, 2196052529, 2313884476, 2499348523, 2683765030, 1179510461, 1296297904, 1347548327, 1533017514, 1786102409, 1635502980, 2087309459, 2003294622, 507358933, 355706840, 136428751, 53458370, 839224033, 957055980, 605657339, 790073846, 2373340630, 2256028891, 2607439820, 2422494913, 2706270690, 2856345839, 3075636216, 3160175349, 3573941694, 3725069491, 3273267108, 3356761769, 4181598602, 4063242375, 4011996048, 3828103837, 1033297158, 915985419, 730517276, 545572369, 296679730, 446754879, 129166120, 213705253, 1709610350, 1860738147, 1945798516, 2029293177, 1239331162, 1120974935, 1606591296, 1422699085, 4148292826, 4233094615, 3781033664, 3931371469, 3682191598, 3497509347, 3446004468, 3328955385, 2939266226, 2755636671, 3106780840, 2988687269, 2198438022, 2282195339, 2501218972, 2652609425, 1201765386, 1286567175, 1371368976, 1521706781, 1805211710, 1620529459, 2105887268, 1988838185, 533804130, 350174575, 164439672, 46346101, 870912086, 954669403, 636813900, 788204353, 2358957921, 2274680428, 2592523643, 2441661558, 2695033685, 2880240216, 3065962831, 3182487618, 3572145929, 3756299780, 3270937875, 3388507166, 4174560061, 4091327024, 4006521127, 3854606378, 1014646705, 930369212, 711349675, 560487590, 272786309, 457992840, 106852767, 223377554, 1678381017, 1862534868, 1914052035, 2031621326, 1211247597, 1128014560, 1580087799, 1428173050, 32283319, 182621114, 401639597, 486441376, 768917123, 651868046, 1003007129, 818324884, 1503449823, 1385356242, 1333838021, 1150208456, 1973745387, 2125135846, 1673061617, 1756818940, 2970356327, 3120694122, 2802849917, 2887651696, 2637442643, 2520393566, 2334669897, 2149987652, 3917234703, 3799141122, 4284502037, 4100872472, 3309594171, 3460984630, 3545789473, 3629546796, 2050466060, 1899603969, 1814803222, 1730525723, 1443857720, 1560382517, 1075025698, 1260232239, 575138148, 692707433, 878443390, 1062597235, 243256656, 91341917, 409198410, 325965383, 3403100636, 3252238545, 3704300486, 3620022987, 3874428392, 3990953189, 4042459122, 4227665663, 2460449204, 2578018489, 2226875310, 2411029155, 3198115200, 3046200461, 2827177882, 2743944855];
  const U3 = [0, 218828297, 437656594, 387781147, 875313188, 958871085, 775562294, 590424639, 1750626376, 1699970625, 1917742170, 2135253587, 1551124588, 1367295589, 1180849278, 1265195639, 3501252752, 3720081049, 3399941250, 3350065803, 3835484340, 3919042237, 4270507174, 4085369519, 3102249176, 3051593425, 2734591178, 2952102595, 2361698556, 2177869557, 2530391278, 2614737639, 3145456443, 3060847922, 2708326185, 2892417312, 2404901663, 2187128086, 2504130317, 2555048196, 3542330227, 3727205754, 3375740769, 3292445032, 3876557655, 3926170974, 4246310725, 4027744588, 1808481195, 1723872674, 1910319033, 2094410160, 1608975247, 1391201670, 1173430173, 1224348052, 59984867, 244860394, 428169201, 344873464, 935293895, 984907214, 766078933, 547512796, 1844882806, 1627235199, 2011214180, 2062270317, 1507497298, 1423022939, 1137477952, 1321699145, 95345982, 145085239, 532201772, 313773861, 830661914, 1015671571, 731183368, 648017665, 3175501286, 2957853679, 2807058932, 2858115069, 2305455554, 2220981195, 2474404304, 2658625497, 3575528878, 3625268135, 3473416636, 3254988725, 3778151818, 3963161475, 4213447064, 4130281361, 3599595085, 3683022916, 3432737375, 3247465558, 3802222185, 4020912224, 4172763771, 4122762354, 3201631749, 3017672716, 2764249623, 2848461854, 2331590177, 2280796200, 2431590963, 2648976442, 104699613, 188127444, 472615631, 287343814, 840019705, 1058709744, 671593195, 621591778, 1852171925, 1668212892, 1953757831, 2037970062, 1514790577, 1463996600, 1080017571, 1297403050, 3673637356, 3623636965, 3235995134, 3454686199, 4007360968, 3822090177, 4107101658, 4190530515, 2997825956, 3215212461, 2830708150, 2779915199, 2256734592, 2340947849, 2627016082, 2443058075, 172466556, 122466165, 273792366, 492483431, 1047239e3, 861968209, 612205898, 695634755, 1646252340, 1863638845, 2013908262, 1963115311, 1446242576, 1530455833, 1277555970, 1093597963, 1636604631, 1820824798, 2073724613, 1989249228, 1436590835, 1487645946, 1337376481, 1119727848, 164948639, 81781910, 331544205, 516552836, 1039717051, 821288114, 669961897, 719700128, 2973530695, 3157750862, 2871682645, 2787207260, 2232435299, 2283490410, 2667994737, 2450346104, 3647212047, 3564045318, 3279033885, 3464042516, 3980931627, 3762502690, 4150144569, 4199882800, 3070356634, 3121275539, 2904027272, 2686254721, 2200818878, 2384911031, 2570832044, 2486224549, 3747192018, 3528626907, 3310321856, 3359936201, 3950355702, 3867060991, 4049844452, 4234721005, 1739656202, 1790575107, 2108100632, 1890328081, 1402811438, 1586903591, 1233856572, 1149249077, 266959938, 48394827, 369057872, 418672217, 1002783846, 919489135, 567498868, 752375421, 209336225, 24197544, 376187827, 459744698, 945164165, 895287692, 574624663, 793451934, 1679968233, 1764313568, 2117360635, 1933530610, 1343127501, 1560637892, 1243112415, 1192455638, 3704280881, 3519142200, 3336358691, 3419915562, 3907448597, 3857572124, 4075877127, 4294704398, 3029510009, 3113855344, 2927934315, 2744104290, 2159976285, 2377486676, 2594734927, 2544078150];
  const U4 = [0, 151849742, 303699484, 454499602, 607398968, 758720310, 908999204, 1059270954, 1214797936, 1097159550, 1517440620, 1400849762, 1817998408, 1699839814, 2118541908, 2001430874, 2429595872, 2581445614, 2194319100, 2345119218, 3034881240, 3186202582, 2801699524, 2951971274, 3635996816, 3518358430, 3399679628, 3283088770, 4237083816, 4118925222, 4002861748, 3885750714, 1002142683, 850817237, 698445255, 548169417, 529487843, 377642221, 227885567, 77089521, 1943217067, 2061379749, 1640576439, 1757691577, 1474760595, 1592394909, 1174215055, 1290801793, 2875968315, 2724642869, 3111247143, 2960971305, 2405426947, 2253581325, 2638606623, 2487810577, 3808662347, 3926825029, 4044981591, 4162096729, 3342319475, 3459953789, 3576539503, 3693126241, 1986918061, 2137062819, 1685577905, 1836772287, 1381620373, 1532285339, 1078185097, 1229899655, 1040559837, 923313619, 740276417, 621982671, 439452389, 322734571, 137073913, 19308535, 3871163981, 4021308739, 4104605777, 4255800159, 3263785589, 3414450555, 3499326569, 3651041127, 2933202493, 2815956275, 3167684641, 3049390895, 2330014213, 2213296395, 2566595609, 2448830231, 1305906550, 1155237496, 1607244650, 1455525988, 1776460110, 1626319424, 2079897426, 1928707164, 96392454, 213114376, 396673818, 514443284, 562755902, 679998e3, 865136418, 983426092, 3708173718, 3557504664, 3474729866, 3323011204, 4180808110, 4030667424, 3945269170, 3794078908, 2507040230, 2623762152, 2272556026, 2390325492, 2975484382, 3092726480, 2738905026, 2857194700, 3973773121, 3856137295, 4274053469, 4157467219, 3371096953, 3252932727, 3673476453, 3556361835, 2763173681, 2915017791, 3064510765, 3215307299, 2156299017, 2307622919, 2459735317, 2610011675, 2081048481, 1963412655, 1846563261, 1729977011, 1480485785, 1362321559, 1243905413, 1126790795, 878845905, 1030690015, 645401037, 796197571, 274084841, 425408743, 38544885, 188821243, 3613494426, 3731654548, 3313212038, 3430322568, 4082475170, 4200115116, 3780097726, 3896688048, 2668221674, 2516901860, 2366882550, 2216610296, 3141400786, 2989552604, 2837966542, 2687165888, 1202797690, 1320957812, 1437280870, 1554391400, 1669664834, 1787304780, 1906247262, 2022837584, 265905162, 114585348, 499347990, 349075736, 736970802, 585122620, 972512814, 821712160, 2595684844, 2478443234, 2293045232, 2174754046, 3196267988, 3079546586, 2895723464, 2777952454, 3537852828, 3687994002, 3234156416, 3385345166, 4142626212, 4293295786, 3841024952, 3992742070, 174567692, 57326082, 410887952, 292596766, 777231668, 660510266, 1011452712, 893681702, 1108339068, 1258480242, 1343618912, 1494807662, 1715193156, 1865862730, 1948373848, 2100090966, 2701949495, 2818666809, 3004591147, 3122358053, 2235061775, 2352307457, 2535604243, 2653899549, 3915653703, 3764988233, 4219352155, 4067639125, 3444575871, 3294430577, 3746175075, 3594982253, 836553431, 953270745, 600235211, 718002117, 367585007, 484830689, 133361907, 251657213, 2041877159, 1891211689, 1806599355, 1654886325, 1568718495, 1418573201, 1335535747, 1184342925];
  function convertToInt32(bytes2) {
    const result = [];
    for (let i2 = 0; i2 < bytes2.length; i2 += 4) {
      result.push(bytes2[i2] << 24 | bytes2[i2 + 1] << 16 | bytes2[i2 + 2] << 8 | bytes2[i2 + 3]);
    }
    return result;
  }
  class AES {
    constructor(key) {
      _AES_key.set(this, void 0);
      _AES_Kd.set(this, void 0);
      _AES_Ke.set(this, void 0);
      if (!(this instanceof AES)) {
        throw Error("AES must be instanitated with `new`");
      }
      __classPrivateFieldSet$2(this, _AES_key, new Uint8Array(key), "f");
      const rounds = numberOfRounds[this.key.length];
      if (rounds == null) {
        throw new TypeError("invalid key size (must be 16, 24 or 32 bytes)");
      }
      __classPrivateFieldSet$2(this, _AES_Ke, [], "f");
      __classPrivateFieldSet$2(this, _AES_Kd, [], "f");
      for (let i2 = 0; i2 <= rounds; i2++) {
        __classPrivateFieldGet$2(this, _AES_Ke, "f").push([0, 0, 0, 0]);
        __classPrivateFieldGet$2(this, _AES_Kd, "f").push([0, 0, 0, 0]);
      }
      const roundKeyCount = (rounds + 1) * 4;
      const KC = this.key.length / 4;
      const tk = convertToInt32(this.key);
      let index;
      for (let i2 = 0; i2 < KC; i2++) {
        index = i2 >> 2;
        __classPrivateFieldGet$2(this, _AES_Ke, "f")[index][i2 % 4] = tk[i2];
        __classPrivateFieldGet$2(this, _AES_Kd, "f")[rounds - index][i2 % 4] = tk[i2];
      }
      let rconpointer = 0;
      let t2 = KC, tt2;
      while (t2 < roundKeyCount) {
        tt2 = tk[KC - 1];
        tk[0] ^= S[tt2 >> 16 & 255] << 24 ^ S[tt2 >> 8 & 255] << 16 ^ S[tt2 & 255] << 8 ^ S[tt2 >> 24 & 255] ^ rcon[rconpointer] << 24;
        rconpointer += 1;
        if (KC != 8) {
          for (let i3 = 1; i3 < KC; i3++) {
            tk[i3] ^= tk[i3 - 1];
          }
        } else {
          for (let i3 = 1; i3 < KC / 2; i3++) {
            tk[i3] ^= tk[i3 - 1];
          }
          tt2 = tk[KC / 2 - 1];
          tk[KC / 2] ^= S[tt2 & 255] ^ S[tt2 >> 8 & 255] << 8 ^ S[tt2 >> 16 & 255] << 16 ^ S[tt2 >> 24 & 255] << 24;
          for (let i3 = KC / 2 + 1; i3 < KC; i3++) {
            tk[i3] ^= tk[i3 - 1];
          }
        }
        let i2 = 0, r2, c2;
        while (i2 < KC && t2 < roundKeyCount) {
          r2 = t2 >> 2;
          c2 = t2 % 4;
          __classPrivateFieldGet$2(this, _AES_Ke, "f")[r2][c2] = tk[i2];
          __classPrivateFieldGet$2(this, _AES_Kd, "f")[rounds - r2][c2] = tk[i2++];
          t2++;
        }
      }
      for (let r2 = 1; r2 < rounds; r2++) {
        for (let c2 = 0; c2 < 4; c2++) {
          tt2 = __classPrivateFieldGet$2(this, _AES_Kd, "f")[r2][c2];
          __classPrivateFieldGet$2(this, _AES_Kd, "f")[r2][c2] = U1[tt2 >> 24 & 255] ^ U2[tt2 >> 16 & 255] ^ U3[tt2 >> 8 & 255] ^ U4[tt2 & 255];
        }
      }
    }
    get key() {
      return __classPrivateFieldGet$2(this, _AES_key, "f").slice();
    }
    encrypt(plaintext) {
      if (plaintext.length != 16) {
        throw new TypeError("invalid plaintext size (must be 16 bytes)");
      }
      const rounds = __classPrivateFieldGet$2(this, _AES_Ke, "f").length - 1;
      const a2 = [0, 0, 0, 0];
      let t2 = convertToInt32(plaintext);
      for (let i2 = 0; i2 < 4; i2++) {
        t2[i2] ^= __classPrivateFieldGet$2(this, _AES_Ke, "f")[0][i2];
      }
      for (let r2 = 1; r2 < rounds; r2++) {
        for (let i2 = 0; i2 < 4; i2++) {
          a2[i2] = T1[t2[i2] >> 24 & 255] ^ T2[t2[(i2 + 1) % 4] >> 16 & 255] ^ T3[t2[(i2 + 2) % 4] >> 8 & 255] ^ T4[t2[(i2 + 3) % 4] & 255] ^ __classPrivateFieldGet$2(this, _AES_Ke, "f")[r2][i2];
        }
        t2 = a2.slice();
      }
      const result = new Uint8Array(16);
      let tt2 = 0;
      for (let i2 = 0; i2 < 4; i2++) {
        tt2 = __classPrivateFieldGet$2(this, _AES_Ke, "f")[rounds][i2];
        result[4 * i2] = (S[t2[i2] >> 24 & 255] ^ tt2 >> 24) & 255;
        result[4 * i2 + 1] = (S[t2[(i2 + 1) % 4] >> 16 & 255] ^ tt2 >> 16) & 255;
        result[4 * i2 + 2] = (S[t2[(i2 + 2) % 4] >> 8 & 255] ^ tt2 >> 8) & 255;
        result[4 * i2 + 3] = (S[t2[(i2 + 3) % 4] & 255] ^ tt2) & 255;
      }
      return result;
    }
    decrypt(ciphertext) {
      if (ciphertext.length != 16) {
        throw new TypeError("invalid ciphertext size (must be 16 bytes)");
      }
      const rounds = __classPrivateFieldGet$2(this, _AES_Kd, "f").length - 1;
      const a2 = [0, 0, 0, 0];
      let t2 = convertToInt32(ciphertext);
      for (let i2 = 0; i2 < 4; i2++) {
        t2[i2] ^= __classPrivateFieldGet$2(this, _AES_Kd, "f")[0][i2];
      }
      for (let r2 = 1; r2 < rounds; r2++) {
        for (let i2 = 0; i2 < 4; i2++) {
          a2[i2] = T5[t2[i2] >> 24 & 255] ^ T6[t2[(i2 + 3) % 4] >> 16 & 255] ^ T7[t2[(i2 + 2) % 4] >> 8 & 255] ^ T8[t2[(i2 + 1) % 4] & 255] ^ __classPrivateFieldGet$2(this, _AES_Kd, "f")[r2][i2];
        }
        t2 = a2.slice();
      }
      const result = new Uint8Array(16);
      let tt2 = 0;
      for (let i2 = 0; i2 < 4; i2++) {
        tt2 = __classPrivateFieldGet$2(this, _AES_Kd, "f")[rounds][i2];
        result[4 * i2] = (Si[t2[i2] >> 24 & 255] ^ tt2 >> 24) & 255;
        result[4 * i2 + 1] = (Si[t2[(i2 + 3) % 4] >> 16 & 255] ^ tt2 >> 16) & 255;
        result[4 * i2 + 2] = (Si[t2[(i2 + 2) % 4] >> 8 & 255] ^ tt2 >> 8) & 255;
        result[4 * i2 + 3] = (Si[t2[(i2 + 1) % 4] & 255] ^ tt2) & 255;
      }
      return result;
    }
  }
  _AES_key = /* @__PURE__ */ new WeakMap(), _AES_Kd = /* @__PURE__ */ new WeakMap(), _AES_Ke = /* @__PURE__ */ new WeakMap();
  class ModeOfOperation {
    constructor(name, key, cls) {
      if (cls && !(this instanceof cls)) {
        throw new Error(`${name} must be instantiated with "new"`);
      }
      Object.defineProperties(this, {
        aes: { enumerable: true, value: new AES(key) },
        name: { enumerable: true, value: name }
      });
    }
  }
  var __classPrivateFieldSet$1 = globalThis && globalThis.__classPrivateFieldSet || function(receiver, state, value, kind, f2) {
    if (kind === "m")
      throw new TypeError("Private method is not writable");
    if (kind === "a" && !f2)
      throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
      throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
  };
  var __classPrivateFieldGet$1 = globalThis && globalThis.__classPrivateFieldGet || function(receiver, state, kind, f2) {
    if (kind === "a" && !f2)
      throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
      throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
  };
  var _CBC_iv, _CBC_lastBlock;
  class CBC extends ModeOfOperation {
    constructor(key, iv) {
      super("ECC", key, CBC);
      _CBC_iv.set(this, void 0);
      _CBC_lastBlock.set(this, void 0);
      if (iv) {
        if (iv.length % 16) {
          throw new TypeError("invalid iv size (must be 16 bytes)");
        }
        __classPrivateFieldSet$1(this, _CBC_iv, new Uint8Array(iv), "f");
      } else {
        __classPrivateFieldSet$1(this, _CBC_iv, new Uint8Array(16), "f");
      }
      __classPrivateFieldSet$1(this, _CBC_lastBlock, this.iv, "f");
    }
    get iv() {
      return new Uint8Array(__classPrivateFieldGet$1(this, _CBC_iv, "f"));
    }
    encrypt(plaintext) {
      if (plaintext.length % 16) {
        throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");
      }
      const ciphertext = new Uint8Array(plaintext.length);
      for (let i2 = 0; i2 < plaintext.length; i2 += 16) {
        for (let j2 = 0; j2 < 16; j2++) {
          __classPrivateFieldGet$1(this, _CBC_lastBlock, "f")[j2] ^= plaintext[i2 + j2];
        }
        __classPrivateFieldSet$1(this, _CBC_lastBlock, this.aes.encrypt(__classPrivateFieldGet$1(this, _CBC_lastBlock, "f")), "f");
        ciphertext.set(__classPrivateFieldGet$1(this, _CBC_lastBlock, "f"), i2);
      }
      return ciphertext;
    }
    decrypt(ciphertext) {
      if (ciphertext.length % 16) {
        throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");
      }
      const plaintext = new Uint8Array(ciphertext.length);
      for (let i2 = 0; i2 < ciphertext.length; i2 += 16) {
        const block = this.aes.decrypt(ciphertext.subarray(i2, i2 + 16));
        for (let j2 = 0; j2 < 16; j2++) {
          plaintext[i2 + j2] = block[j2] ^ __classPrivateFieldGet$1(this, _CBC_lastBlock, "f")[j2];
          __classPrivateFieldGet$1(this, _CBC_lastBlock, "f")[j2] = ciphertext[i2 + j2];
        }
      }
      return plaintext;
    }
  }
  _CBC_iv = /* @__PURE__ */ new WeakMap(), _CBC_lastBlock = /* @__PURE__ */ new WeakMap();
  var __classPrivateFieldSet = globalThis && globalThis.__classPrivateFieldSet || function(receiver, state, value, kind, f2) {
    if (kind === "m")
      throw new TypeError("Private method is not writable");
    if (kind === "a" && !f2)
      throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
      throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
  };
  var __classPrivateFieldGet = globalThis && globalThis.__classPrivateFieldGet || function(receiver, state, kind, f2) {
    if (kind === "a" && !f2)
      throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
      throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
  };
  var _CTR_remaining, _CTR_remainingIndex, _CTR_counter;
  class CTR extends ModeOfOperation {
    constructor(key, initialValue) {
      super("CTR", key, CTR);
      _CTR_remaining.set(this, void 0);
      _CTR_remainingIndex.set(this, void 0);
      _CTR_counter.set(this, void 0);
      __classPrivateFieldSet(this, _CTR_counter, new Uint8Array(16), "f");
      __classPrivateFieldGet(this, _CTR_counter, "f").fill(0);
      __classPrivateFieldSet(this, _CTR_remaining, __classPrivateFieldGet(this, _CTR_counter, "f"), "f");
      __classPrivateFieldSet(this, _CTR_remainingIndex, 16, "f");
      if (initialValue == null) {
        initialValue = 1;
      }
      if (typeof initialValue === "number") {
        this.setCounterValue(initialValue);
      } else {
        this.setCounterBytes(initialValue);
      }
    }
    get counter() {
      return new Uint8Array(__classPrivateFieldGet(this, _CTR_counter, "f"));
    }
    setCounterValue(value) {
      if (!Number.isInteger(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {
        throw new TypeError("invalid counter initial integer value");
      }
      for (let index = 15; index >= 0; --index) {
        __classPrivateFieldGet(this, _CTR_counter, "f")[index] = value % 256;
        value = Math.floor(value / 256);
      }
    }
    setCounterBytes(value) {
      if (value.length !== 16) {
        throw new TypeError("invalid counter initial Uint8Array value length");
      }
      __classPrivateFieldGet(this, _CTR_counter, "f").set(value);
    }
    increment() {
      for (let i2 = 15; i2 >= 0; i2--) {
        if (__classPrivateFieldGet(this, _CTR_counter, "f")[i2] === 255) {
          __classPrivateFieldGet(this, _CTR_counter, "f")[i2] = 0;
        } else {
          __classPrivateFieldGet(this, _CTR_counter, "f")[i2]++;
          break;
        }
      }
    }
    encrypt(plaintext) {
      var _a, _b;
      const crypttext = new Uint8Array(plaintext);
      for (let i2 = 0; i2 < crypttext.length; i2++) {
        if (__classPrivateFieldGet(this, _CTR_remainingIndex, "f") === 16) {
          __classPrivateFieldSet(this, _CTR_remaining, this.aes.encrypt(__classPrivateFieldGet(this, _CTR_counter, "f")), "f");
          __classPrivateFieldSet(this, _CTR_remainingIndex, 0, "f");
          this.increment();
        }
        crypttext[i2] ^= __classPrivateFieldGet(this, _CTR_remaining, "f")[__classPrivateFieldSet(this, _CTR_remainingIndex, (_b = __classPrivateFieldGet(this, _CTR_remainingIndex, "f"), _a = _b++, _b), "f"), _a];
      }
      return crypttext;
    }
    decrypt(ciphertext) {
      return this.encrypt(ciphertext);
    }
  }
  _CTR_remaining = /* @__PURE__ */ new WeakMap(), _CTR_remainingIndex = /* @__PURE__ */ new WeakMap(), _CTR_counter = /* @__PURE__ */ new WeakMap();
  function pkcs7Strip(data) {
    if (data.length < 16) {
      throw new TypeError("PKCS#7 invalid length");
    }
    const padder = data[data.length - 1];
    if (padder > 16) {
      throw new TypeError("PKCS#7 padding byte out of range");
    }
    const length = data.length - padder;
    for (let i2 = 0; i2 < padder; i2++) {
      if (data[length + i2] !== padder) {
        throw new TypeError("PKCS#7 invalid padding byte");
      }
    }
    return new Uint8Array(data.subarray(0, length));
  }
  function looseArrayify(hexString) {
    if (typeof hexString === "string" && hexString.substring(0, 2) !== "0x") {
      hexString = "0x" + hexString;
    }
    return getBytesCopy(hexString);
  }
  function zpad$1(value, length) {
    value = String(value);
    while (value.length < length) {
      value = "0" + value;
    }
    return value;
  }
  function getPassword(password) {
    if (typeof password === "string") {
      return toUtf8Bytes(password, "NFKC");
    }
    return getBytesCopy(password);
  }
  function spelunk(object2, _path) {
    const match = _path.match(/^([a-z0-9$_.-]*)(:([a-z]+))?(!)?$/i);
    assertArgument(match != null, "invalid path", "path", _path);
    const path = match[1];
    const type = match[3];
    const reqd = match[4] === "!";
    let cur = object2;
    for (const comp of path.toLowerCase().split(".")) {
      if (Array.isArray(cur)) {
        if (!comp.match(/^[0-9]+$/)) {
          break;
        }
        cur = cur[parseInt(comp)];
      } else if (typeof cur === "object") {
        let found = null;
        for (const key in cur) {
          if (key.toLowerCase() === comp) {
            found = cur[key];
            break;
          }
        }
        cur = found;
      } else {
        cur = null;
      }
      if (cur == null) {
        break;
      }
    }
    assertArgument(!reqd || cur != null, "missing required value", "path", path);
    if (type && cur != null) {
      if (type === "int") {
        if (typeof cur === "string" && cur.match(/^-?[0-9]+$/)) {
          return parseInt(cur);
        } else if (Number.isSafeInteger(cur)) {
          return cur;
        }
      }
      if (type === "number") {
        if (typeof cur === "string" && cur.match(/^-?[0-9.]*$/)) {
          return parseFloat(cur);
        }
      }
      if (type === "data") {
        if (typeof cur === "string") {
          return looseArrayify(cur);
        }
      }
      if (type === "array" && Array.isArray(cur)) {
        return cur;
      }
      if (type === typeof cur) {
        return cur;
      }
      assertArgument(false, `wrong type found for ${type} `, "path", path);
    }
    return cur;
  }
  const defaultPath$1 = "m/44'/60'/0'/0/0";
  function isKeystoreJson(json) {
    try {
      const data = JSON.parse(json);
      const version2 = data.version != null ? parseInt(data.version) : 0;
      if (version2 === 3) {
        return true;
      }
    } catch (error) {
    }
    return false;
  }
  function decrypt(data, key, ciphertext) {
    const cipher = spelunk(data, "crypto.cipher:string");
    if (cipher === "aes-128-ctr") {
      const iv = spelunk(data, "crypto.cipherparams.iv:data!");
      const aesCtr = new CTR(key, iv);
      return hexlify(aesCtr.decrypt(ciphertext));
    }
    assert$1(false, "unsupported cipher", "UNSUPPORTED_OPERATION", {
      operation: "decrypt"
    });
  }
  function getAccount(data, _key) {
    const key = getBytes(_key);
    const ciphertext = spelunk(data, "crypto.ciphertext:data!");
    const computedMAC = hexlify(keccak256(concat([key.slice(16, 32), ciphertext]))).substring(2);
    assertArgument(computedMAC === spelunk(data, "crypto.mac:string!").toLowerCase(), "incorrect password", "password", "[ REDACTED ]");
    const privateKey = decrypt(data, key.slice(0, 16), ciphertext);
    const address = computeAddress(privateKey);
    if (data.address) {
      let check = data.address.toLowerCase();
      if (check.substring(0, 2) !== "0x") {
        check = "0x" + check;
      }
      assertArgument(getAddress(check) === address, "keystore address/privateKey mismatch", "address", data.address);
    }
    const account = { address, privateKey };
    const version2 = spelunk(data, "x-ethers.version:string");
    if (version2 === "0.1") {
      const mnemonicKey = key.slice(32, 64);
      const mnemonicCiphertext = spelunk(data, "x-ethers.mnemonicCiphertext:data!");
      const mnemonicIv = spelunk(data, "x-ethers.mnemonicCounter:data!");
      const mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);
      account.mnemonic = {
        path: spelunk(data, "x-ethers.path:string") || defaultPath$1,
        locale: spelunk(data, "x-ethers.locale:string") || "en",
        entropy: hexlify(getBytes(mnemonicAesCtr.decrypt(mnemonicCiphertext)))
      };
    }
    return account;
  }
  function getDecryptKdfParams(data) {
    const kdf = spelunk(data, "crypto.kdf:string");
    if (kdf && typeof kdf === "string") {
      if (kdf.toLowerCase() === "scrypt") {
        const salt = spelunk(data, "crypto.kdfparams.salt:data!");
        const N2 = spelunk(data, "crypto.kdfparams.n:int!");
        const r2 = spelunk(data, "crypto.kdfparams.r:int!");
        const p2 = spelunk(data, "crypto.kdfparams.p:int!");
        assertArgument(N2 > 0 && (N2 & N2 - 1) === 0, "invalid kdf.N", "kdf.N", N2);
        assertArgument(r2 > 0 && p2 > 0, "invalid kdf", "kdf", kdf);
        const dkLen = spelunk(data, "crypto.kdfparams.dklen:int!");
        assertArgument(dkLen === 32, "invalid kdf.dklen", "kdf.dflen", dkLen);
        return { name: "scrypt", salt, N: N2, r: r2, p: p2, dkLen: 64 };
      } else if (kdf.toLowerCase() === "pbkdf2") {
        const salt = spelunk(data, "crypto.kdfparams.salt:data!");
        const prf = spelunk(data, "crypto.kdfparams.prf:string!");
        const algorithm = prf.split("-").pop();
        assertArgument(algorithm === "sha256" || algorithm === "sha512", "invalid kdf.pdf", "kdf.pdf", prf);
        const count = spelunk(data, "crypto.kdfparams.c:int!");
        const dkLen = spelunk(data, "crypto.kdfparams.dklen:int!");
        assertArgument(dkLen === 32, "invalid kdf.dklen", "kdf.dklen", dkLen);
        return { name: "pbkdf2", salt, count, dkLen, algorithm };
      }
    }
    assertArgument(false, "unsupported key-derivation function", "kdf", kdf);
  }
  function decryptKeystoreJsonSync(json, _password) {
    const data = JSON.parse(json);
    const password = getPassword(_password);
    const params = getDecryptKdfParams(data);
    if (params.name === "pbkdf2") {
      const { salt: salt2, count, dkLen: dkLen2, algorithm } = params;
      const key2 = pbkdf2$1(password, salt2, count, dkLen2, algorithm);
      return getAccount(data, key2);
    }
    assert$1(params.name === "scrypt", "cannot be reached", "UNKNOWN_ERROR", { params });
    const { salt, N: N2, r: r2, p: p2, dkLen } = params;
    const key = scryptSync(password, salt, N2, r2, p2, dkLen);
    return getAccount(data, key);
  }
  function stall$1(duration) {
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve();
      }, duration);
    });
  }
  async function decryptKeystoreJson(json, _password, progress) {
    const data = JSON.parse(json);
    const password = getPassword(_password);
    const params = getDecryptKdfParams(data);
    if (params.name === "pbkdf2") {
      if (progress) {
        progress(0);
        await stall$1(0);
      }
      const { salt: salt2, count, dkLen: dkLen2, algorithm } = params;
      const key2 = pbkdf2$1(password, salt2, count, dkLen2, algorithm);
      if (progress) {
        progress(1);
        await stall$1(0);
      }
      return getAccount(data, key2);
    }
    assert$1(params.name === "scrypt", "cannot be reached", "UNKNOWN_ERROR", { params });
    const { salt, N: N2, r: r2, p: p2, dkLen } = params;
    const key = await scrypt(password, salt, N2, r2, p2, dkLen, progress);
    return getAccount(data, key);
  }
  function getEncryptKdfParams(options) {
    const salt = options.salt != null ? getBytes(options.salt, "options.salt") : randomBytes(32);
    let N2 = 1 << 17, r2 = 8, p2 = 1;
    if (options.scrypt) {
      if (options.scrypt.N) {
        N2 = options.scrypt.N;
      }
      if (options.scrypt.r) {
        r2 = options.scrypt.r;
      }
      if (options.scrypt.p) {
        p2 = options.scrypt.p;
      }
    }
    assertArgument(typeof N2 === "number" && N2 > 0 && Number.isSafeInteger(N2) && (BigInt(N2) & BigInt(N2 - 1)) === BigInt(0), "invalid scrypt N parameter", "options.N", N2);
    assertArgument(typeof r2 === "number" && r2 > 0 && Number.isSafeInteger(r2), "invalid scrypt r parameter", "options.r", r2);
    assertArgument(typeof p2 === "number" && p2 > 0 && Number.isSafeInteger(p2), "invalid scrypt p parameter", "options.p", p2);
    return { name: "scrypt", dkLen: 32, salt, N: N2, r: r2, p: p2 };
  }
  function _encryptKeystore(key, kdf, account, options) {
    const privateKey = getBytes(account.privateKey, "privateKey");
    const iv = options.iv != null ? getBytes(options.iv, "options.iv") : randomBytes(16);
    assertArgument(iv.length === 16, "invalid options.iv length", "options.iv", options.iv);
    const uuidRandom = options.uuid != null ? getBytes(options.uuid, "options.uuid") : randomBytes(16);
    assertArgument(uuidRandom.length === 16, "invalid options.uuid length", "options.uuid", options.iv);
    const derivedKey = key.slice(0, 16);
    const macPrefix = key.slice(16, 32);
    const aesCtr = new CTR(derivedKey, iv);
    const ciphertext = getBytes(aesCtr.encrypt(privateKey));
    const mac = keccak256(concat([macPrefix, ciphertext]));
    const data = {
      address: account.address.substring(2).toLowerCase(),
      id: uuidV4(uuidRandom),
      version: 3,
      Crypto: {
        cipher: "aes-128-ctr",
        cipherparams: {
          iv: hexlify(iv).substring(2)
        },
        ciphertext: hexlify(ciphertext).substring(2),
        kdf: "scrypt",
        kdfparams: {
          salt: hexlify(kdf.salt).substring(2),
          n: kdf.N,
          dklen: 32,
          p: kdf.p,
          r: kdf.r
        },
        mac: mac.substring(2)
      }
    };
    if (account.mnemonic) {
      const client = options.client != null ? options.client : `ethers/${version}`;
      const path = account.mnemonic.path || defaultPath$1;
      const locale = account.mnemonic.locale || "en";
      const mnemonicKey = key.slice(32, 64);
      const entropy = getBytes(account.mnemonic.entropy, "account.mnemonic.entropy");
      const mnemonicIv = randomBytes(16);
      const mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);
      const mnemonicCiphertext = getBytes(mnemonicAesCtr.encrypt(entropy));
      const now = new Date();
      const timestamp = now.getUTCFullYear() + "-" + zpad$1(now.getUTCMonth() + 1, 2) + "-" + zpad$1(now.getUTCDate(), 2) + "T" + zpad$1(now.getUTCHours(), 2) + "-" + zpad$1(now.getUTCMinutes(), 2) + "-" + zpad$1(now.getUTCSeconds(), 2) + ".0Z";
      const gethFilename = "UTC--" + timestamp + "--" + data.address;
      data["x-ethers"] = {
        client,
        gethFilename,
        path,
        locale,
        mnemonicCounter: hexlify(mnemonicIv).substring(2),
        mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),
        version: "0.1"
      };
    }
    return JSON.stringify(data);
  }
  function encryptKeystoreJsonSync(account, password, options) {
    if (options == null) {
      options = {};
    }
    const passwordBytes = getPassword(password);
    const kdf = getEncryptKdfParams(options);
    const key = scryptSync(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64);
    return _encryptKeystore(getBytes(key), kdf, account, options);
  }
  async function encryptKeystoreJson(account, password, options) {
    if (options == null) {
      options = {};
    }
    const passwordBytes = getPassword(password);
    const kdf = getEncryptKdfParams(options);
    const key = await scrypt(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64, options.progressCallback);
    return _encryptKeystore(getBytes(key), kdf, account, options);
  }
  const defaultPath = "m/44'/60'/0'/0/0";
  const MasterSecret = new Uint8Array([66, 105, 116, 99, 111, 105, 110, 32, 115, 101, 101, 100]);
  const HardenedBit = 2147483648;
  const N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
  const Nibbles = "0123456789abcdef";
  function zpad(value, length) {
    let result = "";
    while (value) {
      result = Nibbles[value % 16] + result;
      value = Math.trunc(value / 16);
    }
    while (result.length < length * 2) {
      result = "0" + result;
    }
    return "0x" + result;
  }
  function encodeBase58Check(_value2) {
    const value = getBytes(_value2);
    const check = dataSlice(sha256$1(sha256$1(value)), 0, 4);
    const bytes2 = concat([value, check]);
    return encodeBase58(bytes2);
  }
  const _guard = {};
  function ser_I(index, chainCode, publicKey, privateKey) {
    const data = new Uint8Array(37);
    if (index & HardenedBit) {
      assert$1(privateKey != null, "cannot derive child of neutered node", "UNSUPPORTED_OPERATION", {
        operation: "deriveChild"
      });
      data.set(getBytes(privateKey), 1);
    } else {
      data.set(getBytes(publicKey));
    }
    for (let i2 = 24; i2 >= 0; i2 -= 8) {
      data[33 + (i2 >> 3)] = index >> 24 - i2 & 255;
    }
    const I2 = getBytes(computeHmac("sha512", chainCode, data));
    return { IL: I2.slice(0, 32), IR: I2.slice(32) };
  }
  function derivePath(node, path) {
    const components = path.split("/");
    assertArgument(components.length > 0 && (components[0] === "m" || node.depth > 0), "invalid path", "path", path);
    if (components[0] === "m") {
      components.shift();
    }
    let result = node;
    for (let i2 = 0; i2 < components.length; i2++) {
      const component = components[i2];
      if (component.match(/^[0-9]+'$/)) {
        const index = parseInt(component.substring(0, component.length - 1));
        assertArgument(index < HardenedBit, "invalid path index", `path[${i2}]`, component);
        result = result.deriveChild(HardenedBit + index);
      } else if (component.match(/^[0-9]+$/)) {
        const index = parseInt(component);
        assertArgument(index < HardenedBit, "invalid path index", `path[${i2}]`, component);
        result = result.deriveChild(index);
      } else {
        assertArgument(false, "invalid path component", `path[${i2}]`, component);
      }
    }
    return result;
  }
  const _HDNodeWallet = class extends BaseWallet {
    constructor(guard, signingKey, parentFingerprint, chainCode, path, index, depth, mnemonic, provider) {
      super(signingKey, provider);
      __privateAdd(this, _account);
      assertPrivate(guard, _guard, "HDNodeWallet");
      defineProperties(this, { publicKey: signingKey.compressedPublicKey });
      const fingerprint = dataSlice(ripemd160$1(sha256$1(this.publicKey)), 0, 4);
      defineProperties(this, {
        parentFingerprint,
        fingerprint,
        chainCode,
        path,
        index,
        depth
      });
      defineProperties(this, { mnemonic });
    }
    connect(provider) {
      return new _HDNodeWallet(_guard, this.signingKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.mnemonic, provider);
    }
    async encrypt(password, progressCallback) {
      return await encryptKeystoreJson(__privateMethod(this, _account, account_fn).call(this), password, { progressCallback });
    }
    encryptSync(password) {
      return encryptKeystoreJsonSync(__privateMethod(this, _account, account_fn).call(this), password);
    }
    get extendedKey() {
      assert$1(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", { operation: "extendedKey" });
      return encodeBase58Check(concat([
        "0x0488ADE4",
        zpad(this.depth, 1),
        this.parentFingerprint,
        zpad(this.index, 4),
        this.chainCode,
        concat(["0x00", this.privateKey])
      ]));
    }
    hasPath() {
      return this.path != null;
    }
    neuter() {
      return new HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.provider);
    }
    deriveChild(_index) {
      const index = getNumber(_index, "index");
      assertArgument(index <= 4294967295, "invalid index", "index", index);
      let path = this.path;
      if (path) {
        path += "/" + (index & ~HardenedBit);
        if (index & HardenedBit) {
          path += "'";
        }
      }
      const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, this.privateKey);
      const ki = new SigningKey(toBeHex((toBigInt(IL) + BigInt(this.privateKey)) % N, 32));
      return new _HDNodeWallet(_guard, ki, this.fingerprint, hexlify(IR), path, index, this.depth + 1, this.mnemonic, this.provider);
    }
    derivePath(path) {
      return derivePath(this, path);
    }
    static fromExtendedKey(extendedKey) {
      const bytes2 = toBeArray(decodeBase58(extendedKey));
      assertArgument(bytes2.length === 82 || encodeBase58Check(bytes2.slice(0, 78)) === extendedKey, "invalid extended key", "extendedKey", "[ REDACTED ]");
      const depth = bytes2[4];
      const parentFingerprint = hexlify(bytes2.slice(5, 9));
      const index = parseInt(hexlify(bytes2.slice(9, 13)).substring(2), 16);
      const chainCode = hexlify(bytes2.slice(13, 45));
      const key = bytes2.slice(45, 78);
      switch (hexlify(bytes2.slice(0, 4))) {
        case "0x0488b21e":
        case "0x043587cf": {
          const publicKey = hexlify(key);
          return new HDNodeVoidWallet(_guard, computeAddress(publicKey), publicKey, parentFingerprint, chainCode, null, index, depth, null);
        }
        case "0x0488ade4":
        case "0x04358394 ":
          if (key[0] !== 0) {
            break;
          }
          return new _HDNodeWallet(_guard, new SigningKey(key.slice(1)), parentFingerprint, chainCode, null, index, depth, null, null);
      }
      assertArgument(false, "invalid extended key prefix", "extendedKey", "[ REDACTED ]");
    }
    static createRandom(password, path, wordlist2) {
      var _a;
      if (password == null) {
        password = "";
      }
      if (path == null) {
        path = defaultPath;
      }
      if (wordlist2 == null) {
        wordlist2 = LangEn.wordlist();
      }
      const mnemonic = Mnemonic.fromEntropy(randomBytes(16), password, wordlist2);
      return __privateMethod(_a = _HDNodeWallet, _fromSeed, fromSeed_fn).call(_a, mnemonic.computeSeed(), mnemonic).derivePath(path);
    }
    static fromMnemonic(mnemonic, path) {
      var _a;
      if (!path) {
        path = defaultPath;
      }
      return __privateMethod(_a = _HDNodeWallet, _fromSeed, fromSeed_fn).call(_a, mnemonic.computeSeed(), mnemonic).derivePath(path);
    }
    static fromPhrase(phrase, password, path, wordlist2) {
      var _a;
      if (password == null) {
        password = "";
      }
      if (path == null) {
        path = defaultPath;
      }
      if (wordlist2 == null) {
        wordlist2 = LangEn.wordlist();
      }
      const mnemonic = Mnemonic.fromPhrase(phrase, password, wordlist2);
      return __privateMethod(_a = _HDNodeWallet, _fromSeed, fromSeed_fn).call(_a, mnemonic.computeSeed(), mnemonic).derivePath(path);
    }
    static fromSeed(seed) {
      var _a;
      return __privateMethod(_a = _HDNodeWallet, _fromSeed, fromSeed_fn).call(_a, seed, null);
    }
  };
  let HDNodeWallet = _HDNodeWallet;
  _account = new WeakSet();
  account_fn = function() {
    const account = { address: this.address, privateKey: this.privateKey };
    const m2 = this.mnemonic;
    if (this.path && m2 && m2.wordlist.locale === "en" && m2.password === "") {
      account.mnemonic = {
        path: this.path,
        locale: "en",
        entropy: m2.entropy
      };
    }
    return account;
  };
  _fromSeed = new WeakSet();
  fromSeed_fn = function(_seed, mnemonic) {
    assertArgument(isBytesLike(_seed), "invalid seed", "seed", "[REDACTED]");
    const seed = getBytes(_seed, "seed");
    assertArgument(seed.length >= 16 && seed.length <= 64, "invalid seed", "seed", "[REDACTED]");
    const I2 = getBytes(computeHmac("sha512", MasterSecret, seed));
    const signingKey = new SigningKey(hexlify(I2.slice(0, 32)));
    return new _HDNodeWallet(_guard, signingKey, "0x00000000", hexlify(I2.slice(32)), "m", 0, 0, mnemonic, null);
  };
  __privateAdd(HDNodeWallet, _fromSeed);
  class HDNodeVoidWallet extends VoidSigner {
    constructor(guard, address, publicKey, parentFingerprint, chainCode, path, index, depth, provider) {
      super(address, provider);
      assertPrivate(guard, _guard, "HDNodeVoidWallet");
      defineProperties(this, { publicKey });
      const fingerprint = dataSlice(ripemd160$1(sha256$1(publicKey)), 0, 4);
      defineProperties(this, {
        publicKey,
        fingerprint,
        parentFingerprint,
        chainCode,
        path,
        index,
        depth
      });
    }
    connect(provider) {
      return new HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, provider);
    }
    get extendedKey() {
      assert$1(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", { operation: "extendedKey" });
      return encodeBase58Check(concat([
        "0x0488B21E",
        zpad(this.depth, 1),
        this.parentFingerprint,
        zpad(this.index, 4),
        this.chainCode,
        this.publicKey
      ]));
    }
    hasPath() {
      return this.path != null;
    }
    deriveChild(_index) {
      const index = getNumber(_index, "index");
      assertArgument(index <= 4294967295, "invalid index", "index", index);
      let path = this.path;
      if (path) {
        path += "/" + (index & ~HardenedBit);
        if (index & HardenedBit) {
          path += "'";
        }
      }
      const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, null);
      const Ki = SigningKey.addPoints(IL, this.publicKey, true);
      const address = computeAddress(Ki);
      return new HDNodeVoidWallet(_guard, address, Ki, this.fingerprint, hexlify(IR), path, index, this.depth + 1, this.provider);
    }
    derivePath(path) {
      return derivePath(this, path);
    }
  }
  function isCrowdsaleJson(json) {
    try {
      const data = JSON.parse(json);
      if (data.encseed) {
        return true;
      }
    } catch (error) {
    }
    return false;
  }
  function decryptCrowdsaleJson(json, _password) {
    const data = JSON.parse(json);
    const password = getPassword(_password);
    const address = getAddress(spelunk(data, "ethaddr:string!"));
    const encseed = looseArrayify(spelunk(data, "encseed:string!"));
    assertArgument(encseed && encseed.length % 16 === 0, "invalid encseed", "json", json);
    const key = getBytes(pbkdf2$1(password, password, 2e3, 32, "sha256")).slice(0, 16);
    const iv = encseed.slice(0, 16);
    const encryptedSeed = encseed.slice(16);
    const aesCbc = new CBC(key, iv);
    const seed = pkcs7Strip(getBytes(aesCbc.decrypt(encryptedSeed)));
    let seedHex = "";
    for (let i2 = 0; i2 < seed.length; i2++) {
      seedHex += String.fromCharCode(seed[i2]);
    }
    return { address, privateKey: id(seedHex) };
  }
  function stall(duration) {
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve();
      }, duration);
    });
  }
  const _Wallet = class extends BaseWallet {
    constructor(key, provider) {
      let signingKey = typeof key === "string" ? new SigningKey(key) : key;
      super(signingKey, provider);
    }
    connect(provider) {
      return new _Wallet(this.signingKey, provider);
    }
    async encrypt(password, progressCallback) {
      const account = { address: this.address, privateKey: this.privateKey };
      return await encryptKeystoreJson(account, password, { progressCallback });
    }
    encryptSync(password) {
      const account = { address: this.address, privateKey: this.privateKey };
      return encryptKeystoreJsonSync(account, password);
    }
    static async fromEncryptedJson(json, password, progress) {
      var _a;
      let account = null;
      if (isKeystoreJson(json)) {
        account = await decryptKeystoreJson(json, password, progress);
      } else if (isCrowdsaleJson(json)) {
        if (progress) {
          progress(0);
          await stall(0);
        }
        account = decryptCrowdsaleJson(json, password);
        if (progress) {
          progress(1);
          await stall(0);
        }
      }
      return __privateMethod(_a = _Wallet, _fromAccount, fromAccount_fn).call(_a, account);
    }
    static fromEncryptedJsonSync(json, password) {
      var _a;
      let account = null;
      if (isKeystoreJson(json)) {
        account = decryptKeystoreJsonSync(json, password);
      } else if (isCrowdsaleJson(json)) {
        account = decryptCrowdsaleJson(json, password);
      } else {
        assertArgument(false, "invalid JSON wallet", "json", "[ REDACTED ]");
      }
      return __privateMethod(_a = _Wallet, _fromAccount, fromAccount_fn).call(_a, account);
    }
    static createRandom(provider) {
      const wallet = HDNodeWallet.createRandom();
      if (provider) {
        return wallet.connect(provider);
      }
      return wallet;
    }
    static fromPhrase(phrase, provider) {
      const wallet = HDNodeWallet.fromPhrase(phrase);
      if (provider) {
        return wallet.connect(provider);
      }
      return wallet;
    }
  };
  let Wallet = _Wallet;
  _fromAccount = new WeakSet();
  fromAccount_fn = function(account) {
    assertArgument(account, "invalid JSON wallet", "json", "[ REDACTED ]");
    if ("mnemonic" in account && account.mnemonic && account.mnemonic.locale === "en") {
      const mnemonic = Mnemonic.fromEntropy(account.mnemonic.entropy);
      const wallet2 = HDNodeWallet.fromMnemonic(mnemonic, account.mnemonic.path);
      if (wallet2.address === account.address && wallet2.privateKey === account.privateKey) {
        return wallet2;
      }
      formatAppLog("log", "at node_modules/ethers/lib.esm/wallet/wallet.js:66", "WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key");
    }
    const wallet = new _Wallet(account.privateKey);
    assertArgument(wallet.address === account.address, "address/privateKey mismatch", "json", "[ REDACTED ]");
    return wallet;
  };
  __privateAdd(Wallet, _fromAccount);
  const WALLET = {
    wallet_list_key: "storage_wallet_list",
    createWallet: function() {
      let wallet = Wallet.createRandom();
      return wallet;
    },
    encryptWallet: async function(private_key, pin_code) {
      const wallet = new Wallet(private_key);
      const keystore_json = await wallet.encrypt(pin_code);
      return keystore_json;
    },
    decryptWallet: async function(keystore_json, pin_code) {
      const wallet = await Wallet.fromEncryptedJson(keystore_json, pin_code);
      return wallet;
    },
    getWalletList: function() {
      try {
        var wallet_list_json = uni.getStorageSync(this.wallet_list_key);
        var wallet_list = JSON.parse(wallet_list_json);
        if (wallet_list) {
          return wallet_list;
        }
        return [];
      } catch (e) {
        return false;
      }
    },
    saveWallet: function(wallet) {
      var wallet_list = this.getWalletList();
      if (!wallet_list) {
        wallet_list = [];
      }
      if (!wallet) {
        return false;
      }
      for (var i2 = 0; i2 < wallet_list.length; i2++) {
        if (wallet_list[i2].address == wallet.address) {
          wallet_list.splice(i2, 1);
          break;
        }
      }
      if (!wallet.name) {
        wallet.name = "My ETH Account" + (wallet_list.length ? wallet_list.length : "");
      }
      wallet_list.push(wallet);
      try {
        uni.setStorageSync(this.wallet_list_key, JSON.stringify(wallet_list));
        formatAppLog("log", "at common/wallet.js:53", "\u5DF2\u5B58\u50A8wallet");
        return true;
      } catch (e) {
        uni.showToast({
          title: "failed to save wallet"
        });
        return false;
      }
    },
    getWallet: function(address) {
      var wallet_list = this.getWalletList();
      if (!wallet_list) {
        return false;
      }
      for (let wallet of wallet_list) {
        if (address == wallet.address) {
          return wallet;
        }
      }
      return false;
    },
    delWallet: function(address) {
      var wallet_list = this.getWalletList();
      if (!wallet_list) {
        return false;
      }
      for (var i2 = 0; i2 < wallet_list.length; i2++) {
        if (wallet_list[i2].address == address) {
          wallet_list.splice(i2, 1);
          uni.setStorageSync(this.wallet_list_key, JSON.stringify(wallet_list));
          break;
        }
      }
      return true;
    },
    setDefaultWallet: function(address) {
      var wallet_list = this.getWalletList();
      var default_wallet = false;
      if (!wallet_list) {
        return false;
      }
      for (let wallet of wallet_list) {
        wallet.is_default_wallet = false;
        if (address == wallet.address) {
          wallet.is_default_wallet = true;
          default_wallet = wallet;
        }
      }
      if (default_wallet) {
        uni.setStorageSync(this.wallet_list_key, JSON.stringify(wallet_list));
        return default_wallet;
      }
      return false;
    },
    getDefaultWallet: function() {
      var wallet_list = this.getWalletList();
      var default_wallet = false;
      if (!wallet_list) {
        return false;
      }
      for (let wallet of wallet_list) {
        if (wallet.is_default_wallet) {
          default_wallet = wallet;
        }
      }
      if (default_wallet) {
        return default_wallet;
      }
      this.setDefaultWallet(wallet_list[0].address);
      return wallet_list[0];
    },
    getPrivateKey: async function(address, pin_code) {
      let wallet = this.getWallet(address);
      if (!wallet) {
        return false;
      }
      let recover_wallet = await this.decryptWallet(JSON.stringify(wallet.keystore), pin_code);
      return recover_wallet;
    }
  };
  var cryptoJs = { exports: {} };
  var lookup = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    62,
    0,
    62,
    0,
    63,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    0,
    0,
    0,
    0,
    63,
    0,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51
  ];
  function base64Decode(source, target) {
    var sourceLength = source.length;
    var paddingLength = source[sourceLength - 2] === "=" ? 2 : source[sourceLength - 1] === "=" ? 1 : 0;
    var tmp;
    var byteIndex = 0;
    var baseLength = sourceLength - paddingLength & 4294967292;
    for (var i2 = 0; i2 < baseLength; i2 += 4) {
      tmp = lookup[source.charCodeAt(i2)] << 18 | lookup[source.charCodeAt(i2 + 1)] << 12 | lookup[source.charCodeAt(i2 + 2)] << 6 | lookup[source.charCodeAt(i2 + 3)];
      target[byteIndex++] = tmp >> 16 & 255;
      target[byteIndex++] = tmp >> 8 & 255;
      target[byteIndex++] = tmp & 255;
    }
    if (paddingLength === 1) {
      tmp = lookup[source.charCodeAt(i2)] << 10 | lookup[source.charCodeAt(i2 + 1)] << 4 | lookup[source.charCodeAt(i2 + 2)] >> 2;
      target[byteIndex++] = tmp >> 8 & 255;
      target[byteIndex++] = tmp & 255;
    }
    if (paddingLength === 2) {
      tmp = lookup[source.charCodeAt(i2)] << 2 | lookup[source.charCodeAt(i2 + 1)] >> 4;
      target[byteIndex++] = tmp & 255;
    }
  }
  const $inject_window_crypto = {
    getRandomValues(arr) {
      if (!(arr instanceof Int8Array || arr instanceof Uint8Array || arr instanceof Int16Array || arr instanceof Uint16Array || arr instanceof Int32Array || arr instanceof Uint32Array || arr instanceof Uint8ClampedArray)) {
        throw new Error("Expected an integer array");
      }
      if (arr.byteLength > 65536) {
        throw new Error("Can only request a maximum of 65536 bytes");
      }
      var crypto2 = requireNativePlugin("DCloud-Crypto");
      base64Decode(crypto2.getRandomValues(arr.byteLength), new Uint8Array(
        arr.buffer,
        arr.byteOffset,
        arr.byteLength
      ));
      return arr;
    }
  };
  function commonjsRequire(path) {
    throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
  }
  var core = { exports: {} };
  const require$$0 = /* @__PURE__ */ getAugmentedNamespace(__viteBrowserExternal$1);
  var hasRequiredCore;
  function requireCore() {
    if (hasRequiredCore)
      return core.exports;
    hasRequiredCore = 1;
    (function(module2, exports2) {
      (function(root2, factory) {
        {
          module2.exports = factory();
        }
      })(commonjsGlobal, function() {
        var CryptoJS2 = CryptoJS2 || function(Math2, undefined$1) {
          var crypto2;
          if (typeof window !== "undefined" && $inject_window_crypto) {
            crypto2 = $inject_window_crypto;
          }
          if (typeof self !== "undefined" && self.crypto) {
            crypto2 = self.crypto;
          }
          if (typeof globalThis !== "undefined" && globalThis.crypto) {
            crypto2 = globalThis.crypto;
          }
          if (!crypto2 && typeof window !== "undefined" && window.msCrypto) {
            crypto2 = window.msCrypto;
          }
          if (!crypto2 && typeof commonjsGlobal !== "undefined" && commonjsGlobal.crypto) {
            crypto2 = commonjsGlobal.crypto;
          }
          if (!crypto2 && typeof commonjsRequire === "function") {
            try {
              crypto2 = require$$0;
            } catch (err) {
            }
          }
          var cryptoSecureRandomInt = function() {
            if (crypto2) {
              if (typeof crypto2.getRandomValues === "function") {
                try {
                  return crypto2.getRandomValues(new Uint32Array(1))[0];
                } catch (err) {
                }
              }
              if (typeof crypto2.randomBytes === "function") {
                try {
                  return crypto2.randomBytes(4).readInt32LE();
                } catch (err) {
                }
              }
            }
            throw new Error("Native crypto module could not be used to get secure random number.");
          };
          var create = Object.create || function() {
            function F2() {
            }
            return function(obj) {
              var subtype;
              F2.prototype = obj;
              subtype = new F2();
              F2.prototype = null;
              return subtype;
            };
          }();
          var C2 = {};
          var C_lib = C2.lib = {};
          var Base = C_lib.Base = function() {
            return {
              extend: function(overrides) {
                var subtype = create(this);
                if (overrides) {
                  subtype.mixIn(overrides);
                }
                if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
                  subtype.init = function() {
                    subtype.$super.init.apply(this, arguments);
                  };
                }
                subtype.init.prototype = subtype;
                subtype.$super = this;
                return subtype;
              },
              create: function() {
                var instance = this.extend();
                instance.init.apply(instance, arguments);
                return instance;
              },
              init: function() {
              },
              mixIn: function(properties) {
                for (var propertyName in properties) {
                  if (properties.hasOwnProperty(propertyName)) {
                    this[propertyName] = properties[propertyName];
                  }
                }
                if (properties.hasOwnProperty("toString")) {
                  this.toString = properties.toString;
                }
              },
              clone: function() {
                return this.init.prototype.extend(this);
              }
            };
          }();
          var WordArray = C_lib.WordArray = Base.extend({
            init: function(words2, sigBytes) {
              words2 = this.words = words2 || [];
              if (sigBytes != undefined$1) {
                this.sigBytes = sigBytes;
              } else {
                this.sigBytes = words2.length * 4;
              }
            },
            toString: function(encoder) {
              return (encoder || Hex).stringify(this);
            },
            concat: function(wordArray) {
              var thisWords = this.words;
              var thatWords = wordArray.words;
              var thisSigBytes = this.sigBytes;
              var thatSigBytes = wordArray.sigBytes;
              this.clamp();
              if (thisSigBytes % 4) {
                for (var i2 = 0; i2 < thatSigBytes; i2++) {
                  var thatByte = thatWords[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
                  thisWords[thisSigBytes + i2 >>> 2] |= thatByte << 24 - (thisSigBytes + i2) % 4 * 8;
                }
              } else {
                for (var j2 = 0; j2 < thatSigBytes; j2 += 4) {
                  thisWords[thisSigBytes + j2 >>> 2] = thatWords[j2 >>> 2];
                }
              }
              this.sigBytes += thatSigBytes;
              return this;
            },
            clamp: function() {
              var words2 = this.words;
              var sigBytes = this.sigBytes;
              words2[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
              words2.length = Math2.ceil(sigBytes / 4);
            },
            clone: function() {
              var clone = Base.clone.call(this);
              clone.words = this.words.slice(0);
              return clone;
            },
            random: function(nBytes) {
              var words2 = [];
              for (var i2 = 0; i2 < nBytes; i2 += 4) {
                words2.push(cryptoSecureRandomInt());
              }
              return new WordArray.init(words2, nBytes);
            }
          });
          var C_enc = C2.enc = {};
          var Hex = C_enc.Hex = {
            stringify: function(wordArray) {
              var words2 = wordArray.words;
              var sigBytes = wordArray.sigBytes;
              var hexChars = [];
              for (var i2 = 0; i2 < sigBytes; i2++) {
                var bite = words2[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
                hexChars.push((bite >>> 4).toString(16));
                hexChars.push((bite & 15).toString(16));
              }
              return hexChars.join("");
            },
            parse: function(hexStr) {
              var hexStrLength = hexStr.length;
              var words2 = [];
              for (var i2 = 0; i2 < hexStrLength; i2 += 2) {
                words2[i2 >>> 3] |= parseInt(hexStr.substr(i2, 2), 16) << 24 - i2 % 8 * 4;
              }
              return new WordArray.init(words2, hexStrLength / 2);
            }
          };
          var Latin1 = C_enc.Latin1 = {
            stringify: function(wordArray) {
              var words2 = wordArray.words;
              var sigBytes = wordArray.sigBytes;
              var latin1Chars = [];
              for (var i2 = 0; i2 < sigBytes; i2++) {
                var bite = words2[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
                latin1Chars.push(String.fromCharCode(bite));
              }
              return latin1Chars.join("");
            },
            parse: function(latin1Str) {
              var latin1StrLength = latin1Str.length;
              var words2 = [];
              for (var i2 = 0; i2 < latin1StrLength; i2++) {
                words2[i2 >>> 2] |= (latin1Str.charCodeAt(i2) & 255) << 24 - i2 % 4 * 8;
              }
              return new WordArray.init(words2, latin1StrLength);
            }
          };
          var Utf8 = C_enc.Utf8 = {
            stringify: function(wordArray) {
              try {
                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
              } catch (e) {
                throw new Error("Malformed UTF-8 data");
              }
            },
            parse: function(utf8Str) {
              return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
            }
          };
          var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
            reset: function() {
              this._data = new WordArray.init();
              this._nDataBytes = 0;
            },
            _append: function(data) {
              if (typeof data == "string") {
                data = Utf8.parse(data);
              }
              this._data.concat(data);
              this._nDataBytes += data.sigBytes;
            },
            _process: function(doFlush) {
              var processedWords;
              var data = this._data;
              var dataWords = data.words;
              var dataSigBytes = data.sigBytes;
              var blockSize = this.blockSize;
              var blockSizeBytes = blockSize * 4;
              var nBlocksReady = dataSigBytes / blockSizeBytes;
              if (doFlush) {
                nBlocksReady = Math2.ceil(nBlocksReady);
              } else {
                nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
              }
              var nWordsReady = nBlocksReady * blockSize;
              var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
              if (nWordsReady) {
                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                  this._doProcessBlock(dataWords, offset);
                }
                processedWords = dataWords.splice(0, nWordsReady);
                data.sigBytes -= nBytesReady;
              }
              return new WordArray.init(processedWords, nBytesReady);
            },
            clone: function() {
              var clone = Base.clone.call(this);
              clone._data = this._data.clone();
              return clone;
            },
            _minBufferSize: 0
          });
          C_lib.Hasher = BufferedBlockAlgorithm.extend({
            cfg: Base.extend(),
            init: function(cfg) {
              this.cfg = this.cfg.extend(cfg);
              this.reset();
            },
            reset: function() {
              BufferedBlockAlgorithm.reset.call(this);
              this._doReset();
            },
            update: function(messageUpdate) {
              this._append(messageUpdate);
              this._process();
              return this;
            },
            finalize: function(messageUpdate) {
              if (messageUpdate) {
                this._append(messageUpdate);
              }
              var hash2 = this._doFinalize();
              return hash2;
            },
            blockSize: 512 / 32,
            _createHelper: function(hasher) {
              return function(message, cfg) {
                return new hasher.init(cfg).finalize(message);
              };
            },
            _createHmacHelper: function(hasher) {
              return function(message, key) {
                return new C_algo.HMAC.init(hasher, key).finalize(message);
              };
            }
          });
          var C_algo = C2.algo = {};
          return C2;
        }(Math);
        return CryptoJS2;
      });
    })(core);
    return core.exports;
  }
  var x64Core = { exports: {} };
  var hasRequiredX64Core;
  function requireX64Core() {
    if (hasRequiredX64Core)
      return x64Core.exports;
    hasRequiredX64Core = 1;
    (function(module2, exports2) {
      (function(root2, factory) {
        {
          module2.exports = factory(requireCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function(undefined$1) {
          var C2 = CryptoJS2;
          var C_lib = C2.lib;
          var Base = C_lib.Base;
          var X32WordArray = C_lib.WordArray;
          var C_x64 = C2.x64 = {};
          C_x64.Word = Base.extend({
            init: function(high, low) {
              this.high = high;
              this.low = low;
            }
          });
          C_x64.WordArray = Base.extend({
            init: function(words2, sigBytes) {
              words2 = this.words = words2 || [];
              if (sigBytes != undefined$1) {
                this.sigBytes = sigBytes;
              } else {
                this.sigBytes = words2.length * 8;
              }
            },
            toX32: function() {
              var x64Words = this.words;
              var x64WordsLength = x64Words.length;
              var x32Words = [];
              for (var i2 = 0; i2 < x64WordsLength; i2++) {
                var x64Word = x64Words[i2];
                x32Words.push(x64Word.high);
                x32Words.push(x64Word.low);
              }
              return X32WordArray.create(x32Words, this.sigBytes);
            },
            clone: function() {
              var clone = Base.clone.call(this);
              var words2 = clone.words = this.words.slice(0);
              var wordsLength = words2.length;
              for (var i2 = 0; i2 < wordsLength; i2++) {
                words2[i2] = words2[i2].clone();
              }
              return clone;
            }
          });
        })();
        return CryptoJS2;
      });
    })(x64Core);
    return x64Core.exports;
  }
  var libTypedarrays = { exports: {} };
  var hasRequiredLibTypedarrays;
  function requireLibTypedarrays() {
    if (hasRequiredLibTypedarrays)
      return libTypedarrays.exports;
    hasRequiredLibTypedarrays = 1;
    (function(module2, exports2) {
      (function(root2, factory) {
        {
          module2.exports = factory(requireCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function() {
          if (typeof ArrayBuffer != "function") {
            return;
          }
          var C2 = CryptoJS2;
          var C_lib = C2.lib;
          var WordArray = C_lib.WordArray;
          var superInit = WordArray.init;
          var subInit = WordArray.init = function(typedArray) {
            if (typedArray instanceof ArrayBuffer) {
              typedArray = new Uint8Array(typedArray);
            }
            if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {
              typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
            }
            if (typedArray instanceof Uint8Array) {
              var typedArrayByteLength = typedArray.byteLength;
              var words2 = [];
              for (var i2 = 0; i2 < typedArrayByteLength; i2++) {
                words2[i2 >>> 2] |= typedArray[i2] << 24 - i2 % 4 * 8;
              }
              superInit.call(this, words2, typedArrayByteLength);
            } else {
              superInit.apply(this, arguments);
            }
          };
          subInit.prototype = WordArray;
        })();
        return CryptoJS2.lib.WordArray;
      });
    })(libTypedarrays);
    return libTypedarrays.exports;
  }
  var encUtf16 = { exports: {} };
  var hasRequiredEncUtf16;
  function requireEncUtf16() {
    if (hasRequiredEncUtf16)
      return encUtf16.exports;
    hasRequiredEncUtf16 = 1;
    (function(module2, exports2) {
      (function(root2, factory) {
        {
          module2.exports = factory(requireCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function() {
          var C2 = CryptoJS2;
          var C_lib = C2.lib;
          var WordArray = C_lib.WordArray;
          var C_enc = C2.enc;
          C_enc.Utf16 = C_enc.Utf16BE = {
            stringify: function(wordArray) {
              var words2 = wordArray.words;
              var sigBytes = wordArray.sigBytes;
              var utf16Chars = [];
              for (var i2 = 0; i2 < sigBytes; i2 += 2) {
                var codePoint = words2[i2 >>> 2] >>> 16 - i2 % 4 * 8 & 65535;
                utf16Chars.push(String.fromCharCode(codePoint));
              }
              return utf16Chars.join("");
            },
            parse: function(utf16Str) {
              var utf16StrLength = utf16Str.length;
              var words2 = [];
              for (var i2 = 0; i2 < utf16StrLength; i2++) {
                words2[i2 >>> 1] |= utf16Str.charCodeAt(i2) << 16 - i2 % 2 * 16;
              }
              return WordArray.create(words2, utf16StrLength * 2);
            }
          };
          C_enc.Utf16LE = {
            stringify: function(wordArray) {
              var words2 = wordArray.words;
              var sigBytes = wordArray.sigBytes;
              var utf16Chars = [];
              for (var i2 = 0; i2 < sigBytes; i2 += 2) {
                var codePoint = swapEndian(words2[i2 >>> 2] >>> 16 - i2 % 4 * 8 & 65535);
                utf16Chars.push(String.fromCharCode(codePoint));
              }
              return utf16Chars.join("");
            },
            parse: function(utf16Str) {
              var utf16StrLength = utf16Str.length;
              var words2 = [];
              for (var i2 = 0; i2 < utf16StrLength; i2++) {
                words2[i2 >>> 1] |= swapEndian(utf16Str.charCodeAt(i2) << 16 - i2 % 2 * 16);
              }
              return WordArray.create(words2, utf16StrLength * 2);
            }
          };
          function swapEndian(word) {
            return word << 8 & 4278255360 | word >>> 8 & 16711935;
          }
        })();
        return CryptoJS2.enc.Utf16;
      });
    })(encUtf16);
    return encUtf16.exports;
  }
  var encBase64 = { exports: {} };
  var hasRequiredEncBase64;
  function requireEncBase64() {
    if (hasRequiredEncBase64)
      return encBase64.exports;
    hasRequiredEncBase64 = 1;
    (function(module2, exports2) {
      (function(root2, factory) {
        {
          module2.exports = factory(requireCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function() {
          var C2 = CryptoJS2;
          var C_lib = C2.lib;
          var WordArray = C_lib.WordArray;
          var C_enc = C2.enc;
          C_enc.Base64 = {
            stringify: function(wordArray) {
              var words2 = wordArray.words;
              var sigBytes = wordArray.sigBytes;
              var map = this._map;
              wordArray.clamp();
              var base64Chars = [];
              for (var i2 = 0; i2 < sigBytes; i2 += 3) {
                var byte1 = words2[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
                var byte2 = words2[i2 + 1 >>> 2] >>> 24 - (i2 + 1) % 4 * 8 & 255;
                var byte3 = words2[i2 + 2 >>> 2] >>> 24 - (i2 + 2) % 4 * 8 & 255;
                var triplet = byte1 << 16 | byte2 << 8 | byte3;
                for (var j2 = 0; j2 < 4 && i2 + j2 * 0.75 < sigBytes; j2++) {
                  base64Chars.push(map.charAt(triplet >>> 6 * (3 - j2) & 63));
                }
              }
              var paddingChar = map.charAt(64);
              if (paddingChar) {
                while (base64Chars.length % 4) {
                  base64Chars.push(paddingChar);
                }
              }
              return base64Chars.join("");
            },
            parse: function(base64Str) {
              var base64StrLength = base64Str.length;
              var map = this._map;
              var reverseMap = this._reverseMap;
              if (!reverseMap) {
                reverseMap = this._reverseMap = [];
                for (var j2 = 0; j2 < map.length; j2++) {
                  reverseMap[map.charCodeAt(j2)] = j2;
                }
              }
              var paddingChar = map.charAt(64);
              if (paddingChar) {
                var paddingIndex = base64Str.indexOf(paddingChar);
                if (paddingIndex !== -1) {
                  base64StrLength = paddingIndex;
                }
              }
              return parseLoop(base64Str, base64StrLength, reverseMap);
            },
            _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
          };
          function parseLoop(base64Str, base64StrLength, reverseMap) {
            var words2 = [];
            var nBytes = 0;
            for (var i2 = 0; i2 < base64StrLength; i2++) {
              if (i2 % 4) {
                var bits1 = reverseMap[base64Str.charCodeAt(i2 - 1)] << i2 % 4 * 2;
                var bits2 = reverseMap[base64Str.charCodeAt(i2)] >>> 6 - i2 % 4 * 2;
                var bitsCombined = bits1 | bits2;
                words2[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
                nBytes++;
              }
            }
            return WordArray.create(words2, nBytes);
          }
        })();
        return CryptoJS2.enc.Base64;
      });
    })(encBase64);
    return encBase64.exports;
  }
  var encBase64url = { exports: {} };
  var hasRequiredEncBase64url;
  function requireEncBase64url() {
    if (hasRequiredEncBase64url)
      return encBase64url.exports;
    hasRequiredEncBase64url = 1;
    (function(module2, exports2) {
      (function(root2, factory) {
        {
          module2.exports = factory(requireCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function() {
          var C2 = CryptoJS2;
          var C_lib = C2.lib;
          var WordArray = C_lib.WordArray;
          var C_enc = C2.enc;
          C_enc.Base64url = {
            stringify: function(wordArray, urlSafe = true) {
              var words2 = wordArray.words;
              var sigBytes = wordArray.sigBytes;
              var map = urlSafe ? this._safe_map : this._map;
              wordArray.clamp();
              var base64Chars = [];
              for (var i2 = 0; i2 < sigBytes; i2 += 3) {
                var byte1 = words2[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
                var byte2 = words2[i2 + 1 >>> 2] >>> 24 - (i2 + 1) % 4 * 8 & 255;
                var byte3 = words2[i2 + 2 >>> 2] >>> 24 - (i2 + 2) % 4 * 8 & 255;
                var triplet = byte1 << 16 | byte2 << 8 | byte3;
                for (var j2 = 0; j2 < 4 && i2 + j2 * 0.75 < sigBytes; j2++) {
                  base64Chars.push(map.charAt(triplet >>> 6 * (3 - j2) & 63));
                }
              }
              var paddingChar = map.charAt(64);
              if (paddingChar) {
                while (base64Chars.length % 4) {
                  base64Chars.push(paddingChar);
                }
              }
              return base64Chars.join("");
            },
            parse: function(base64Str, urlSafe = true) {
              var base64StrLength = base64Str.length;
              var map = urlSafe ? this._safe_map : this._map;
              var reverseMap = this._reverseMap;
              if (!reverseMap) {
                reverseMap = this._reverseMap = [];
                for (var j2 = 0; j2 < map.length; j2++) {
                  reverseMap[map.charCodeAt(j2)] = j2;
                }
              }
              var paddingChar = map.charAt(64);
              if (paddingChar) {
                var paddingIndex = base64Str.indexOf(paddingChar);
                if (paddingIndex !== -1) {
                  base64StrLength = paddingIndex;
                }
              }
              return parseLoop(base64Str, base64StrLength, reverseMap);
            },
            _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
            _safe_map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"
          };
          function parseLoop(base64Str, base64StrLength, reverseMap) {
            var words2 = [];
            var nBytes = 0;
            for (var i2 = 0; i2 < base64StrLength; i2++) {
              if (i2 % 4) {
                var bits1 = reverseMap[base64Str.charCodeAt(i2 - 1)] << i2 % 4 * 2;
                var bits2 = reverseMap[base64Str.charCodeAt(i2)] >>> 6 - i2 % 4 * 2;
                var bitsCombined = bits1 | bits2;
                words2[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
                nBytes++;
              }
            }
            return WordArray.create(words2, nBytes);
          }
        })();
        return CryptoJS2.enc.Base64url;
      });
    })(encBase64url);
    return encBase64url.exports;
  }
  var md5 = { exports: {} };
  var hasRequiredMd5;
  function requireMd5() {
    if (hasRequiredMd5)
      return md5.exports;
    hasRequiredMd5 = 1;
    (function(module2, exports2) {
      (function(root2, factory) {
        {
          module2.exports = factory(requireCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function(Math2) {
          var C2 = CryptoJS2;
          var C_lib = C2.lib;
          var WordArray = C_lib.WordArray;
          var Hasher = C_lib.Hasher;
          var C_algo = C2.algo;
          var T9 = [];
          (function() {
            for (var i2 = 0; i2 < 64; i2++) {
              T9[i2] = Math2.abs(Math2.sin(i2 + 1)) * 4294967296 | 0;
            }
          })();
          var MD5 = C_algo.MD5 = Hasher.extend({
            _doReset: function() {
              this._hash = new WordArray.init([
                1732584193,
                4023233417,
                2562383102,
                271733878
              ]);
            },
            _doProcessBlock: function(M2, offset) {
              for (var i2 = 0; i2 < 16; i2++) {
                var offset_i = offset + i2;
                var M_offset_i = M2[offset_i];
                M2[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
              }
              var H2 = this._hash.words;
              var M_offset_0 = M2[offset + 0];
              var M_offset_1 = M2[offset + 1];
              var M_offset_2 = M2[offset + 2];
              var M_offset_3 = M2[offset + 3];
              var M_offset_4 = M2[offset + 4];
              var M_offset_5 = M2[offset + 5];
              var M_offset_6 = M2[offset + 6];
              var M_offset_7 = M2[offset + 7];
              var M_offset_8 = M2[offset + 8];
              var M_offset_9 = M2[offset + 9];
              var M_offset_10 = M2[offset + 10];
              var M_offset_11 = M2[offset + 11];
              var M_offset_12 = M2[offset + 12];
              var M_offset_13 = M2[offset + 13];
              var M_offset_14 = M2[offset + 14];
              var M_offset_15 = M2[offset + 15];
              var a2 = H2[0];
              var b2 = H2[1];
              var c2 = H2[2];
              var d2 = H2[3];
              a2 = FF(a2, b2, c2, d2, M_offset_0, 7, T9[0]);
              d2 = FF(d2, a2, b2, c2, M_offset_1, 12, T9[1]);
              c2 = FF(c2, d2, a2, b2, M_offset_2, 17, T9[2]);
              b2 = FF(b2, c2, d2, a2, M_offset_3, 22, T9[3]);
              a2 = FF(a2, b2, c2, d2, M_offset_4, 7, T9[4]);
              d2 = FF(d2, a2, b2, c2, M_offset_5, 12, T9[5]);
              c2 = FF(c2, d2, a2, b2, M_offset_6, 17, T9[6]);
              b2 = FF(b2, c2, d2, a2, M_offset_7, 22, T9[7]);
              a2 = FF(a2, b2, c2, d2, M_offset_8, 7, T9[8]);
              d2 = FF(d2, a2, b2, c2, M_offset_9, 12, T9[9]);
              c2 = FF(c2, d2, a2, b2, M_offset_10, 17, T9[10]);
              b2 = FF(b2, c2, d2, a2, M_offset_11, 22, T9[11]);
              a2 = FF(a2, b2, c2, d2, M_offset_12, 7, T9[12]);
              d2 = FF(d2, a2, b2, c2, M_offset_13, 12, T9[13]);
              c2 = FF(c2, d2, a2, b2, M_offset_14, 17, T9[14]);
              b2 = FF(b2, c2, d2, a2, M_offset_15, 22, T9[15]);
              a2 = GG(a2, b2, c2, d2, M_offset_1, 5, T9[16]);
              d2 = GG(d2, a2, b2, c2, M_offset_6, 9, T9[17]);
              c2 = GG(c2, d2, a2, b2, M_offset_11, 14, T9[18]);
              b2 = GG(b2, c2, d2, a2, M_offset_0, 20, T9[19]);
              a2 = GG(a2, b2, c2, d2, M_offset_5, 5, T9[20]);
              d2 = GG(d2, a2, b2, c2, M_offset_10, 9, T9[21]);
              c2 = GG(c2, d2, a2, b2, M_offset_15, 14, T9[22]);
              b2 = GG(b2, c2, d2, a2, M_offset_4, 20, T9[23]);
              a2 = GG(a2, b2, c2, d2, M_offset_9, 5, T9[24]);
              d2 = GG(d2, a2, b2, c2, M_offset_14, 9, T9[25]);
              c2 = GG(c2, d2, a2, b2, M_offset_3, 14, T9[26]);
              b2 = GG(b2, c2, d2, a2, M_offset_8, 20, T9[27]);
              a2 = GG(a2, b2, c2, d2, M_offset_13, 5, T9[28]);
              d2 = GG(d2, a2, b2, c2, M_offset_2, 9, T9[29]);
              c2 = GG(c2, d2, a2, b2, M_offset_7, 14, T9[30]);
              b2 = GG(b2, c2, d2, a2, M_offset_12, 20, T9[31]);
              a2 = HH(a2, b2, c2, d2, M_offset_5, 4, T9[32]);
              d2 = HH(d2, a2, b2, c2, M_offset_8, 11, T9[33]);
              c2 = HH(c2, d2, a2, b2, M_offset_11, 16, T9[34]);
              b2 = HH(b2, c2, d2, a2, M_offset_14, 23, T9[35]);
              a2 = HH(a2, b2, c2, d2, M_offset_1, 4, T9[36]);
              d2 = HH(d2, a2, b2, c2, M_offset_4, 11, T9[37]);
              c2 = HH(c2, d2, a2, b2, M_offset_7, 16, T9[38]);
              b2 = HH(b2, c2, d2, a2, M_offset_10, 23, T9[39]);
              a2 = HH(a2, b2, c2, d2, M_offset_13, 4, T9[40]);
              d2 = HH(d2, a2, b2, c2, M_offset_0, 11, T9[41]);
              c2 = HH(c2, d2, a2, b2, M_offset_3, 16, T9[42]);
              b2 = HH(b2, c2, d2, a2, M_offset_6, 23, T9[43]);
              a2 = HH(a2, b2, c2, d2, M_offset_9, 4, T9[44]);
              d2 = HH(d2, a2, b2, c2, M_offset_12, 11, T9[45]);
              c2 = HH(c2, d2, a2, b2, M_offset_15, 16, T9[46]);
              b2 = HH(b2, c2, d2, a2, M_offset_2, 23, T9[47]);
              a2 = II(a2, b2, c2, d2, M_offset_0, 6, T9[48]);
              d2 = II(d2, a2, b2, c2, M_offset_7, 10, T9[49]);
              c2 = II(c2, d2, a2, b2, M_offset_14, 15, T9[50]);
              b2 = II(b2, c2, d2, a2, M_offset_5, 21, T9[51]);
              a2 = II(a2, b2, c2, d2, M_offset_12, 6, T9[52]);
              d2 = II(d2, a2, b2, c2, M_offset_3, 10, T9[53]);
              c2 = II(c2, d2, a2, b2, M_offset_10, 15, T9[54]);
              b2 = II(b2, c2, d2, a2, M_offset_1, 21, T9[55]);
              a2 = II(a2, b2, c2, d2, M_offset_8, 6, T9[56]);
              d2 = II(d2, a2, b2, c2, M_offset_15, 10, T9[57]);
              c2 = II(c2, d2, a2, b2, M_offset_6, 15, T9[58]);
              b2 = II(b2, c2, d2, a2, M_offset_13, 21, T9[59]);
              a2 = II(a2, b2, c2, d2, M_offset_4, 6, T9[60]);
              d2 = II(d2, a2, b2, c2, M_offset_11, 10, T9[61]);
              c2 = II(c2, d2, a2, b2, M_offset_2, 15, T9[62]);
              b2 = II(b2, c2, d2, a2, M_offset_9, 21, T9[63]);
              H2[0] = H2[0] + a2 | 0;
              H2[1] = H2[1] + b2 | 0;
              H2[2] = H2[2] + c2 | 0;
              H2[3] = H2[3] + d2 | 0;
            },
            _doFinalize: function() {
              var data = this._data;
              var dataWords = data.words;
              var nBitsTotal = this._nDataBytes * 8;
              var nBitsLeft = data.sigBytes * 8;
              dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
              var nBitsTotalH = Math2.floor(nBitsTotal / 4294967296);
              var nBitsTotalL = nBitsTotal;
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 16711935 | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 4278255360;
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 16711935 | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 4278255360;
              data.sigBytes = (dataWords.length + 1) * 4;
              this._process();
              var hash2 = this._hash;
              var H2 = hash2.words;
              for (var i2 = 0; i2 < 4; i2++) {
                var H_i = H2[i2];
                H2[i2] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
              }
              return hash2;
            },
            clone: function() {
              var clone = Hasher.clone.call(this);
              clone._hash = this._hash.clone();
              return clone;
            }
          });
          function FF(a2, b2, c2, d2, x2, s2, t2) {
            var n2 = a2 + (b2 & c2 | ~b2 & d2) + x2 + t2;
            return (n2 << s2 | n2 >>> 32 - s2) + b2;
          }
          function GG(a2, b2, c2, d2, x2, s2, t2) {
            var n2 = a2 + (b2 & d2 | c2 & ~d2) + x2 + t2;
            return (n2 << s2 | n2 >>> 32 - s2) + b2;
          }
          function HH(a2, b2, c2, d2, x2, s2, t2) {
            var n2 = a2 + (b2 ^ c2 ^ d2) + x2 + t2;
            return (n2 << s2 | n2 >>> 32 - s2) + b2;
          }
          function II(a2, b2, c2, d2, x2, s2, t2) {
            var n2 = a2 + (c2 ^ (b2 | ~d2)) + x2 + t2;
            return (n2 << s2 | n2 >>> 32 - s2) + b2;
          }
          C2.MD5 = Hasher._createHelper(MD5);
          C2.HmacMD5 = Hasher._createHmacHelper(MD5);
        })(Math);
        return CryptoJS2.MD5;
      });
    })(md5);
    return md5.exports;
  }
  var sha1 = { exports: {} };
  var hasRequiredSha1;
  function requireSha1() {
    if (hasRequiredSha1)
      return sha1.exports;
    hasRequiredSha1 = 1;
    (function(module2, exports2) {
      (function(root2, factory) {
        {
          module2.exports = factory(requireCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function() {
          var C2 = CryptoJS2;
          var C_lib = C2.lib;
          var WordArray = C_lib.WordArray;
          var Hasher = C_lib.Hasher;
          var C_algo = C2.algo;
          var W2 = [];
          var SHA1 = C_algo.SHA1 = Hasher.extend({
            _doReset: function() {
              this._hash = new WordArray.init([
                1732584193,
                4023233417,
                2562383102,
                271733878,
                3285377520
              ]);
            },
            _doProcessBlock: function(M2, offset) {
              var H2 = this._hash.words;
              var a2 = H2[0];
              var b2 = H2[1];
              var c2 = H2[2];
              var d2 = H2[3];
              var e = H2[4];
              for (var i2 = 0; i2 < 80; i2++) {
                if (i2 < 16) {
                  W2[i2] = M2[offset + i2] | 0;
                } else {
                  var n2 = W2[i2 - 3] ^ W2[i2 - 8] ^ W2[i2 - 14] ^ W2[i2 - 16];
                  W2[i2] = n2 << 1 | n2 >>> 31;
                }
                var t2 = (a2 << 5 | a2 >>> 27) + e + W2[i2];
                if (i2 < 20) {
                  t2 += (b2 & c2 | ~b2 & d2) + 1518500249;
                } else if (i2 < 40) {
                  t2 += (b2 ^ c2 ^ d2) + 1859775393;
                } else if (i2 < 60) {
                  t2 += (b2 & c2 | b2 & d2 | c2 & d2) - 1894007588;
                } else {
                  t2 += (b2 ^ c2 ^ d2) - 899497514;
                }
                e = d2;
                d2 = c2;
                c2 = b2 << 30 | b2 >>> 2;
                b2 = a2;
                a2 = t2;
              }
              H2[0] = H2[0] + a2 | 0;
              H2[1] = H2[1] + b2 | 0;
              H2[2] = H2[2] + c2 | 0;
              H2[3] = H2[3] + d2 | 0;
              H2[4] = H2[4] + e | 0;
            },
            _doFinalize: function() {
              var data = this._data;
              var dataWords = data.words;
              var nBitsTotal = this._nDataBytes * 8;
              var nBitsLeft = data.sigBytes * 8;
              dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 4294967296);
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
              data.sigBytes = dataWords.length * 4;
              this._process();
              return this._hash;
            },
            clone: function() {
              var clone = Hasher.clone.call(this);
              clone._hash = this._hash.clone();
              return clone;
            }
          });
          C2.SHA1 = Hasher._createHelper(SHA1);
          C2.HmacSHA1 = Hasher._createHmacHelper(SHA1);
        })();
        return CryptoJS2.SHA1;
      });
    })(sha1);
    return sha1.exports;
  }
  var sha256 = { exports: {} };
  var hasRequiredSha256;
  function requireSha256() {
    if (hasRequiredSha256)
      return sha256.exports;
    hasRequiredSha256 = 1;
    (function(module2, exports2) {
      (function(root2, factory) {
        {
          module2.exports = factory(requireCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function(Math2) {
          var C2 = CryptoJS2;
          var C_lib = C2.lib;
          var WordArray = C_lib.WordArray;
          var Hasher = C_lib.Hasher;
          var C_algo = C2.algo;
          var H2 = [];
          var K2 = [];
          (function() {
            function isPrime(n3) {
              var sqrtN = Math2.sqrt(n3);
              for (var factor = 2; factor <= sqrtN; factor++) {
                if (!(n3 % factor)) {
                  return false;
                }
              }
              return true;
            }
            function getFractionalBits(n3) {
              return (n3 - (n3 | 0)) * 4294967296 | 0;
            }
            var n2 = 2;
            var nPrime = 0;
            while (nPrime < 64) {
              if (isPrime(n2)) {
                if (nPrime < 8) {
                  H2[nPrime] = getFractionalBits(Math2.pow(n2, 1 / 2));
                }
                K2[nPrime] = getFractionalBits(Math2.pow(n2, 1 / 3));
                nPrime++;
              }
              n2++;
            }
          })();
          var W2 = [];
          var SHA2562 = C_algo.SHA256 = Hasher.extend({
            _doReset: function() {
              this._hash = new WordArray.init(H2.slice(0));
            },
            _doProcessBlock: function(M2, offset) {
              var H3 = this._hash.words;
              var a2 = H3[0];
              var b2 = H3[1];
              var c2 = H3[2];
              var d2 = H3[3];
              var e = H3[4];
              var f2 = H3[5];
              var g2 = H3[6];
              var h2 = H3[7];
              for (var i2 = 0; i2 < 64; i2++) {
                if (i2 < 16) {
                  W2[i2] = M2[offset + i2] | 0;
                } else {
                  var gamma0x = W2[i2 - 15];
                  var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
                  var gamma1x = W2[i2 - 2];
                  var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
                  W2[i2] = gamma0 + W2[i2 - 7] + gamma1 + W2[i2 - 16];
                }
                var ch = e & f2 ^ ~e & g2;
                var maj = a2 & b2 ^ a2 & c2 ^ b2 & c2;
                var sigma0 = (a2 << 30 | a2 >>> 2) ^ (a2 << 19 | a2 >>> 13) ^ (a2 << 10 | a2 >>> 22);
                var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
                var t1 = h2 + sigma1 + ch + K2[i2] + W2[i2];
                var t2 = sigma0 + maj;
                h2 = g2;
                g2 = f2;
                f2 = e;
                e = d2 + t1 | 0;
                d2 = c2;
                c2 = b2;
                b2 = a2;
                a2 = t1 + t2 | 0;
              }
              H3[0] = H3[0] + a2 | 0;
              H3[1] = H3[1] + b2 | 0;
              H3[2] = H3[2] + c2 | 0;
              H3[3] = H3[3] + d2 | 0;
              H3[4] = H3[4] + e | 0;
              H3[5] = H3[5] + f2 | 0;
              H3[6] = H3[6] + g2 | 0;
              H3[7] = H3[7] + h2 | 0;
            },
            _doFinalize: function() {
              var data = this._data;
              var dataWords = data.words;
              var nBitsTotal = this._nDataBytes * 8;
              var nBitsLeft = data.sigBytes * 8;
              dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math2.floor(nBitsTotal / 4294967296);
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
              data.sigBytes = dataWords.length * 4;
              this._process();
              return this._hash;
            },
            clone: function() {
              var clone = Hasher.clone.call(this);
              clone._hash = this._hash.clone();
              return clone;
            }
          });
          C2.SHA256 = Hasher._createHelper(SHA2562);
          C2.HmacSHA256 = Hasher._createHmacHelper(SHA2562);
        })(Math);
        return CryptoJS2.SHA256;
      });
    })(sha256);
    return sha256.exports;
  }
  var sha224 = { exports: {} };
  var hasRequiredSha224;
  function requireSha224() {
    if (hasRequiredSha224)
      return sha224.exports;
    hasRequiredSha224 = 1;
    (function(module2, exports2) {
      (function(root2, factory, undef) {
        {
          module2.exports = factory(requireCore(), requireSha256());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function() {
          var C2 = CryptoJS2;
          var C_lib = C2.lib;
          var WordArray = C_lib.WordArray;
          var C_algo = C2.algo;
          var SHA2562 = C_algo.SHA256;
          var SHA224 = C_algo.SHA224 = SHA2562.extend({
            _doReset: function() {
              this._hash = new WordArray.init([
                3238371032,
                914150663,
                812702999,
                4144912697,
                4290775857,
                1750603025,
                1694076839,
                3204075428
              ]);
            },
            _doFinalize: function() {
              var hash2 = SHA2562._doFinalize.call(this);
              hash2.sigBytes -= 4;
              return hash2;
            }
          });
          C2.SHA224 = SHA2562._createHelper(SHA224);
          C2.HmacSHA224 = SHA2562._createHmacHelper(SHA224);
        })();
        return CryptoJS2.SHA224;
      });
    })(sha224);
    return sha224.exports;
  }
  var sha512 = { exports: {} };
  var hasRequiredSha512;
  function requireSha512() {
    if (hasRequiredSha512)
      return sha512.exports;
    hasRequiredSha512 = 1;
    (function(module2, exports2) {
      (function(root2, factory, undef) {
        {
          module2.exports = factory(requireCore(), requireX64Core());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function() {
          var C2 = CryptoJS2;
          var C_lib = C2.lib;
          var Hasher = C_lib.Hasher;
          var C_x64 = C2.x64;
          var X64Word = C_x64.Word;
          var X64WordArray = C_x64.WordArray;
          var C_algo = C2.algo;
          function X64Word_create() {
            return X64Word.create.apply(X64Word, arguments);
          }
          var K2 = [
            X64Word_create(1116352408, 3609767458),
            X64Word_create(1899447441, 602891725),
            X64Word_create(3049323471, 3964484399),
            X64Word_create(3921009573, 2173295548),
            X64Word_create(961987163, 4081628472),
            X64Word_create(1508970993, 3053834265),
            X64Word_create(2453635748, 2937671579),
            X64Word_create(2870763221, 3664609560),
            X64Word_create(3624381080, 2734883394),
            X64Word_create(310598401, 1164996542),
            X64Word_create(607225278, 1323610764),
            X64Word_create(1426881987, 3590304994),
            X64Word_create(1925078388, 4068182383),
            X64Word_create(2162078206, 991336113),
            X64Word_create(2614888103, 633803317),
            X64Word_create(3248222580, 3479774868),
            X64Word_create(3835390401, 2666613458),
            X64Word_create(4022224774, 944711139),
            X64Word_create(264347078, 2341262773),
            X64Word_create(604807628, 2007800933),
            X64Word_create(770255983, 1495990901),
            X64Word_create(1249150122, 1856431235),
            X64Word_create(1555081692, 3175218132),
            X64Word_create(1996064986, 2198950837),
            X64Word_create(2554220882, 3999719339),
            X64Word_create(2821834349, 766784016),
            X64Word_create(2952996808, 2566594879),
            X64Word_create(3210313671, 3203337956),
            X64Word_create(3336571891, 1034457026),
            X64Word_create(3584528711, 2466948901),
            X64Word_create(113926993, 3758326383),
            X64Word_create(338241895, 168717936),
            X64Word_create(666307205, 1188179964),
            X64Word_create(773529912, 1546045734),
            X64Word_create(1294757372, 1522805485),
            X64Word_create(1396182291, 2643833823),
            X64Word_create(1695183700, 2343527390),
            X64Word_create(1986661051, 1014477480),
            X64Word_create(2177026350, 1206759142),
            X64Word_create(2456956037, 344077627),
            X64Word_create(2730485921, 1290863460),
            X64Word_create(2820302411, 3158454273),
            X64Word_create(3259730800, 3505952657),
            X64Word_create(3345764771, 106217008),
            X64Word_create(3516065817, 3606008344),
            X64Word_create(3600352804, 1432725776),
            X64Word_create(4094571909, 1467031594),
            X64Word_create(275423344, 851169720),
            X64Word_create(430227734, 3100823752),
            X64Word_create(506948616, 1363258195),
            X64Word_create(659060556, 3750685593),
            X64Word_create(883997877, 3785050280),
            X64Word_create(958139571, 3318307427),
            X64Word_create(1322822218, 3812723403),
            X64Word_create(1537002063, 2003034995),
            X64Word_create(1747873779, 3602036899),
            X64Word_create(1955562222, 1575990012),
            X64Word_create(2024104815, 1125592928),
            X64Word_create(2227730452, 2716904306),
            X64Word_create(2361852424, 442776044),
            X64Word_create(2428436474, 593698344),
            X64Word_create(2756734187, 3733110249),
            X64Word_create(3204031479, 2999351573),
            X64Word_create(3329325298, 3815920427),
            X64Word_create(3391569614, 3928383900),
            X64Word_create(3515267271, 566280711),
            X64Word_create(3940187606, 3454069534),
            X64Word_create(4118630271, 4000239992),
            X64Word_create(116418474, 1914138554),
            X64Word_create(174292421, 2731055270),
            X64Word_create(289380356, 3203993006),
            X64Word_create(460393269, 320620315),
            X64Word_create(685471733, 587496836),
            X64Word_create(852142971, 1086792851),
            X64Word_create(1017036298, 365543100),
            X64Word_create(1126000580, 2618297676),
            X64Word_create(1288033470, 3409855158),
            X64Word_create(1501505948, 4234509866),
            X64Word_create(1607167915, 987167468),
            X64Word_create(1816402316, 1246189591)
          ];
          var W2 = [];
          (function() {
            for (var i2 = 0; i2 < 80; i2++) {
              W2[i2] = X64Word_create();
            }
          })();
          var SHA5122 = C_algo.SHA512 = Hasher.extend({
            _doReset: function() {
              this._hash = new X64WordArray.init([
                new X64Word.init(1779033703, 4089235720),
                new X64Word.init(3144134277, 2227873595),
                new X64Word.init(1013904242, 4271175723),
                new X64Word.init(2773480762, 1595750129),
                new X64Word.init(1359893119, 2917565137),
                new X64Word.init(2600822924, 725511199),
                new X64Word.init(528734635, 4215389547),
                new X64Word.init(1541459225, 327033209)
              ]);
            },
            _doProcessBlock: function(M2, offset) {
              var H2 = this._hash.words;
              var H0 = H2[0];
              var H1 = H2[1];
              var H22 = H2[2];
              var H3 = H2[3];
              var H4 = H2[4];
              var H5 = H2[5];
              var H6 = H2[6];
              var H7 = H2[7];
              var H0h = H0.high;
              var H0l = H0.low;
              var H1h = H1.high;
              var H1l = H1.low;
              var H2h = H22.high;
              var H2l = H22.low;
              var H3h = H3.high;
              var H3l = H3.low;
              var H4h = H4.high;
              var H4l = H4.low;
              var H5h = H5.high;
              var H5l = H5.low;
              var H6h = H6.high;
              var H6l = H6.low;
              var H7h = H7.high;
              var H7l = H7.low;
              var ah = H0h;
              var al = H0l;
              var bh = H1h;
              var bl = H1l;
              var ch = H2h;
              var cl = H2l;
              var dh = H3h;
              var dl = H3l;
              var eh = H4h;
              var el = H4l;
              var fh = H5h;
              var fl = H5l;
              var gh = H6h;
              var gl = H6l;
              var hh = H7h;
              var hl = H7l;
              for (var i2 = 0; i2 < 80; i2++) {
                var Wil;
                var Wih;
                var Wi = W2[i2];
                if (i2 < 16) {
                  Wih = Wi.high = M2[offset + i2 * 2] | 0;
                  Wil = Wi.low = M2[offset + i2 * 2 + 1] | 0;
                } else {
                  var gamma0x = W2[i2 - 15];
                  var gamma0xh = gamma0x.high;
                  var gamma0xl = gamma0x.low;
                  var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
                  var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);
                  var gamma1x = W2[i2 - 2];
                  var gamma1xh = gamma1x.high;
                  var gamma1xl = gamma1x.low;
                  var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
                  var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);
                  var Wi7 = W2[i2 - 7];
                  var Wi7h = Wi7.high;
                  var Wi7l = Wi7.low;
                  var Wi16 = W2[i2 - 16];
                  var Wi16h = Wi16.high;
                  var Wi16l = Wi16.low;
                  Wil = gamma0l + Wi7l;
                  Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
                  Wil = Wil + gamma1l;
                  Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
                  Wil = Wil + Wi16l;
                  Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
                  Wi.high = Wih;
                  Wi.low = Wil;
                }
                var chh = eh & fh ^ ~eh & gh;
                var chl = el & fl ^ ~el & gl;
                var majh = ah & bh ^ ah & ch ^ bh & ch;
                var majl = al & bl ^ al & cl ^ bl & cl;
                var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
                var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
                var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
                var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9);
                var Ki = K2[i2];
                var Kih = Ki.high;
                var Kil = Ki.low;
                var t1l = hl + sigma1l;
                var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
                var t1l = t1l + chl;
                var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
                var t1l = t1l + Kil;
                var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
                var t1l = t1l + Wil;
                var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);
                var t2l = sigma0l + majl;
                var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);
                hh = gh;
                hl = gl;
                gh = fh;
                gl = fl;
                fh = eh;
                fl = el;
                el = dl + t1l | 0;
                eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
                dh = ch;
                dl = cl;
                ch = bh;
                cl = bl;
                bh = ah;
                bl = al;
                al = t1l + t2l | 0;
                ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
              }
              H0l = H0.low = H0l + al;
              H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
              H1l = H1.low = H1l + bl;
              H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
              H2l = H22.low = H2l + cl;
              H22.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
              H3l = H3.low = H3l + dl;
              H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
              H4l = H4.low = H4l + el;
              H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
              H5l = H5.low = H5l + fl;
              H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
              H6l = H6.low = H6l + gl;
              H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
              H7l = H7.low = H7l + hl;
              H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
            },
            _doFinalize: function() {
              var data = this._data;
              var dataWords = data.words;
              var nBitsTotal = this._nDataBytes * 8;
              var nBitsLeft = data.sigBytes * 8;
              dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
              dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 4294967296);
              dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
              data.sigBytes = dataWords.length * 4;
              this._process();
              var hash2 = this._hash.toX32();
              return hash2;
            },
            clone: function() {
              var clone = Hasher.clone.call(this);
              clone._hash = this._hash.clone();
              return clone;
            },
            blockSize: 1024 / 32
          });
          C2.SHA512 = Hasher._createHelper(SHA5122);
          C2.HmacSHA512 = Hasher._createHmacHelper(SHA5122);
        })();
        return CryptoJS2.SHA512;
      });
    })(sha512);
    return sha512.exports;
  }
  var sha384 = { exports: {} };
  var hasRequiredSha384;
  function requireSha384() {
    if (hasRequiredSha384)
      return sha384.exports;
    hasRequiredSha384 = 1;
    (function(module2, exports2) {
      (function(root2, factory, undef) {
        {
          module2.exports = factory(requireCore(), requireX64Core(), requireSha512());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function() {
          var C2 = CryptoJS2;
          var C_x64 = C2.x64;
          var X64Word = C_x64.Word;
          var X64WordArray = C_x64.WordArray;
          var C_algo = C2.algo;
          var SHA5122 = C_algo.SHA512;
          var SHA3842 = C_algo.SHA384 = SHA5122.extend({
            _doReset: function() {
              this._hash = new X64WordArray.init([
                new X64Word.init(3418070365, 3238371032),
                new X64Word.init(1654270250, 914150663),
                new X64Word.init(2438529370, 812702999),
                new X64Word.init(355462360, 4144912697),
                new X64Word.init(1731405415, 4290775857),
                new X64Word.init(2394180231, 1750603025),
                new X64Word.init(3675008525, 1694076839),
                new X64Word.init(1203062813, 3204075428)
              ]);
            },
            _doFinalize: function() {
              var hash2 = SHA5122._doFinalize.call(this);
              hash2.sigBytes -= 16;
              return hash2;
            }
          });
          C2.SHA384 = SHA5122._createHelper(SHA3842);
          C2.HmacSHA384 = SHA5122._createHmacHelper(SHA3842);
        })();
        return CryptoJS2.SHA384;
      });
    })(sha384);
    return sha384.exports;
  }
  var sha3 = { exports: {} };
  var hasRequiredSha3;
  function requireSha3() {
    if (hasRequiredSha3)
      return sha3.exports;
    hasRequiredSha3 = 1;
    (function(module2, exports2) {
      (function(root2, factory, undef) {
        {
          module2.exports = factory(requireCore(), requireX64Core());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function(Math2) {
          var C2 = CryptoJS2;
          var C_lib = C2.lib;
          var WordArray = C_lib.WordArray;
          var Hasher = C_lib.Hasher;
          var C_x64 = C2.x64;
          var X64Word = C_x64.Word;
          var C_algo = C2.algo;
          var RHO_OFFSETS = [];
          var PI_INDEXES = [];
          var ROUND_CONSTANTS = [];
          (function() {
            var x2 = 1, y2 = 0;
            for (var t2 = 0; t2 < 24; t2++) {
              RHO_OFFSETS[x2 + 5 * y2] = (t2 + 1) * (t2 + 2) / 2 % 64;
              var newX = y2 % 5;
              var newY = (2 * x2 + 3 * y2) % 5;
              x2 = newX;
              y2 = newY;
            }
            for (var x2 = 0; x2 < 5; x2++) {
              for (var y2 = 0; y2 < 5; y2++) {
                PI_INDEXES[x2 + 5 * y2] = y2 + (2 * x2 + 3 * y2) % 5 * 5;
              }
            }
            var LFSR = 1;
            for (var i2 = 0; i2 < 24; i2++) {
              var roundConstantMsw = 0;
              var roundConstantLsw = 0;
              for (var j2 = 0; j2 < 7; j2++) {
                if (LFSR & 1) {
                  var bitPosition = (1 << j2) - 1;
                  if (bitPosition < 32) {
                    roundConstantLsw ^= 1 << bitPosition;
                  } else {
                    roundConstantMsw ^= 1 << bitPosition - 32;
                  }
                }
                if (LFSR & 128) {
                  LFSR = LFSR << 1 ^ 113;
                } else {
                  LFSR <<= 1;
                }
              }
              ROUND_CONSTANTS[i2] = X64Word.create(roundConstantMsw, roundConstantLsw);
            }
          })();
          var T9 = [];
          (function() {
            for (var i2 = 0; i2 < 25; i2++) {
              T9[i2] = X64Word.create();
            }
          })();
          var SHA3 = C_algo.SHA3 = Hasher.extend({
            cfg: Hasher.cfg.extend({
              outputLength: 512
            }),
            _doReset: function() {
              var state = this._state = [];
              for (var i2 = 0; i2 < 25; i2++) {
                state[i2] = new X64Word.init();
              }
              this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
            },
            _doProcessBlock: function(M2, offset) {
              var state = this._state;
              var nBlockSizeLanes = this.blockSize / 2;
              for (var i2 = 0; i2 < nBlockSizeLanes; i2++) {
                var M2i = M2[offset + 2 * i2];
                var M2i1 = M2[offset + 2 * i2 + 1];
                M2i = (M2i << 8 | M2i >>> 24) & 16711935 | (M2i << 24 | M2i >>> 8) & 4278255360;
                M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 16711935 | (M2i1 << 24 | M2i1 >>> 8) & 4278255360;
                var lane = state[i2];
                lane.high ^= M2i1;
                lane.low ^= M2i;
              }
              for (var round = 0; round < 24; round++) {
                for (var x2 = 0; x2 < 5; x2++) {
                  var tMsw = 0, tLsw = 0;
                  for (var y2 = 0; y2 < 5; y2++) {
                    var lane = state[x2 + 5 * y2];
                    tMsw ^= lane.high;
                    tLsw ^= lane.low;
                  }
                  var Tx = T9[x2];
                  Tx.high = tMsw;
                  Tx.low = tLsw;
                }
                for (var x2 = 0; x2 < 5; x2++) {
                  var Tx4 = T9[(x2 + 4) % 5];
                  var Tx1 = T9[(x2 + 1) % 5];
                  var Tx1Msw = Tx1.high;
                  var Tx1Lsw = Tx1.low;
                  var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);
                  var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);
                  for (var y2 = 0; y2 < 5; y2++) {
                    var lane = state[x2 + 5 * y2];
                    lane.high ^= tMsw;
                    lane.low ^= tLsw;
                  }
                }
                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
                  var tMsw;
                  var tLsw;
                  var lane = state[laneIndex];
                  var laneMsw = lane.high;
                  var laneLsw = lane.low;
                  var rhoOffset = RHO_OFFSETS[laneIndex];
                  if (rhoOffset < 32) {
                    tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;
                    tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;
                  } else {
                    tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;
                    tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;
                  }
                  var TPiLane = T9[PI_INDEXES[laneIndex]];
                  TPiLane.high = tMsw;
                  TPiLane.low = tLsw;
                }
                var T0 = T9[0];
                var state0 = state[0];
                T0.high = state0.high;
                T0.low = state0.low;
                for (var x2 = 0; x2 < 5; x2++) {
                  for (var y2 = 0; y2 < 5; y2++) {
                    var laneIndex = x2 + 5 * y2;
                    var lane = state[laneIndex];
                    var TLane = T9[laneIndex];
                    var Tx1Lane = T9[(x2 + 1) % 5 + 5 * y2];
                    var Tx2Lane = T9[(x2 + 2) % 5 + 5 * y2];
                    lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;
                    lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;
                  }
                }
                var lane = state[0];
                var roundConstant = ROUND_CONSTANTS[round];
                lane.high ^= roundConstant.high;
                lane.low ^= roundConstant.low;
              }
            },
            _doFinalize: function() {
              var data = this._data;
              var dataWords = data.words;
              this._nDataBytes * 8;
              var nBitsLeft = data.sigBytes * 8;
              var blockSizeBits = this.blockSize * 32;
              dataWords[nBitsLeft >>> 5] |= 1 << 24 - nBitsLeft % 32;
              dataWords[(Math2.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 128;
              data.sigBytes = dataWords.length * 4;
              this._process();
              var state = this._state;
              var outputLengthBytes = this.cfg.outputLength / 8;
              var outputLengthLanes = outputLengthBytes / 8;
              var hashWords = [];
              for (var i2 = 0; i2 < outputLengthLanes; i2++) {
                var lane = state[i2];
                var laneMsw = lane.high;
                var laneLsw = lane.low;
                laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 16711935 | (laneMsw << 24 | laneMsw >>> 8) & 4278255360;
                laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 16711935 | (laneLsw << 24 | laneLsw >>> 8) & 4278255360;
                hashWords.push(laneLsw);
                hashWords.push(laneMsw);
              }
              return new WordArray.init(hashWords, outputLengthBytes);
            },
            clone: function() {
              var clone = Hasher.clone.call(this);
              var state = clone._state = this._state.slice(0);
              for (var i2 = 0; i2 < 25; i2++) {
                state[i2] = state[i2].clone();
              }
              return clone;
            }
          });
          C2.SHA3 = Hasher._createHelper(SHA3);
          C2.HmacSHA3 = Hasher._createHmacHelper(SHA3);
        })(Math);
        return CryptoJS2.SHA3;
      });
    })(sha3);
    return sha3.exports;
  }
  var ripemd160 = { exports: {} };
  var hasRequiredRipemd160;
  function requireRipemd160() {
    if (hasRequiredRipemd160)
      return ripemd160.exports;
    hasRequiredRipemd160 = 1;
    (function(module2, exports2) {
      (function(root2, factory) {
        {
          module2.exports = factory(requireCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        /** @preserve
            			(c) 2012 by Cédric Mesnil. All rights reserved.
        
            			Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
        
            			    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
            			    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
        
            			THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
            			*/
        (function(Math2) {
          var C2 = CryptoJS2;
          var C_lib = C2.lib;
          var WordArray = C_lib.WordArray;
          var Hasher = C_lib.Hasher;
          var C_algo = C2.algo;
          var _zl = WordArray.create([
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            7,
            4,
            13,
            1,
            10,
            6,
            15,
            3,
            12,
            0,
            9,
            5,
            2,
            14,
            11,
            8,
            3,
            10,
            14,
            4,
            9,
            15,
            8,
            1,
            2,
            7,
            0,
            6,
            13,
            11,
            5,
            12,
            1,
            9,
            11,
            10,
            0,
            8,
            12,
            4,
            13,
            3,
            7,
            15,
            14,
            5,
            6,
            2,
            4,
            0,
            5,
            9,
            7,
            12,
            2,
            10,
            14,
            1,
            3,
            8,
            11,
            6,
            15,
            13
          ]);
          var _zr = WordArray.create([
            5,
            14,
            7,
            0,
            9,
            2,
            11,
            4,
            13,
            6,
            15,
            8,
            1,
            10,
            3,
            12,
            6,
            11,
            3,
            7,
            0,
            13,
            5,
            10,
            14,
            15,
            8,
            12,
            4,
            9,
            1,
            2,
            15,
            5,
            1,
            3,
            7,
            14,
            6,
            9,
            11,
            8,
            12,
            2,
            10,
            0,
            4,
            13,
            8,
            6,
            4,
            1,
            3,
            11,
            15,
            0,
            5,
            12,
            2,
            13,
            9,
            7,
            10,
            14,
            12,
            15,
            10,
            4,
            1,
            5,
            8,
            7,
            6,
            2,
            13,
            14,
            0,
            3,
            9,
            11
          ]);
          var _sl = WordArray.create([
            11,
            14,
            15,
            12,
            5,
            8,
            7,
            9,
            11,
            13,
            14,
            15,
            6,
            7,
            9,
            8,
            7,
            6,
            8,
            13,
            11,
            9,
            7,
            15,
            7,
            12,
            15,
            9,
            11,
            7,
            13,
            12,
            11,
            13,
            6,
            7,
            14,
            9,
            13,
            15,
            14,
            8,
            13,
            6,
            5,
            12,
            7,
            5,
            11,
            12,
            14,
            15,
            14,
            15,
            9,
            8,
            9,
            14,
            5,
            6,
            8,
            6,
            5,
            12,
            9,
            15,
            5,
            11,
            6,
            8,
            13,
            12,
            5,
            12,
            13,
            14,
            11,
            8,
            5,
            6
          ]);
          var _sr = WordArray.create([
            8,
            9,
            9,
            11,
            13,
            15,
            15,
            5,
            7,
            7,
            8,
            11,
            14,
            14,
            12,
            6,
            9,
            13,
            15,
            7,
            12,
            8,
            9,
            11,
            7,
            7,
            12,
            7,
            6,
            15,
            13,
            11,
            9,
            7,
            15,
            11,
            8,
            6,
            6,
            14,
            12,
            13,
            5,
            14,
            13,
            13,
            7,
            5,
            15,
            5,
            8,
            11,
            14,
            14,
            6,
            14,
            6,
            9,
            12,
            9,
            12,
            5,
            15,
            8,
            8,
            5,
            12,
            9,
            12,
            5,
            14,
            6,
            8,
            13,
            6,
            5,
            15,
            13,
            11,
            11
          ]);
          var _hl = WordArray.create([0, 1518500249, 1859775393, 2400959708, 2840853838]);
          var _hr = WordArray.create([1352829926, 1548603684, 1836072691, 2053994217, 0]);
          var RIPEMD1602 = C_algo.RIPEMD160 = Hasher.extend({
            _doReset: function() {
              this._hash = WordArray.create([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
            },
            _doProcessBlock: function(M2, offset) {
              for (var i2 = 0; i2 < 16; i2++) {
                var offset_i = offset + i2;
                var M_offset_i = M2[offset_i];
                M2[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
              }
              var H2 = this._hash.words;
              var hl = _hl.words;
              var hr = _hr.words;
              var zl = _zl.words;
              var zr = _zr.words;
              var sl = _sl.words;
              var sr = _sr.words;
              var al, bl, cl, dl, el;
              var ar, br, cr, dr, er;
              ar = al = H2[0];
              br = bl = H2[1];
              cr = cl = H2[2];
              dr = dl = H2[3];
              er = el = H2[4];
              var t2;
              for (var i2 = 0; i2 < 80; i2 += 1) {
                t2 = al + M2[offset + zl[i2]] | 0;
                if (i2 < 16) {
                  t2 += f1(bl, cl, dl) + hl[0];
                } else if (i2 < 32) {
                  t2 += f2(bl, cl, dl) + hl[1];
                } else if (i2 < 48) {
                  t2 += f3(bl, cl, dl) + hl[2];
                } else if (i2 < 64) {
                  t2 += f4(bl, cl, dl) + hl[3];
                } else {
                  t2 += f5(bl, cl, dl) + hl[4];
                }
                t2 = t2 | 0;
                t2 = rotl2(t2, sl[i2]);
                t2 = t2 + el | 0;
                al = el;
                el = dl;
                dl = rotl2(cl, 10);
                cl = bl;
                bl = t2;
                t2 = ar + M2[offset + zr[i2]] | 0;
                if (i2 < 16) {
                  t2 += f5(br, cr, dr) + hr[0];
                } else if (i2 < 32) {
                  t2 += f4(br, cr, dr) + hr[1];
                } else if (i2 < 48) {
                  t2 += f3(br, cr, dr) + hr[2];
                } else if (i2 < 64) {
                  t2 += f2(br, cr, dr) + hr[3];
                } else {
                  t2 += f1(br, cr, dr) + hr[4];
                }
                t2 = t2 | 0;
                t2 = rotl2(t2, sr[i2]);
                t2 = t2 + er | 0;
                ar = er;
                er = dr;
                dr = rotl2(cr, 10);
                cr = br;
                br = t2;
              }
              t2 = H2[1] + cl + dr | 0;
              H2[1] = H2[2] + dl + er | 0;
              H2[2] = H2[3] + el + ar | 0;
              H2[3] = H2[4] + al + br | 0;
              H2[4] = H2[0] + bl + cr | 0;
              H2[0] = t2;
            },
            _doFinalize: function() {
              var data = this._data;
              var dataWords = data.words;
              var nBitsTotal = this._nDataBytes * 8;
              var nBitsLeft = data.sigBytes * 8;
              dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 16711935 | (nBitsTotal << 24 | nBitsTotal >>> 8) & 4278255360;
              data.sigBytes = (dataWords.length + 1) * 4;
              this._process();
              var hash2 = this._hash;
              var H2 = hash2.words;
              for (var i2 = 0; i2 < 5; i2++) {
                var H_i = H2[i2];
                H2[i2] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
              }
              return hash2;
            },
            clone: function() {
              var clone = Hasher.clone.call(this);
              clone._hash = this._hash.clone();
              return clone;
            }
          });
          function f1(x2, y2, z2) {
            return x2 ^ y2 ^ z2;
          }
          function f2(x2, y2, z2) {
            return x2 & y2 | ~x2 & z2;
          }
          function f3(x2, y2, z2) {
            return (x2 | ~y2) ^ z2;
          }
          function f4(x2, y2, z2) {
            return x2 & z2 | y2 & ~z2;
          }
          function f5(x2, y2, z2) {
            return x2 ^ (y2 | ~z2);
          }
          function rotl2(x2, n2) {
            return x2 << n2 | x2 >>> 32 - n2;
          }
          C2.RIPEMD160 = Hasher._createHelper(RIPEMD1602);
          C2.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD1602);
        })();
        return CryptoJS2.RIPEMD160;
      });
    })(ripemd160);
    return ripemd160.exports;
  }
  var hmac = { exports: {} };
  var hasRequiredHmac;
  function requireHmac() {
    if (hasRequiredHmac)
      return hmac.exports;
    hasRequiredHmac = 1;
    (function(module2, exports2) {
      (function(root2, factory) {
        {
          module2.exports = factory(requireCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function() {
          var C2 = CryptoJS2;
          var C_lib = C2.lib;
          var Base = C_lib.Base;
          var C_enc = C2.enc;
          var Utf8 = C_enc.Utf8;
          var C_algo = C2.algo;
          C_algo.HMAC = Base.extend({
            init: function(hasher, key) {
              hasher = this._hasher = new hasher.init();
              if (typeof key == "string") {
                key = Utf8.parse(key);
              }
              var hasherBlockSize = hasher.blockSize;
              var hasherBlockSizeBytes = hasherBlockSize * 4;
              if (key.sigBytes > hasherBlockSizeBytes) {
                key = hasher.finalize(key);
              }
              key.clamp();
              var oKey = this._oKey = key.clone();
              var iKey = this._iKey = key.clone();
              var oKeyWords = oKey.words;
              var iKeyWords = iKey.words;
              for (var i2 = 0; i2 < hasherBlockSize; i2++) {
                oKeyWords[i2] ^= 1549556828;
                iKeyWords[i2] ^= 909522486;
              }
              oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
              this.reset();
            },
            reset: function() {
              var hasher = this._hasher;
              hasher.reset();
              hasher.update(this._iKey);
            },
            update: function(messageUpdate) {
              this._hasher.update(messageUpdate);
              return this;
            },
            finalize: function(messageUpdate) {
              var hasher = this._hasher;
              var innerHash = hasher.finalize(messageUpdate);
              hasher.reset();
              var hmac2 = hasher.finalize(this._oKey.clone().concat(innerHash));
              return hmac2;
            }
          });
        })();
      });
    })(hmac);
    return hmac.exports;
  }
  var pbkdf2 = { exports: {} };
  var hasRequiredPbkdf2;
  function requirePbkdf2() {
    if (hasRequiredPbkdf2)
      return pbkdf2.exports;
    hasRequiredPbkdf2 = 1;
    (function(module2, exports2) {
      (function(root2, factory, undef) {
        {
          module2.exports = factory(requireCore(), requireSha1(), requireHmac());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function() {
          var C2 = CryptoJS2;
          var C_lib = C2.lib;
          var Base = C_lib.Base;
          var WordArray = C_lib.WordArray;
          var C_algo = C2.algo;
          var SHA1 = C_algo.SHA1;
          var HMAC2 = C_algo.HMAC;
          var PBKDF2 = C_algo.PBKDF2 = Base.extend({
            cfg: Base.extend({
              keySize: 128 / 32,
              hasher: SHA1,
              iterations: 1
            }),
            init: function(cfg) {
              this.cfg = this.cfg.extend(cfg);
            },
            compute: function(password, salt) {
              var cfg = this.cfg;
              var hmac2 = HMAC2.create(cfg.hasher, password);
              var derivedKey = WordArray.create();
              var blockIndex = WordArray.create([1]);
              var derivedKeyWords = derivedKey.words;
              var blockIndexWords = blockIndex.words;
              var keySize = cfg.keySize;
              var iterations = cfg.iterations;
              while (derivedKeyWords.length < keySize) {
                var block = hmac2.update(salt).finalize(blockIndex);
                hmac2.reset();
                var blockWords = block.words;
                var blockWordsLength = blockWords.length;
                var intermediate = block;
                for (var i2 = 1; i2 < iterations; i2++) {
                  intermediate = hmac2.finalize(intermediate);
                  hmac2.reset();
                  var intermediateWords = intermediate.words;
                  for (var j2 = 0; j2 < blockWordsLength; j2++) {
                    blockWords[j2] ^= intermediateWords[j2];
                  }
                }
                derivedKey.concat(block);
                blockIndexWords[0]++;
              }
              derivedKey.sigBytes = keySize * 4;
              return derivedKey;
            }
          });
          C2.PBKDF2 = function(password, salt, cfg) {
            return PBKDF2.create(cfg).compute(password, salt);
          };
        })();
        return CryptoJS2.PBKDF2;
      });
    })(pbkdf2);
    return pbkdf2.exports;
  }
  var evpkdf = { exports: {} };
  var hasRequiredEvpkdf;
  function requireEvpkdf() {
    if (hasRequiredEvpkdf)
      return evpkdf.exports;
    hasRequiredEvpkdf = 1;
    (function(module2, exports2) {
      (function(root2, factory, undef) {
        {
          module2.exports = factory(requireCore(), requireSha1(), requireHmac());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function() {
          var C2 = CryptoJS2;
          var C_lib = C2.lib;
          var Base = C_lib.Base;
          var WordArray = C_lib.WordArray;
          var C_algo = C2.algo;
          var MD5 = C_algo.MD5;
          var EvpKDF = C_algo.EvpKDF = Base.extend({
            cfg: Base.extend({
              keySize: 128 / 32,
              hasher: MD5,
              iterations: 1
            }),
            init: function(cfg) {
              this.cfg = this.cfg.extend(cfg);
            },
            compute: function(password, salt) {
              var block;
              var cfg = this.cfg;
              var hasher = cfg.hasher.create();
              var derivedKey = WordArray.create();
              var derivedKeyWords = derivedKey.words;
              var keySize = cfg.keySize;
              var iterations = cfg.iterations;
              while (derivedKeyWords.length < keySize) {
                if (block) {
                  hasher.update(block);
                }
                block = hasher.update(password).finalize(salt);
                hasher.reset();
                for (var i2 = 1; i2 < iterations; i2++) {
                  block = hasher.finalize(block);
                  hasher.reset();
                }
                derivedKey.concat(block);
              }
              derivedKey.sigBytes = keySize * 4;
              return derivedKey;
            }
          });
          C2.EvpKDF = function(password, salt, cfg) {
            return EvpKDF.create(cfg).compute(password, salt);
          };
        })();
        return CryptoJS2.EvpKDF;
      });
    })(evpkdf);
    return evpkdf.exports;
  }
  var cipherCore = { exports: {} };
  var hasRequiredCipherCore;
  function requireCipherCore() {
    if (hasRequiredCipherCore)
      return cipherCore.exports;
    hasRequiredCipherCore = 1;
    (function(module2, exports2) {
      (function(root2, factory, undef) {
        {
          module2.exports = factory(requireCore(), requireEvpkdf());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        CryptoJS2.lib.Cipher || function(undefined$1) {
          var C2 = CryptoJS2;
          var C_lib = C2.lib;
          var Base = C_lib.Base;
          var WordArray = C_lib.WordArray;
          var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
          var C_enc = C2.enc;
          C_enc.Utf8;
          var Base64 = C_enc.Base64;
          var C_algo = C2.algo;
          var EvpKDF = C_algo.EvpKDF;
          var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
            cfg: Base.extend(),
            createEncryptor: function(key, cfg) {
              return this.create(this._ENC_XFORM_MODE, key, cfg);
            },
            createDecryptor: function(key, cfg) {
              return this.create(this._DEC_XFORM_MODE, key, cfg);
            },
            init: function(xformMode, key, cfg) {
              this.cfg = this.cfg.extend(cfg);
              this._xformMode = xformMode;
              this._key = key;
              this.reset();
            },
            reset: function() {
              BufferedBlockAlgorithm.reset.call(this);
              this._doReset();
            },
            process: function(dataUpdate) {
              this._append(dataUpdate);
              return this._process();
            },
            finalize: function(dataUpdate) {
              if (dataUpdate) {
                this._append(dataUpdate);
              }
              var finalProcessedData = this._doFinalize();
              return finalProcessedData;
            },
            keySize: 128 / 32,
            ivSize: 128 / 32,
            _ENC_XFORM_MODE: 1,
            _DEC_XFORM_MODE: 2,
            _createHelper: function() {
              function selectCipherStrategy(key) {
                if (typeof key == "string") {
                  return PasswordBasedCipher;
                } else {
                  return SerializableCipher;
                }
              }
              return function(cipher) {
                return {
                  encrypt: function(message, key, cfg) {
                    return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
                  },
                  decrypt: function(ciphertext, key, cfg) {
                    return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                  }
                };
              };
            }()
          });
          C_lib.StreamCipher = Cipher.extend({
            _doFinalize: function() {
              var finalProcessedBlocks = this._process(true);
              return finalProcessedBlocks;
            },
            blockSize: 1
          });
          var C_mode = C2.mode = {};
          var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
            createEncryptor: function(cipher, iv) {
              return this.Encryptor.create(cipher, iv);
            },
            createDecryptor: function(cipher, iv) {
              return this.Decryptor.create(cipher, iv);
            },
            init: function(cipher, iv) {
              this._cipher = cipher;
              this._iv = iv;
            }
          });
          var CBC2 = C_mode.CBC = function() {
            var CBC3 = BlockCipherMode.extend();
            CBC3.Encryptor = CBC3.extend({
              processBlock: function(words2, offset) {
                var cipher = this._cipher;
                var blockSize = cipher.blockSize;
                xorBlock.call(this, words2, offset, blockSize);
                cipher.encryptBlock(words2, offset);
                this._prevBlock = words2.slice(offset, offset + blockSize);
              }
            });
            CBC3.Decryptor = CBC3.extend({
              processBlock: function(words2, offset) {
                var cipher = this._cipher;
                var blockSize = cipher.blockSize;
                var thisBlock = words2.slice(offset, offset + blockSize);
                cipher.decryptBlock(words2, offset);
                xorBlock.call(this, words2, offset, blockSize);
                this._prevBlock = thisBlock;
              }
            });
            function xorBlock(words2, offset, blockSize) {
              var block;
              var iv = this._iv;
              if (iv) {
                block = iv;
                this._iv = undefined$1;
              } else {
                block = this._prevBlock;
              }
              for (var i2 = 0; i2 < blockSize; i2++) {
                words2[offset + i2] ^= block[i2];
              }
            }
            return CBC3;
          }();
          var C_pad = C2.pad = {};
          var Pkcs7 = C_pad.Pkcs7 = {
            pad: function(data, blockSize) {
              var blockSizeBytes = blockSize * 4;
              var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
              var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;
              var paddingWords = [];
              for (var i2 = 0; i2 < nPaddingBytes; i2 += 4) {
                paddingWords.push(paddingWord);
              }
              var padding2 = WordArray.create(paddingWords, nPaddingBytes);
              data.concat(padding2);
            },
            unpad: function(data) {
              var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
              data.sigBytes -= nPaddingBytes;
            }
          };
          C_lib.BlockCipher = Cipher.extend({
            cfg: Cipher.cfg.extend({
              mode: CBC2,
              padding: Pkcs7
            }),
            reset: function() {
              var modeCreator;
              Cipher.reset.call(this);
              var cfg = this.cfg;
              var iv = cfg.iv;
              var mode = cfg.mode;
              if (this._xformMode == this._ENC_XFORM_MODE) {
                modeCreator = mode.createEncryptor;
              } else {
                modeCreator = mode.createDecryptor;
                this._minBufferSize = 1;
              }
              if (this._mode && this._mode.__creator == modeCreator) {
                this._mode.init(this, iv && iv.words);
              } else {
                this._mode = modeCreator.call(mode, this, iv && iv.words);
                this._mode.__creator = modeCreator;
              }
            },
            _doProcessBlock: function(words2, offset) {
              this._mode.processBlock(words2, offset);
            },
            _doFinalize: function() {
              var finalProcessedBlocks;
              var padding2 = this.cfg.padding;
              if (this._xformMode == this._ENC_XFORM_MODE) {
                padding2.pad(this._data, this.blockSize);
                finalProcessedBlocks = this._process(true);
              } else {
                finalProcessedBlocks = this._process(true);
                padding2.unpad(finalProcessedBlocks);
              }
              return finalProcessedBlocks;
            },
            blockSize: 128 / 32
          });
          var CipherParams = C_lib.CipherParams = Base.extend({
            init: function(cipherParams) {
              this.mixIn(cipherParams);
            },
            toString: function(formatter) {
              return (formatter || this.formatter).stringify(this);
            }
          });
          var C_format = C2.format = {};
          var OpenSSLFormatter = C_format.OpenSSL = {
            stringify: function(cipherParams) {
              var wordArray;
              var ciphertext = cipherParams.ciphertext;
              var salt = cipherParams.salt;
              if (salt) {
                wordArray = WordArray.create([1398893684, 1701076831]).concat(salt).concat(ciphertext);
              } else {
                wordArray = ciphertext;
              }
              return wordArray.toString(Base64);
            },
            parse: function(openSSLStr) {
              var salt;
              var ciphertext = Base64.parse(openSSLStr);
              var ciphertextWords = ciphertext.words;
              if (ciphertextWords[0] == 1398893684 && ciphertextWords[1] == 1701076831) {
                salt = WordArray.create(ciphertextWords.slice(2, 4));
                ciphertextWords.splice(0, 4);
                ciphertext.sigBytes -= 16;
              }
              return CipherParams.create({ ciphertext, salt });
            }
          };
          var SerializableCipher = C_lib.SerializableCipher = Base.extend({
            cfg: Base.extend({
              format: OpenSSLFormatter
            }),
            encrypt: function(cipher, message, key, cfg) {
              cfg = this.cfg.extend(cfg);
              var encryptor = cipher.createEncryptor(key, cfg);
              var ciphertext = encryptor.finalize(message);
              var cipherCfg = encryptor.cfg;
              return CipherParams.create({
                ciphertext,
                key,
                iv: cipherCfg.iv,
                algorithm: cipher,
                mode: cipherCfg.mode,
                padding: cipherCfg.padding,
                blockSize: cipher.blockSize,
                formatter: cfg.format
              });
            },
            decrypt: function(cipher, ciphertext, key, cfg) {
              cfg = this.cfg.extend(cfg);
              ciphertext = this._parse(ciphertext, cfg.format);
              var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
              return plaintext;
            },
            _parse: function(ciphertext, format2) {
              if (typeof ciphertext == "string") {
                return format2.parse(ciphertext, this);
              } else {
                return ciphertext;
              }
            }
          });
          var C_kdf = C2.kdf = {};
          var OpenSSLKdf = C_kdf.OpenSSL = {
            execute: function(password, keySize, ivSize, salt) {
              if (!salt) {
                salt = WordArray.random(64 / 8);
              }
              var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);
              var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
              key.sigBytes = keySize * 4;
              return CipherParams.create({ key, iv, salt });
            }
          };
          var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
            cfg: SerializableCipher.cfg.extend({
              kdf: OpenSSLKdf
            }),
            encrypt: function(cipher, message, password, cfg) {
              cfg = this.cfg.extend(cfg);
              var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);
              cfg.iv = derivedParams.iv;
              var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);
              ciphertext.mixIn(derivedParams);
              return ciphertext;
            },
            decrypt: function(cipher, ciphertext, password, cfg) {
              cfg = this.cfg.extend(cfg);
              ciphertext = this._parse(ciphertext, cfg.format);
              var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);
              cfg.iv = derivedParams.iv;
              var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
              return plaintext;
            }
          });
        }();
      });
    })(cipherCore);
    return cipherCore.exports;
  }
  var modeCfb = { exports: {} };
  var hasRequiredModeCfb;
  function requireModeCfb() {
    if (hasRequiredModeCfb)
      return modeCfb.exports;
    hasRequiredModeCfb = 1;
    (function(module2, exports2) {
      (function(root2, factory, undef) {
        {
          module2.exports = factory(requireCore(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        CryptoJS2.mode.CFB = function() {
          var CFB = CryptoJS2.lib.BlockCipherMode.extend();
          CFB.Encryptor = CFB.extend({
            processBlock: function(words2, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              generateKeystreamAndEncrypt.call(this, words2, offset, blockSize, cipher);
              this._prevBlock = words2.slice(offset, offset + blockSize);
            }
          });
          CFB.Decryptor = CFB.extend({
            processBlock: function(words2, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              var thisBlock = words2.slice(offset, offset + blockSize);
              generateKeystreamAndEncrypt.call(this, words2, offset, blockSize, cipher);
              this._prevBlock = thisBlock;
            }
          });
          function generateKeystreamAndEncrypt(words2, offset, blockSize, cipher) {
            var keystream;
            var iv = this._iv;
            if (iv) {
              keystream = iv.slice(0);
              this._iv = void 0;
            } else {
              keystream = this._prevBlock;
            }
            cipher.encryptBlock(keystream, 0);
            for (var i2 = 0; i2 < blockSize; i2++) {
              words2[offset + i2] ^= keystream[i2];
            }
          }
          return CFB;
        }();
        return CryptoJS2.mode.CFB;
      });
    })(modeCfb);
    return modeCfb.exports;
  }
  var modeCtr = { exports: {} };
  var hasRequiredModeCtr;
  function requireModeCtr() {
    if (hasRequiredModeCtr)
      return modeCtr.exports;
    hasRequiredModeCtr = 1;
    (function(module2, exports2) {
      (function(root2, factory, undef) {
        {
          module2.exports = factory(requireCore(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        CryptoJS2.mode.CTR = function() {
          var CTR2 = CryptoJS2.lib.BlockCipherMode.extend();
          var Encryptor = CTR2.Encryptor = CTR2.extend({
            processBlock: function(words2, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              var iv = this._iv;
              var counter = this._counter;
              if (iv) {
                counter = this._counter = iv.slice(0);
                this._iv = void 0;
              }
              var keystream = counter.slice(0);
              cipher.encryptBlock(keystream, 0);
              counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;
              for (var i2 = 0; i2 < blockSize; i2++) {
                words2[offset + i2] ^= keystream[i2];
              }
            }
          });
          CTR2.Decryptor = Encryptor;
          return CTR2;
        }();
        return CryptoJS2.mode.CTR;
      });
    })(modeCtr);
    return modeCtr.exports;
  }
  var modeCtrGladman = { exports: {} };
  var hasRequiredModeCtrGladman;
  function requireModeCtrGladman() {
    if (hasRequiredModeCtrGladman)
      return modeCtrGladman.exports;
    hasRequiredModeCtrGladman = 1;
    (function(module2, exports2) {
      (function(root2, factory, undef) {
        {
          module2.exports = factory(requireCore(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        /** @preserve
         * Counter block mode compatible with  Dr Brian Gladman fileenc.c
         * derived from CryptoJS.mode.CTR
         * Jan Hruby jhruby.web@gmail.com
         */
        CryptoJS2.mode.CTRGladman = function() {
          var CTRGladman = CryptoJS2.lib.BlockCipherMode.extend();
          function incWord(word) {
            if ((word >> 24 & 255) === 255) {
              var b1 = word >> 16 & 255;
              var b2 = word >> 8 & 255;
              var b3 = word & 255;
              if (b1 === 255) {
                b1 = 0;
                if (b2 === 255) {
                  b2 = 0;
                  if (b3 === 255) {
                    b3 = 0;
                  } else {
                    ++b3;
                  }
                } else {
                  ++b2;
                }
              } else {
                ++b1;
              }
              word = 0;
              word += b1 << 16;
              word += b2 << 8;
              word += b3;
            } else {
              word += 1 << 24;
            }
            return word;
          }
          function incCounter(counter) {
            if ((counter[0] = incWord(counter[0])) === 0) {
              counter[1] = incWord(counter[1]);
            }
            return counter;
          }
          var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
            processBlock: function(words2, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              var iv = this._iv;
              var counter = this._counter;
              if (iv) {
                counter = this._counter = iv.slice(0);
                this._iv = void 0;
              }
              incCounter(counter);
              var keystream = counter.slice(0);
              cipher.encryptBlock(keystream, 0);
              for (var i2 = 0; i2 < blockSize; i2++) {
                words2[offset + i2] ^= keystream[i2];
              }
            }
          });
          CTRGladman.Decryptor = Encryptor;
          return CTRGladman;
        }();
        return CryptoJS2.mode.CTRGladman;
      });
    })(modeCtrGladman);
    return modeCtrGladman.exports;
  }
  var modeOfb = { exports: {} };
  var hasRequiredModeOfb;
  function requireModeOfb() {
    if (hasRequiredModeOfb)
      return modeOfb.exports;
    hasRequiredModeOfb = 1;
    (function(module2, exports2) {
      (function(root2, factory, undef) {
        {
          module2.exports = factory(requireCore(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        CryptoJS2.mode.OFB = function() {
          var OFB = CryptoJS2.lib.BlockCipherMode.extend();
          var Encryptor = OFB.Encryptor = OFB.extend({
            processBlock: function(words2, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              var iv = this._iv;
              var keystream = this._keystream;
              if (iv) {
                keystream = this._keystream = iv.slice(0);
                this._iv = void 0;
              }
              cipher.encryptBlock(keystream, 0);
              for (var i2 = 0; i2 < blockSize; i2++) {
                words2[offset + i2] ^= keystream[i2];
              }
            }
          });
          OFB.Decryptor = Encryptor;
          return OFB;
        }();
        return CryptoJS2.mode.OFB;
      });
    })(modeOfb);
    return modeOfb.exports;
  }
  var modeEcb = { exports: {} };
  var hasRequiredModeEcb;
  function requireModeEcb() {
    if (hasRequiredModeEcb)
      return modeEcb.exports;
    hasRequiredModeEcb = 1;
    (function(module2, exports2) {
      (function(root2, factory, undef) {
        {
          module2.exports = factory(requireCore(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        CryptoJS2.mode.ECB = function() {
          var ECB = CryptoJS2.lib.BlockCipherMode.extend();
          ECB.Encryptor = ECB.extend({
            processBlock: function(words2, offset) {
              this._cipher.encryptBlock(words2, offset);
            }
          });
          ECB.Decryptor = ECB.extend({
            processBlock: function(words2, offset) {
              this._cipher.decryptBlock(words2, offset);
            }
          });
          return ECB;
        }();
        return CryptoJS2.mode.ECB;
      });
    })(modeEcb);
    return modeEcb.exports;
  }
  var padAnsix923 = { exports: {} };
  var hasRequiredPadAnsix923;
  function requirePadAnsix923() {
    if (hasRequiredPadAnsix923)
      return padAnsix923.exports;
    hasRequiredPadAnsix923 = 1;
    (function(module2, exports2) {
      (function(root2, factory, undef) {
        {
          module2.exports = factory(requireCore(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        CryptoJS2.pad.AnsiX923 = {
          pad: function(data, blockSize) {
            var dataSigBytes = data.sigBytes;
            var blockSizeBytes = blockSize * 4;
            var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;
            var lastBytePos = dataSigBytes + nPaddingBytes - 1;
            data.clamp();
            data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;
            data.sigBytes += nPaddingBytes;
          },
          unpad: function(data) {
            var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
            data.sigBytes -= nPaddingBytes;
          }
        };
        return CryptoJS2.pad.Ansix923;
      });
    })(padAnsix923);
    return padAnsix923.exports;
  }
  var padIso10126 = { exports: {} };
  var hasRequiredPadIso10126;
  function requirePadIso10126() {
    if (hasRequiredPadIso10126)
      return padIso10126.exports;
    hasRequiredPadIso10126 = 1;
    (function(module2, exports2) {
      (function(root2, factory, undef) {
        {
          module2.exports = factory(requireCore(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        CryptoJS2.pad.Iso10126 = {
          pad: function(data, blockSize) {
            var blockSizeBytes = blockSize * 4;
            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
            data.concat(CryptoJS2.lib.WordArray.random(nPaddingBytes - 1)).concat(CryptoJS2.lib.WordArray.create([nPaddingBytes << 24], 1));
          },
          unpad: function(data) {
            var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
            data.sigBytes -= nPaddingBytes;
          }
        };
        return CryptoJS2.pad.Iso10126;
      });
    })(padIso10126);
    return padIso10126.exports;
  }
  var padIso97971 = { exports: {} };
  var hasRequiredPadIso97971;
  function requirePadIso97971() {
    if (hasRequiredPadIso97971)
      return padIso97971.exports;
    hasRequiredPadIso97971 = 1;
    (function(module2, exports2) {
      (function(root2, factory, undef) {
        {
          module2.exports = factory(requireCore(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        CryptoJS2.pad.Iso97971 = {
          pad: function(data, blockSize) {
            data.concat(CryptoJS2.lib.WordArray.create([2147483648], 1));
            CryptoJS2.pad.ZeroPadding.pad(data, blockSize);
          },
          unpad: function(data) {
            CryptoJS2.pad.ZeroPadding.unpad(data);
            data.sigBytes--;
          }
        };
        return CryptoJS2.pad.Iso97971;
      });
    })(padIso97971);
    return padIso97971.exports;
  }
  var padZeropadding = { exports: {} };
  var hasRequiredPadZeropadding;
  function requirePadZeropadding() {
    if (hasRequiredPadZeropadding)
      return padZeropadding.exports;
    hasRequiredPadZeropadding = 1;
    (function(module2, exports2) {
      (function(root2, factory, undef) {
        {
          module2.exports = factory(requireCore(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        CryptoJS2.pad.ZeroPadding = {
          pad: function(data, blockSize) {
            var blockSizeBytes = blockSize * 4;
            data.clamp();
            data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);
          },
          unpad: function(data) {
            var dataWords = data.words;
            var i2 = data.sigBytes - 1;
            for (var i2 = data.sigBytes - 1; i2 >= 0; i2--) {
              if (dataWords[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255) {
                data.sigBytes = i2 + 1;
                break;
              }
            }
          }
        };
        return CryptoJS2.pad.ZeroPadding;
      });
    })(padZeropadding);
    return padZeropadding.exports;
  }
  var padNopadding = { exports: {} };
  var hasRequiredPadNopadding;
  function requirePadNopadding() {
    if (hasRequiredPadNopadding)
      return padNopadding.exports;
    hasRequiredPadNopadding = 1;
    (function(module2, exports2) {
      (function(root2, factory, undef) {
        {
          module2.exports = factory(requireCore(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        CryptoJS2.pad.NoPadding = {
          pad: function() {
          },
          unpad: function() {
          }
        };
        return CryptoJS2.pad.NoPadding;
      });
    })(padNopadding);
    return padNopadding.exports;
  }
  var formatHex = { exports: {} };
  var hasRequiredFormatHex;
  function requireFormatHex() {
    if (hasRequiredFormatHex)
      return formatHex.exports;
    hasRequiredFormatHex = 1;
    (function(module2, exports2) {
      (function(root2, factory, undef) {
        {
          module2.exports = factory(requireCore(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function(undefined$1) {
          var C2 = CryptoJS2;
          var C_lib = C2.lib;
          var CipherParams = C_lib.CipherParams;
          var C_enc = C2.enc;
          var Hex = C_enc.Hex;
          var C_format = C2.format;
          C_format.Hex = {
            stringify: function(cipherParams) {
              return cipherParams.ciphertext.toString(Hex);
            },
            parse: function(input) {
              var ciphertext = Hex.parse(input);
              return CipherParams.create({ ciphertext });
            }
          };
        })();
        return CryptoJS2.format.Hex;
      });
    })(formatHex);
    return formatHex.exports;
  }
  var aes = { exports: {} };
  var hasRequiredAes;
  function requireAes() {
    if (hasRequiredAes)
      return aes.exports;
    hasRequiredAes = 1;
    (function(module2, exports2) {
      (function(root2, factory, undef) {
        {
          module2.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function() {
          var C2 = CryptoJS2;
          var C_lib = C2.lib;
          var BlockCipher = C_lib.BlockCipher;
          var C_algo = C2.algo;
          var SBOX = [];
          var INV_SBOX = [];
          var SUB_MIX_0 = [];
          var SUB_MIX_1 = [];
          var SUB_MIX_2 = [];
          var SUB_MIX_3 = [];
          var INV_SUB_MIX_0 = [];
          var INV_SUB_MIX_1 = [];
          var INV_SUB_MIX_2 = [];
          var INV_SUB_MIX_3 = [];
          (function() {
            var d2 = [];
            for (var i2 = 0; i2 < 256; i2++) {
              if (i2 < 128) {
                d2[i2] = i2 << 1;
              } else {
                d2[i2] = i2 << 1 ^ 283;
              }
            }
            var x2 = 0;
            var xi = 0;
            for (var i2 = 0; i2 < 256; i2++) {
              var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
              sx = sx >>> 8 ^ sx & 255 ^ 99;
              SBOX[x2] = sx;
              INV_SBOX[sx] = x2;
              var x22 = d2[x2];
              var x4 = d2[x22];
              var x8 = d2[x4];
              var t2 = d2[sx] * 257 ^ sx * 16843008;
              SUB_MIX_0[x2] = t2 << 24 | t2 >>> 8;
              SUB_MIX_1[x2] = t2 << 16 | t2 >>> 16;
              SUB_MIX_2[x2] = t2 << 8 | t2 >>> 24;
              SUB_MIX_3[x2] = t2;
              var t2 = x8 * 16843009 ^ x4 * 65537 ^ x22 * 257 ^ x2 * 16843008;
              INV_SUB_MIX_0[sx] = t2 << 24 | t2 >>> 8;
              INV_SUB_MIX_1[sx] = t2 << 16 | t2 >>> 16;
              INV_SUB_MIX_2[sx] = t2 << 8 | t2 >>> 24;
              INV_SUB_MIX_3[sx] = t2;
              if (!x2) {
                x2 = xi = 1;
              } else {
                x2 = x22 ^ d2[d2[d2[x8 ^ x22]]];
                xi ^= d2[d2[xi]];
              }
            }
          })();
          var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
          var AES2 = C_algo.AES = BlockCipher.extend({
            _doReset: function() {
              var t2;
              if (this._nRounds && this._keyPriorReset === this._key) {
                return;
              }
              var key = this._keyPriorReset = this._key;
              var keyWords = key.words;
              var keySize = key.sigBytes / 4;
              var nRounds = this._nRounds = keySize + 6;
              var ksRows = (nRounds + 1) * 4;
              var keySchedule = this._keySchedule = [];
              for (var ksRow = 0; ksRow < ksRows; ksRow++) {
                if (ksRow < keySize) {
                  keySchedule[ksRow] = keyWords[ksRow];
                } else {
                  t2 = keySchedule[ksRow - 1];
                  if (!(ksRow % keySize)) {
                    t2 = t2 << 8 | t2 >>> 24;
                    t2 = SBOX[t2 >>> 24] << 24 | SBOX[t2 >>> 16 & 255] << 16 | SBOX[t2 >>> 8 & 255] << 8 | SBOX[t2 & 255];
                    t2 ^= RCON[ksRow / keySize | 0] << 24;
                  } else if (keySize > 6 && ksRow % keySize == 4) {
                    t2 = SBOX[t2 >>> 24] << 24 | SBOX[t2 >>> 16 & 255] << 16 | SBOX[t2 >>> 8 & 255] << 8 | SBOX[t2 & 255];
                  }
                  keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t2;
                }
              }
              var invKeySchedule = this._invKeySchedule = [];
              for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
                var ksRow = ksRows - invKsRow;
                if (invKsRow % 4) {
                  var t2 = keySchedule[ksRow];
                } else {
                  var t2 = keySchedule[ksRow - 4];
                }
                if (invKsRow < 4 || ksRow <= 4) {
                  invKeySchedule[invKsRow] = t2;
                } else {
                  invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t2 >>> 24]] ^ INV_SUB_MIX_1[SBOX[t2 >>> 16 & 255]] ^ INV_SUB_MIX_2[SBOX[t2 >>> 8 & 255]] ^ INV_SUB_MIX_3[SBOX[t2 & 255]];
                }
              }
            },
            encryptBlock: function(M2, offset) {
              this._doCryptBlock(M2, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
            },
            decryptBlock: function(M2, offset) {
              var t2 = M2[offset + 1];
              M2[offset + 1] = M2[offset + 3];
              M2[offset + 3] = t2;
              this._doCryptBlock(M2, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
              var t2 = M2[offset + 1];
              M2[offset + 1] = M2[offset + 3];
              M2[offset + 3] = t2;
            },
            _doCryptBlock: function(M2, offset, keySchedule, SUB_MIX_02, SUB_MIX_12, SUB_MIX_22, SUB_MIX_32, SBOX2) {
              var nRounds = this._nRounds;
              var s0 = M2[offset] ^ keySchedule[0];
              var s1 = M2[offset + 1] ^ keySchedule[1];
              var s2 = M2[offset + 2] ^ keySchedule[2];
              var s3 = M2[offset + 3] ^ keySchedule[3];
              var ksRow = 4;
              for (var round = 1; round < nRounds; round++) {
                var t0 = SUB_MIX_02[s0 >>> 24] ^ SUB_MIX_12[s1 >>> 16 & 255] ^ SUB_MIX_22[s2 >>> 8 & 255] ^ SUB_MIX_32[s3 & 255] ^ keySchedule[ksRow++];
                var t1 = SUB_MIX_02[s1 >>> 24] ^ SUB_MIX_12[s2 >>> 16 & 255] ^ SUB_MIX_22[s3 >>> 8 & 255] ^ SUB_MIX_32[s0 & 255] ^ keySchedule[ksRow++];
                var t2 = SUB_MIX_02[s2 >>> 24] ^ SUB_MIX_12[s3 >>> 16 & 255] ^ SUB_MIX_22[s0 >>> 8 & 255] ^ SUB_MIX_32[s1 & 255] ^ keySchedule[ksRow++];
                var t3 = SUB_MIX_02[s3 >>> 24] ^ SUB_MIX_12[s0 >>> 16 & 255] ^ SUB_MIX_22[s1 >>> 8 & 255] ^ SUB_MIX_32[s2 & 255] ^ keySchedule[ksRow++];
                s0 = t0;
                s1 = t1;
                s2 = t2;
                s3 = t3;
              }
              var t0 = (SBOX2[s0 >>> 24] << 24 | SBOX2[s1 >>> 16 & 255] << 16 | SBOX2[s2 >>> 8 & 255] << 8 | SBOX2[s3 & 255]) ^ keySchedule[ksRow++];
              var t1 = (SBOX2[s1 >>> 24] << 24 | SBOX2[s2 >>> 16 & 255] << 16 | SBOX2[s3 >>> 8 & 255] << 8 | SBOX2[s0 & 255]) ^ keySchedule[ksRow++];
              var t2 = (SBOX2[s2 >>> 24] << 24 | SBOX2[s3 >>> 16 & 255] << 16 | SBOX2[s0 >>> 8 & 255] << 8 | SBOX2[s1 & 255]) ^ keySchedule[ksRow++];
              var t3 = (SBOX2[s3 >>> 24] << 24 | SBOX2[s0 >>> 16 & 255] << 16 | SBOX2[s1 >>> 8 & 255] << 8 | SBOX2[s2 & 255]) ^ keySchedule[ksRow++];
              M2[offset] = t0;
              M2[offset + 1] = t1;
              M2[offset + 2] = t2;
              M2[offset + 3] = t3;
            },
            keySize: 256 / 32
          });
          C2.AES = BlockCipher._createHelper(AES2);
        })();
        return CryptoJS2.AES;
      });
    })(aes);
    return aes.exports;
  }
  var tripledes = { exports: {} };
  var hasRequiredTripledes;
  function requireTripledes() {
    if (hasRequiredTripledes)
      return tripledes.exports;
    hasRequiredTripledes = 1;
    (function(module2, exports2) {
      (function(root2, factory, undef) {
        {
          module2.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function() {
          var C2 = CryptoJS2;
          var C_lib = C2.lib;
          var WordArray = C_lib.WordArray;
          var BlockCipher = C_lib.BlockCipher;
          var C_algo = C2.algo;
          var PC1 = [
            57,
            49,
            41,
            33,
            25,
            17,
            9,
            1,
            58,
            50,
            42,
            34,
            26,
            18,
            10,
            2,
            59,
            51,
            43,
            35,
            27,
            19,
            11,
            3,
            60,
            52,
            44,
            36,
            63,
            55,
            47,
            39,
            31,
            23,
            15,
            7,
            62,
            54,
            46,
            38,
            30,
            22,
            14,
            6,
            61,
            53,
            45,
            37,
            29,
            21,
            13,
            5,
            28,
            20,
            12,
            4
          ];
          var PC2 = [
            14,
            17,
            11,
            24,
            1,
            5,
            3,
            28,
            15,
            6,
            21,
            10,
            23,
            19,
            12,
            4,
            26,
            8,
            16,
            7,
            27,
            20,
            13,
            2,
            41,
            52,
            31,
            37,
            47,
            55,
            30,
            40,
            51,
            45,
            33,
            48,
            44,
            49,
            39,
            56,
            34,
            53,
            46,
            42,
            50,
            36,
            29,
            32
          ];
          var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];
          var SBOX_P = [
            {
              0: 8421888,
              268435456: 32768,
              536870912: 8421378,
              805306368: 2,
              1073741824: 512,
              1342177280: 8421890,
              1610612736: 8389122,
              1879048192: 8388608,
              2147483648: 514,
              2415919104: 8389120,
              2684354560: 33280,
              2952790016: 8421376,
              3221225472: 32770,
              3489660928: 8388610,
              3758096384: 0,
              4026531840: 33282,
              134217728: 0,
              402653184: 8421890,
              671088640: 33282,
              939524096: 32768,
              1207959552: 8421888,
              1476395008: 512,
              1744830464: 8421378,
              2013265920: 2,
              2281701376: 8389120,
              2550136832: 33280,
              2818572288: 8421376,
              3087007744: 8389122,
              3355443200: 8388610,
              3623878656: 32770,
              3892314112: 514,
              4160749568: 8388608,
              1: 32768,
              268435457: 2,
              536870913: 8421888,
              805306369: 8388608,
              1073741825: 8421378,
              1342177281: 33280,
              1610612737: 512,
              1879048193: 8389122,
              2147483649: 8421890,
              2415919105: 8421376,
              2684354561: 8388610,
              2952790017: 33282,
              3221225473: 514,
              3489660929: 8389120,
              3758096385: 32770,
              4026531841: 0,
              134217729: 8421890,
              402653185: 8421376,
              671088641: 8388608,
              939524097: 512,
              1207959553: 32768,
              1476395009: 8388610,
              1744830465: 2,
              2013265921: 33282,
              2281701377: 32770,
              2550136833: 8389122,
              2818572289: 514,
              3087007745: 8421888,
              3355443201: 8389120,
              3623878657: 0,
              3892314113: 33280,
              4160749569: 8421378
            },
            {
              0: 1074282512,
              16777216: 16384,
              33554432: 524288,
              50331648: 1074266128,
              67108864: 1073741840,
              83886080: 1074282496,
              100663296: 1073758208,
              117440512: 16,
              134217728: 540672,
              150994944: 1073758224,
              167772160: 1073741824,
              184549376: 540688,
              201326592: 524304,
              218103808: 0,
              234881024: 16400,
              251658240: 1074266112,
              8388608: 1073758208,
              25165824: 540688,
              41943040: 16,
              58720256: 1073758224,
              75497472: 1074282512,
              92274688: 1073741824,
              109051904: 524288,
              125829120: 1074266128,
              142606336: 524304,
              159383552: 0,
              176160768: 16384,
              192937984: 1074266112,
              209715200: 1073741840,
              226492416: 540672,
              243269632: 1074282496,
              260046848: 16400,
              268435456: 0,
              285212672: 1074266128,
              301989888: 1073758224,
              318767104: 1074282496,
              335544320: 1074266112,
              352321536: 16,
              369098752: 540688,
              385875968: 16384,
              402653184: 16400,
              419430400: 524288,
              436207616: 524304,
              452984832: 1073741840,
              469762048: 540672,
              486539264: 1073758208,
              503316480: 1073741824,
              520093696: 1074282512,
              276824064: 540688,
              293601280: 524288,
              310378496: 1074266112,
              327155712: 16384,
              343932928: 1073758208,
              360710144: 1074282512,
              377487360: 16,
              394264576: 1073741824,
              411041792: 1074282496,
              427819008: 1073741840,
              444596224: 1073758224,
              461373440: 524304,
              478150656: 0,
              494927872: 16400,
              511705088: 1074266128,
              528482304: 540672
            },
            {
              0: 260,
              1048576: 0,
              2097152: 67109120,
              3145728: 65796,
              4194304: 65540,
              5242880: 67108868,
              6291456: 67174660,
              7340032: 67174400,
              8388608: 67108864,
              9437184: 67174656,
              10485760: 65792,
              11534336: 67174404,
              12582912: 67109124,
              13631488: 65536,
              14680064: 4,
              15728640: 256,
              524288: 67174656,
              1572864: 67174404,
              2621440: 0,
              3670016: 67109120,
              4718592: 67108868,
              5767168: 65536,
              6815744: 65540,
              7864320: 260,
              8912896: 4,
              9961472: 256,
              11010048: 67174400,
              12058624: 65796,
              13107200: 65792,
              14155776: 67109124,
              15204352: 67174660,
              16252928: 67108864,
              16777216: 67174656,
              17825792: 65540,
              18874368: 65536,
              19922944: 67109120,
              20971520: 256,
              22020096: 67174660,
              23068672: 67108868,
              24117248: 0,
              25165824: 67109124,
              26214400: 67108864,
              27262976: 4,
              28311552: 65792,
              29360128: 67174400,
              30408704: 260,
              31457280: 65796,
              32505856: 67174404,
              17301504: 67108864,
              18350080: 260,
              19398656: 67174656,
              20447232: 0,
              21495808: 65540,
              22544384: 67109120,
              23592960: 256,
              24641536: 67174404,
              25690112: 65536,
              26738688: 67174660,
              27787264: 65796,
              28835840: 67108868,
              29884416: 67109124,
              30932992: 67174400,
              31981568: 4,
              33030144: 65792
            },
            {
              0: 2151682048,
              65536: 2147487808,
              131072: 4198464,
              196608: 2151677952,
              262144: 0,
              327680: 4198400,
              393216: 2147483712,
              458752: 4194368,
              524288: 2147483648,
              589824: 4194304,
              655360: 64,
              720896: 2147487744,
              786432: 2151678016,
              851968: 4160,
              917504: 4096,
              983040: 2151682112,
              32768: 2147487808,
              98304: 64,
              163840: 2151678016,
              229376: 2147487744,
              294912: 4198400,
              360448: 2151682112,
              425984: 0,
              491520: 2151677952,
              557056: 4096,
              622592: 2151682048,
              688128: 4194304,
              753664: 4160,
              819200: 2147483648,
              884736: 4194368,
              950272: 4198464,
              1015808: 2147483712,
              1048576: 4194368,
              1114112: 4198400,
              1179648: 2147483712,
              1245184: 0,
              1310720: 4160,
              1376256: 2151678016,
              1441792: 2151682048,
              1507328: 2147487808,
              1572864: 2151682112,
              1638400: 2147483648,
              1703936: 2151677952,
              1769472: 4198464,
              1835008: 2147487744,
              1900544: 4194304,
              1966080: 64,
              2031616: 4096,
              1081344: 2151677952,
              1146880: 2151682112,
              1212416: 0,
              1277952: 4198400,
              1343488: 4194368,
              1409024: 2147483648,
              1474560: 2147487808,
              1540096: 64,
              1605632: 2147483712,
              1671168: 4096,
              1736704: 2147487744,
              1802240: 2151678016,
              1867776: 4160,
              1933312: 2151682048,
              1998848: 4194304,
              2064384: 4198464
            },
            {
              0: 128,
              4096: 17039360,
              8192: 262144,
              12288: 536870912,
              16384: 537133184,
              20480: 16777344,
              24576: 553648256,
              28672: 262272,
              32768: 16777216,
              36864: 537133056,
              40960: 536871040,
              45056: 553910400,
              49152: 553910272,
              53248: 0,
              57344: 17039488,
              61440: 553648128,
              2048: 17039488,
              6144: 553648256,
              10240: 128,
              14336: 17039360,
              18432: 262144,
              22528: 537133184,
              26624: 553910272,
              30720: 536870912,
              34816: 537133056,
              38912: 0,
              43008: 553910400,
              47104: 16777344,
              51200: 536871040,
              55296: 553648128,
              59392: 16777216,
              63488: 262272,
              65536: 262144,
              69632: 128,
              73728: 536870912,
              77824: 553648256,
              81920: 16777344,
              86016: 553910272,
              90112: 537133184,
              94208: 16777216,
              98304: 553910400,
              102400: 553648128,
              106496: 17039360,
              110592: 537133056,
              114688: 262272,
              118784: 536871040,
              122880: 0,
              126976: 17039488,
              67584: 553648256,
              71680: 16777216,
              75776: 17039360,
              79872: 537133184,
              83968: 536870912,
              88064: 17039488,
              92160: 128,
              96256: 553910272,
              100352: 262272,
              104448: 553910400,
              108544: 0,
              112640: 553648128,
              116736: 16777344,
              120832: 262144,
              124928: 537133056,
              129024: 536871040
            },
            {
              0: 268435464,
              256: 8192,
              512: 270532608,
              768: 270540808,
              1024: 268443648,
              1280: 2097152,
              1536: 2097160,
              1792: 268435456,
              2048: 0,
              2304: 268443656,
              2560: 2105344,
              2816: 8,
              3072: 270532616,
              3328: 2105352,
              3584: 8200,
              3840: 270540800,
              128: 270532608,
              384: 270540808,
              640: 8,
              896: 2097152,
              1152: 2105352,
              1408: 268435464,
              1664: 268443648,
              1920: 8200,
              2176: 2097160,
              2432: 8192,
              2688: 268443656,
              2944: 270532616,
              3200: 0,
              3456: 270540800,
              3712: 2105344,
              3968: 268435456,
              4096: 268443648,
              4352: 270532616,
              4608: 270540808,
              4864: 8200,
              5120: 2097152,
              5376: 268435456,
              5632: 268435464,
              5888: 2105344,
              6144: 2105352,
              6400: 0,
              6656: 8,
              6912: 270532608,
              7168: 8192,
              7424: 268443656,
              7680: 270540800,
              7936: 2097160,
              4224: 8,
              4480: 2105344,
              4736: 2097152,
              4992: 268435464,
              5248: 268443648,
              5504: 8200,
              5760: 270540808,
              6016: 270532608,
              6272: 270540800,
              6528: 270532616,
              6784: 8192,
              7040: 2105352,
              7296: 2097160,
              7552: 0,
              7808: 268435456,
              8064: 268443656
            },
            {
              0: 1048576,
              16: 33555457,
              32: 1024,
              48: 1049601,
              64: 34604033,
              80: 0,
              96: 1,
              112: 34603009,
              128: 33555456,
              144: 1048577,
              160: 33554433,
              176: 34604032,
              192: 34603008,
              208: 1025,
              224: 1049600,
              240: 33554432,
              8: 34603009,
              24: 0,
              40: 33555457,
              56: 34604032,
              72: 1048576,
              88: 33554433,
              104: 33554432,
              120: 1025,
              136: 1049601,
              152: 33555456,
              168: 34603008,
              184: 1048577,
              200: 1024,
              216: 34604033,
              232: 1,
              248: 1049600,
              256: 33554432,
              272: 1048576,
              288: 33555457,
              304: 34603009,
              320: 1048577,
              336: 33555456,
              352: 34604032,
              368: 1049601,
              384: 1025,
              400: 34604033,
              416: 1049600,
              432: 1,
              448: 0,
              464: 34603008,
              480: 33554433,
              496: 1024,
              264: 1049600,
              280: 33555457,
              296: 34603009,
              312: 1,
              328: 33554432,
              344: 1048576,
              360: 1025,
              376: 34604032,
              392: 33554433,
              408: 34603008,
              424: 0,
              440: 34604033,
              456: 1049601,
              472: 1024,
              488: 33555456,
              504: 1048577
            },
            {
              0: 134219808,
              1: 131072,
              2: 134217728,
              3: 32,
              4: 131104,
              5: 134350880,
              6: 134350848,
              7: 2048,
              8: 134348800,
              9: 134219776,
              10: 133120,
              11: 134348832,
              12: 2080,
              13: 0,
              14: 134217760,
              15: 133152,
              2147483648: 2048,
              2147483649: 134350880,
              2147483650: 134219808,
              2147483651: 134217728,
              2147483652: 134348800,
              2147483653: 133120,
              2147483654: 133152,
              2147483655: 32,
              2147483656: 134217760,
              2147483657: 2080,
              2147483658: 131104,
              2147483659: 134350848,
              2147483660: 0,
              2147483661: 134348832,
              2147483662: 134219776,
              2147483663: 131072,
              16: 133152,
              17: 134350848,
              18: 32,
              19: 2048,
              20: 134219776,
              21: 134217760,
              22: 134348832,
              23: 131072,
              24: 0,
              25: 131104,
              26: 134348800,
              27: 134219808,
              28: 134350880,
              29: 133120,
              30: 2080,
              31: 134217728,
              2147483664: 131072,
              2147483665: 2048,
              2147483666: 134348832,
              2147483667: 133152,
              2147483668: 32,
              2147483669: 134348800,
              2147483670: 134217728,
              2147483671: 134219808,
              2147483672: 134350880,
              2147483673: 134217760,
              2147483674: 134219776,
              2147483675: 0,
              2147483676: 133120,
              2147483677: 2080,
              2147483678: 131104,
              2147483679: 134350848
            }
          ];
          var SBOX_MASK = [
            4160749569,
            528482304,
            33030144,
            2064384,
            129024,
            8064,
            504,
            2147483679
          ];
          var DES = C_algo.DES = BlockCipher.extend({
            _doReset: function() {
              var key = this._key;
              var keyWords = key.words;
              var keyBits = [];
              for (var i2 = 0; i2 < 56; i2++) {
                var keyBitPos = PC1[i2] - 1;
                keyBits[i2] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;
              }
              var subKeys = this._subKeys = [];
              for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
                var subKey = subKeys[nSubKey] = [];
                var bitShift = BIT_SHIFTS[nSubKey];
                for (var i2 = 0; i2 < 24; i2++) {
                  subKey[i2 / 6 | 0] |= keyBits[(PC2[i2] - 1 + bitShift) % 28] << 31 - i2 % 6;
                  subKey[4 + (i2 / 6 | 0)] |= keyBits[28 + (PC2[i2 + 24] - 1 + bitShift) % 28] << 31 - i2 % 6;
                }
                subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;
                for (var i2 = 1; i2 < 7; i2++) {
                  subKey[i2] = subKey[i2] >>> (i2 - 1) * 4 + 3;
                }
                subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;
              }
              var invSubKeys = this._invSubKeys = [];
              for (var i2 = 0; i2 < 16; i2++) {
                invSubKeys[i2] = subKeys[15 - i2];
              }
            },
            encryptBlock: function(M2, offset) {
              this._doCryptBlock(M2, offset, this._subKeys);
            },
            decryptBlock: function(M2, offset) {
              this._doCryptBlock(M2, offset, this._invSubKeys);
            },
            _doCryptBlock: function(M2, offset, subKeys) {
              this._lBlock = M2[offset];
              this._rBlock = M2[offset + 1];
              exchangeLR.call(this, 4, 252645135);
              exchangeLR.call(this, 16, 65535);
              exchangeRL.call(this, 2, 858993459);
              exchangeRL.call(this, 8, 16711935);
              exchangeLR.call(this, 1, 1431655765);
              for (var round = 0; round < 16; round++) {
                var subKey = subKeys[round];
                var lBlock = this._lBlock;
                var rBlock = this._rBlock;
                var f2 = 0;
                for (var i2 = 0; i2 < 8; i2++) {
                  f2 |= SBOX_P[i2][((rBlock ^ subKey[i2]) & SBOX_MASK[i2]) >>> 0];
                }
                this._lBlock = rBlock;
                this._rBlock = lBlock ^ f2;
              }
              var t2 = this._lBlock;
              this._lBlock = this._rBlock;
              this._rBlock = t2;
              exchangeLR.call(this, 1, 1431655765);
              exchangeRL.call(this, 8, 16711935);
              exchangeRL.call(this, 2, 858993459);
              exchangeLR.call(this, 16, 65535);
              exchangeLR.call(this, 4, 252645135);
              M2[offset] = this._lBlock;
              M2[offset + 1] = this._rBlock;
            },
            keySize: 64 / 32,
            ivSize: 64 / 32,
            blockSize: 64 / 32
          });
          function exchangeLR(offset, mask2) {
            var t2 = (this._lBlock >>> offset ^ this._rBlock) & mask2;
            this._rBlock ^= t2;
            this._lBlock ^= t2 << offset;
          }
          function exchangeRL(offset, mask2) {
            var t2 = (this._rBlock >>> offset ^ this._lBlock) & mask2;
            this._lBlock ^= t2;
            this._rBlock ^= t2 << offset;
          }
          C2.DES = BlockCipher._createHelper(DES);
          var TripleDES = C_algo.TripleDES = BlockCipher.extend({
            _doReset: function() {
              var key = this._key;
              var keyWords = key.words;
              if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {
                throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");
              }
              var key1 = keyWords.slice(0, 2);
              var key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);
              var key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);
              this._des1 = DES.createEncryptor(WordArray.create(key1));
              this._des2 = DES.createEncryptor(WordArray.create(key2));
              this._des3 = DES.createEncryptor(WordArray.create(key3));
            },
            encryptBlock: function(M2, offset) {
              this._des1.encryptBlock(M2, offset);
              this._des2.decryptBlock(M2, offset);
              this._des3.encryptBlock(M2, offset);
            },
            decryptBlock: function(M2, offset) {
              this._des3.decryptBlock(M2, offset);
              this._des2.encryptBlock(M2, offset);
              this._des1.decryptBlock(M2, offset);
            },
            keySize: 192 / 32,
            ivSize: 64 / 32,
            blockSize: 64 / 32
          });
          C2.TripleDES = BlockCipher._createHelper(TripleDES);
        })();
        return CryptoJS2.TripleDES;
      });
    })(tripledes);
    return tripledes.exports;
  }
  var rc4 = { exports: {} };
  var hasRequiredRc4;
  function requireRc4() {
    if (hasRequiredRc4)
      return rc4.exports;
    hasRequiredRc4 = 1;
    (function(module2, exports2) {
      (function(root2, factory, undef) {
        {
          module2.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function() {
          var C2 = CryptoJS2;
          var C_lib = C2.lib;
          var StreamCipher = C_lib.StreamCipher;
          var C_algo = C2.algo;
          var RC4 = C_algo.RC4 = StreamCipher.extend({
            _doReset: function() {
              var key = this._key;
              var keyWords = key.words;
              var keySigBytes = key.sigBytes;
              var S2 = this._S = [];
              for (var i2 = 0; i2 < 256; i2++) {
                S2[i2] = i2;
              }
              for (var i2 = 0, j2 = 0; i2 < 256; i2++) {
                var keyByteIndex = i2 % keySigBytes;
                var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 255;
                j2 = (j2 + S2[i2] + keyByte) % 256;
                var t2 = S2[i2];
                S2[i2] = S2[j2];
                S2[j2] = t2;
              }
              this._i = this._j = 0;
            },
            _doProcessBlock: function(M2, offset) {
              M2[offset] ^= generateKeystreamWord.call(this);
            },
            keySize: 256 / 32,
            ivSize: 0
          });
          function generateKeystreamWord() {
            var S2 = this._S;
            var i2 = this._i;
            var j2 = this._j;
            var keystreamWord = 0;
            for (var n2 = 0; n2 < 4; n2++) {
              i2 = (i2 + 1) % 256;
              j2 = (j2 + S2[i2]) % 256;
              var t2 = S2[i2];
              S2[i2] = S2[j2];
              S2[j2] = t2;
              keystreamWord |= S2[(S2[i2] + S2[j2]) % 256] << 24 - n2 * 8;
            }
            this._i = i2;
            this._j = j2;
            return keystreamWord;
          }
          C2.RC4 = StreamCipher._createHelper(RC4);
          var RC4Drop = C_algo.RC4Drop = RC4.extend({
            cfg: RC4.cfg.extend({
              drop: 192
            }),
            _doReset: function() {
              RC4._doReset.call(this);
              for (var i2 = this.cfg.drop; i2 > 0; i2--) {
                generateKeystreamWord.call(this);
              }
            }
          });
          C2.RC4Drop = StreamCipher._createHelper(RC4Drop);
        })();
        return CryptoJS2.RC4;
      });
    })(rc4);
    return rc4.exports;
  }
  var rabbit = { exports: {} };
  var hasRequiredRabbit;
  function requireRabbit() {
    if (hasRequiredRabbit)
      return rabbit.exports;
    hasRequiredRabbit = 1;
    (function(module2, exports2) {
      (function(root2, factory, undef) {
        {
          module2.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function() {
          var C2 = CryptoJS2;
          var C_lib = C2.lib;
          var StreamCipher = C_lib.StreamCipher;
          var C_algo = C2.algo;
          var S2 = [];
          var C_ = [];
          var G2 = [];
          var Rabbit = C_algo.Rabbit = StreamCipher.extend({
            _doReset: function() {
              var K2 = this._key.words;
              var iv = this.cfg.iv;
              for (var i2 = 0; i2 < 4; i2++) {
                K2[i2] = (K2[i2] << 8 | K2[i2] >>> 24) & 16711935 | (K2[i2] << 24 | K2[i2] >>> 8) & 4278255360;
              }
              var X2 = this._X = [
                K2[0],
                K2[3] << 16 | K2[2] >>> 16,
                K2[1],
                K2[0] << 16 | K2[3] >>> 16,
                K2[2],
                K2[1] << 16 | K2[0] >>> 16,
                K2[3],
                K2[2] << 16 | K2[1] >>> 16
              ];
              var C3 = this._C = [
                K2[2] << 16 | K2[2] >>> 16,
                K2[0] & 4294901760 | K2[1] & 65535,
                K2[3] << 16 | K2[3] >>> 16,
                K2[1] & 4294901760 | K2[2] & 65535,
                K2[0] << 16 | K2[0] >>> 16,
                K2[2] & 4294901760 | K2[3] & 65535,
                K2[1] << 16 | K2[1] >>> 16,
                K2[3] & 4294901760 | K2[0] & 65535
              ];
              this._b = 0;
              for (var i2 = 0; i2 < 4; i2++) {
                nextState.call(this);
              }
              for (var i2 = 0; i2 < 8; i2++) {
                C3[i2] ^= X2[i2 + 4 & 7];
              }
              if (iv) {
                var IV2 = iv.words;
                var IV_0 = IV2[0];
                var IV_1 = IV2[1];
                var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
                var i22 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
                var i1 = i0 >>> 16 | i22 & 4294901760;
                var i3 = i22 << 16 | i0 & 65535;
                C3[0] ^= i0;
                C3[1] ^= i1;
                C3[2] ^= i22;
                C3[3] ^= i3;
                C3[4] ^= i0;
                C3[5] ^= i1;
                C3[6] ^= i22;
                C3[7] ^= i3;
                for (var i2 = 0; i2 < 4; i2++) {
                  nextState.call(this);
                }
              }
            },
            _doProcessBlock: function(M2, offset) {
              var X2 = this._X;
              nextState.call(this);
              S2[0] = X2[0] ^ X2[5] >>> 16 ^ X2[3] << 16;
              S2[1] = X2[2] ^ X2[7] >>> 16 ^ X2[5] << 16;
              S2[2] = X2[4] ^ X2[1] >>> 16 ^ X2[7] << 16;
              S2[3] = X2[6] ^ X2[3] >>> 16 ^ X2[1] << 16;
              for (var i2 = 0; i2 < 4; i2++) {
                S2[i2] = (S2[i2] << 8 | S2[i2] >>> 24) & 16711935 | (S2[i2] << 24 | S2[i2] >>> 8) & 4278255360;
                M2[offset + i2] ^= S2[i2];
              }
            },
            blockSize: 128 / 32,
            ivSize: 64 / 32
          });
          function nextState() {
            var X2 = this._X;
            var C3 = this._C;
            for (var i2 = 0; i2 < 8; i2++) {
              C_[i2] = C3[i2];
            }
            C3[0] = C3[0] + 1295307597 + this._b | 0;
            C3[1] = C3[1] + 3545052371 + (C3[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
            C3[2] = C3[2] + 886263092 + (C3[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
            C3[3] = C3[3] + 1295307597 + (C3[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
            C3[4] = C3[4] + 3545052371 + (C3[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
            C3[5] = C3[5] + 886263092 + (C3[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
            C3[6] = C3[6] + 1295307597 + (C3[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
            C3[7] = C3[7] + 3545052371 + (C3[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
            this._b = C3[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
            for (var i2 = 0; i2 < 8; i2++) {
              var gx = X2[i2] + C3[i2];
              var ga = gx & 65535;
              var gb = gx >>> 16;
              var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
              var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
              G2[i2] = gh ^ gl;
            }
            X2[0] = G2[0] + (G2[7] << 16 | G2[7] >>> 16) + (G2[6] << 16 | G2[6] >>> 16) | 0;
            X2[1] = G2[1] + (G2[0] << 8 | G2[0] >>> 24) + G2[7] | 0;
            X2[2] = G2[2] + (G2[1] << 16 | G2[1] >>> 16) + (G2[0] << 16 | G2[0] >>> 16) | 0;
            X2[3] = G2[3] + (G2[2] << 8 | G2[2] >>> 24) + G2[1] | 0;
            X2[4] = G2[4] + (G2[3] << 16 | G2[3] >>> 16) + (G2[2] << 16 | G2[2] >>> 16) | 0;
            X2[5] = G2[5] + (G2[4] << 8 | G2[4] >>> 24) + G2[3] | 0;
            X2[6] = G2[6] + (G2[5] << 16 | G2[5] >>> 16) + (G2[4] << 16 | G2[4] >>> 16) | 0;
            X2[7] = G2[7] + (G2[6] << 8 | G2[6] >>> 24) + G2[5] | 0;
          }
          C2.Rabbit = StreamCipher._createHelper(Rabbit);
        })();
        return CryptoJS2.Rabbit;
      });
    })(rabbit);
    return rabbit.exports;
  }
  var rabbitLegacy = { exports: {} };
  var hasRequiredRabbitLegacy;
  function requireRabbitLegacy() {
    if (hasRequiredRabbitLegacy)
      return rabbitLegacy.exports;
    hasRequiredRabbitLegacy = 1;
    (function(module2, exports2) {
      (function(root2, factory, undef) {
        {
          module2.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function() {
          var C2 = CryptoJS2;
          var C_lib = C2.lib;
          var StreamCipher = C_lib.StreamCipher;
          var C_algo = C2.algo;
          var S2 = [];
          var C_ = [];
          var G2 = [];
          var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
            _doReset: function() {
              var K2 = this._key.words;
              var iv = this.cfg.iv;
              var X2 = this._X = [
                K2[0],
                K2[3] << 16 | K2[2] >>> 16,
                K2[1],
                K2[0] << 16 | K2[3] >>> 16,
                K2[2],
                K2[1] << 16 | K2[0] >>> 16,
                K2[3],
                K2[2] << 16 | K2[1] >>> 16
              ];
              var C3 = this._C = [
                K2[2] << 16 | K2[2] >>> 16,
                K2[0] & 4294901760 | K2[1] & 65535,
                K2[3] << 16 | K2[3] >>> 16,
                K2[1] & 4294901760 | K2[2] & 65535,
                K2[0] << 16 | K2[0] >>> 16,
                K2[2] & 4294901760 | K2[3] & 65535,
                K2[1] << 16 | K2[1] >>> 16,
                K2[3] & 4294901760 | K2[0] & 65535
              ];
              this._b = 0;
              for (var i2 = 0; i2 < 4; i2++) {
                nextState.call(this);
              }
              for (var i2 = 0; i2 < 8; i2++) {
                C3[i2] ^= X2[i2 + 4 & 7];
              }
              if (iv) {
                var IV2 = iv.words;
                var IV_0 = IV2[0];
                var IV_1 = IV2[1];
                var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
                var i22 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
                var i1 = i0 >>> 16 | i22 & 4294901760;
                var i3 = i22 << 16 | i0 & 65535;
                C3[0] ^= i0;
                C3[1] ^= i1;
                C3[2] ^= i22;
                C3[3] ^= i3;
                C3[4] ^= i0;
                C3[5] ^= i1;
                C3[6] ^= i22;
                C3[7] ^= i3;
                for (var i2 = 0; i2 < 4; i2++) {
                  nextState.call(this);
                }
              }
            },
            _doProcessBlock: function(M2, offset) {
              var X2 = this._X;
              nextState.call(this);
              S2[0] = X2[0] ^ X2[5] >>> 16 ^ X2[3] << 16;
              S2[1] = X2[2] ^ X2[7] >>> 16 ^ X2[5] << 16;
              S2[2] = X2[4] ^ X2[1] >>> 16 ^ X2[7] << 16;
              S2[3] = X2[6] ^ X2[3] >>> 16 ^ X2[1] << 16;
              for (var i2 = 0; i2 < 4; i2++) {
                S2[i2] = (S2[i2] << 8 | S2[i2] >>> 24) & 16711935 | (S2[i2] << 24 | S2[i2] >>> 8) & 4278255360;
                M2[offset + i2] ^= S2[i2];
              }
            },
            blockSize: 128 / 32,
            ivSize: 64 / 32
          });
          function nextState() {
            var X2 = this._X;
            var C3 = this._C;
            for (var i2 = 0; i2 < 8; i2++) {
              C_[i2] = C3[i2];
            }
            C3[0] = C3[0] + 1295307597 + this._b | 0;
            C3[1] = C3[1] + 3545052371 + (C3[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
            C3[2] = C3[2] + 886263092 + (C3[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
            C3[3] = C3[3] + 1295307597 + (C3[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
            C3[4] = C3[4] + 3545052371 + (C3[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
            C3[5] = C3[5] + 886263092 + (C3[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
            C3[6] = C3[6] + 1295307597 + (C3[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
            C3[7] = C3[7] + 3545052371 + (C3[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
            this._b = C3[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
            for (var i2 = 0; i2 < 8; i2++) {
              var gx = X2[i2] + C3[i2];
              var ga = gx & 65535;
              var gb = gx >>> 16;
              var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
              var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
              G2[i2] = gh ^ gl;
            }
            X2[0] = G2[0] + (G2[7] << 16 | G2[7] >>> 16) + (G2[6] << 16 | G2[6] >>> 16) | 0;
            X2[1] = G2[1] + (G2[0] << 8 | G2[0] >>> 24) + G2[7] | 0;
            X2[2] = G2[2] + (G2[1] << 16 | G2[1] >>> 16) + (G2[0] << 16 | G2[0] >>> 16) | 0;
            X2[3] = G2[3] + (G2[2] << 8 | G2[2] >>> 24) + G2[1] | 0;
            X2[4] = G2[4] + (G2[3] << 16 | G2[3] >>> 16) + (G2[2] << 16 | G2[2] >>> 16) | 0;
            X2[5] = G2[5] + (G2[4] << 8 | G2[4] >>> 24) + G2[3] | 0;
            X2[6] = G2[6] + (G2[5] << 16 | G2[5] >>> 16) + (G2[4] << 16 | G2[4] >>> 16) | 0;
            X2[7] = G2[7] + (G2[6] << 8 | G2[6] >>> 24) + G2[5] | 0;
          }
          C2.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
        })();
        return CryptoJS2.RabbitLegacy;
      });
    })(rabbitLegacy);
    return rabbitLegacy.exports;
  }
  (function(module2, exports2) {
    (function(root2, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireX64Core(), requireLibTypedarrays(), requireEncUtf16(), requireEncBase64(), requireEncBase64url(), requireMd5(), requireSha1(), requireSha256(), requireSha224(), requireSha512(), requireSha384(), requireSha3(), requireRipemd160(), requireHmac(), requirePbkdf2(), requireEvpkdf(), requireCipherCore(), requireModeCfb(), requireModeCtr(), requireModeCtrGladman(), requireModeOfb(), requireModeEcb(), requirePadAnsix923(), requirePadIso10126(), requirePadIso97971(), requirePadZeropadding(), requirePadNopadding(), requireFormatHex(), requireAes(), requireTripledes(), requireRc4(), requireRabbit(), requireRabbitLegacy());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      return CryptoJS2;
    });
  })(cryptoJs);
  const CryptoJS = cryptoJs.exports;
  const crypt = {
    ivStr: "yyuuide45678",
    aesEncrypt: function(data, password) {
      password = password ? password : "th33168";
      var key = CryptoJS.enc.Utf8.parse(password);
      var iv = CryptoJS.enc.Utf8.parse(this.ivStr);
      var encrypted = CryptoJS.AES.encrypt(data, key, {
        iv,
        mode: CryptoJS.mode.CBC,
        padding: CryptoJS.pad.Pkcs7
      });
      return encrypted.toString();
    },
    aesDecrypt: function(data, password) {
      password = password ? password : "th33168";
      var key = CryptoJS.enc.Utf8.parse(password);
      var iv = CryptoJS.enc.Utf8.parse(this.ivStr);
      var restoreBase64 = data.replace(/[\r\n]/g, "");
      var decrypt2 = CryptoJS.AES.decrypt(restoreBase64, key, {
        iv,
        mode: CryptoJS.mode.CBC,
        padding: CryptoJS.pad.Pkcs7
      });
      return CryptoJS.enc.Utf8.stringify(decrypt2).toString();
    }
  };
  const _sfc_main$9 = {
    data() {
      return {
        pin_code: "",
        phrases: ["____", "____", "____", "____", "____", "____", "____", "____", "____", "____", "____", "____"],
        wallet_info: {}
      };
    },
    onShow() {
      this.change();
    },
    methods: {
      copyPhrases() {
        uni.setClipboardData({
          data: this.phrases.join(" "),
          success: function() {
            uni.showToast({
              title: "The phrases has been copied",
              icon: "none"
            });
          },
          fail: function() {
            uni.showToast({
              title: "Failed to copy phrases"
            });
            formatAppLog("log", "at pages/setup-wallet/wallet-phrase.vue:66", "\u590D\u5236\u52A9\u8BB0\u8BCD\u5931\u8D25");
          }
        });
      },
      change() {
        this.pin_code = pin.checkPinStatus();
        if (!this.pin_code) {
          return;
        }
        this.changePhrases();
      },
      changePhrases() {
        let wallet = WALLET.createWallet();
        formatAppLog("log", "at pages/setup-wallet/wallet-phrase.vue:79", wallet.address);
        formatAppLog("log", "at pages/setup-wallet/wallet-phrase.vue:80", wallet.privateKey);
        let phrase_arr = wallet.mnemonic.phrase.split(" ");
        for (var i2 = 0; i2 < phrase_arr.length; i2++) {
          this.phrases[i2] = phrase_arr[i2];
        }
        this.wallet_info.address = wallet.address;
        this.wallet_info.phrases = wallet.mnemonic.phrase;
        WALLET.encryptWallet(wallet.privateKey, this.pin_code).then((res) => {
          formatAppLog("log", "at pages/setup-wallet/wallet-phrase.vue:88", res);
          this.wallet_info.keystore = JSON.parse(res);
        }, (res) => {
        });
      },
      toCheckPhrases() {
        try {
          var data = JSON.stringify(this.wallet_info);
          formatAppLog("log", "at pages/setup-wallet/wallet-phrase.vue:95", data);
          var encrypt_str = crypt.aesEncrypt(JSON.stringify(this.wallet_info), this.pin_code);
          formatAppLog("log", "at pages/setup-wallet/wallet-phrase.vue:97", encrypt_str);
          uni.setStorageSync("new_wallet_info", encrypt_str);
          uni.redirectTo({
            url: "/pages/setup-wallet/check-phrase"
          });
        } catch (e) {
          formatAppLog("log", "at pages/setup-wallet/wallet-phrase.vue:103", "\u5B58\u50A8new_wallet_info\u5931\u8D25");
        }
      }
    }
  };
  function _sfc_render$8(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "container" }, [
      vue.createElementVNode("view", { class: "secret-phrase-text" }, [
        vue.createElementVNode("view", { class: "secret-phrase-title font-first-title" }, "Your Secret Phrases"),
        vue.createElementVNode("view", { class: "secret-phrase-desc font-desc-black" }, "Please save these phrases, or you will lose your assets")
      ]),
      vue.createElementVNode("view", { class: "secret-phrase-list" }, [
        (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($data.phrases, (item, index) => {
          return vue.openBlock(), vue.createElementBlock("view", { class: "phrase-item" }, [
            vue.createElementVNode("view", { class: "phrase-item-index font-desc-gray" }, vue.toDisplayString(index + 1), 1),
            vue.createElementVNode("view", { class: "phrase-word font-second-title" }, vue.toDisplayString(item), 1)
          ]);
        }), 256))
      ]),
      vue.createElementVNode("view", { class: "func-area" }, [
        vue.createElementVNode("view", {
          class: "func-item",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.copyPhrases && $options.copyPhrases(...args))
        }, [
          vue.createElementVNode("image", {
            class: "func-icon",
            mode: "widthFix",
            src: "/static/img/copy.png"
          }),
          vue.createElementVNode("view", { class: "func-text font-desc-black" }, "Copy")
        ]),
        vue.createElementVNode("view", {
          class: "func-item",
          onClick: _cache[1] || (_cache[1] = (...args) => $options.change && $options.change(...args))
        }, [
          vue.createElementVNode("image", {
            class: "func-icon",
            mode: "widthFix",
            src: "/static/img/change.png"
          }),
          vue.createElementVNode("view", { class: "func-text font-desc-black" }, "Change")
        ])
      ]),
      vue.createElementVNode("view", { class: "secure-tip font-desc-gray" }, [
        vue.createElementVNode("view", null, "Never share your phrases with anyone"),
        vue.createElementVNode("view", null, "Store it securely in offline")
      ]),
      vue.createElementVNode("view", { class: "get-start" }, [
        vue.createElementVNode("button", {
          class: "form-btn",
          type: "primary",
          onClick: _cache[2] || (_cache[2] = (...args) => $options.toCheckPhrases && $options.toCheckPhrases(...args))
        }, "Get started")
      ])
    ]);
  }
  const PagesSetupWalletWalletPhrase = /* @__PURE__ */ _export_sfc(_sfc_main$9, [["render", _sfc_render$8], ["__file", "C:/Users/baba/Documents/HBuilderProjects/hello_demo/pages/setup-wallet/wallet-phrase.vue"]]);
  const _sfc_main$8 = {
    data() {
      return {
        pin_code: "",
        new_wallet_info: {
          "address": "",
          "name": "My wallet",
          "phrases": "",
          "keystore": ""
        }
      };
    },
    onShow() {
      this.pin_code = pin.checkPinStatus();
      if (!this.pin_code) {
        return;
      }
      var encryp_str = uni.getStorageSync("new_wallet_info");
      var decrypt_str = crypt.aesDecrypt(encryp_str, this.pin_code);
      this.new_wallet_info = JSON.parse(decrypt_str);
      if (!this.new_wallet_info) {
        uni.showModal({
          title: "Data exception, please contact admin",
          showCancel: false,
          confirmText: "Got it"
        });
      }
    },
    methods: {
      formSubmit: function(e) {
        if ("" == e.detail.value.fourth_word || "" == e.detail.value.ninth_word) {
          uni.showToast({
            title: "Please fill in the form",
            icon: "none"
          });
          return;
        }
        var phrases = this.new_wallet_info.phrases.split(" ");
        var fourth_word = e.detail.value.fourth_word.trim();
        var ninth_word = e.detail.value.ninth_word.trim();
        formatAppLog("log", "at pages/setup-wallet/check-phrase.vue:68", fourth_word + " " + ninth_word);
        formatAppLog("log", "at pages/setup-wallet/check-phrase.vue:69", phrases);
        if (phrases.length > 11 && phrases[3] == fourth_word && phrases[8] == ninth_word) {
          uni.showToast({
            title: "You have finished setting",
            icon: "none"
          });
          this.new_wallet_info.phrases = "";
          WALLET.saveWallet(this.new_wallet_info);
          uni.redirectTo({
            url: "/pages/index/wallet"
          });
          return;
        }
        uni.showToast({
          title: "Please check it",
          icon: "none"
        });
        return;
      }
    }
  };
  function _sfc_render$7(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "container" }, [
      vue.createElementVNode("view", { class: "secret-phrase-text" }, [
        vue.createElementVNode("view", { class: "secret-phrase-title font-first-title" }, "Check your phrases"),
        vue.createElementVNode("view", { class: "secret-phrase-desc font-desc-black" }, "Make sure you have backed up your phrases")
      ]),
      vue.createElementVNode("form", {
        onSubmit: _cache[0] || (_cache[0] = (...args) => $options.formSubmit && $options.formSubmit(...args))
      }, [
        vue.createElementVNode("view", { class: "check-list" }, [
          vue.createElementVNode("view", { class: "check-item" }, [
            vue.createElementVNode("view", { class: "check-desc form-item-desc" }, "What's the 4th word of your phrases"),
            vue.createElementVNode("input", {
              class: "form-input",
              type: "text",
              placeholder: "Enter the phrase",
              name: "fourth_word"
            })
          ]),
          vue.createElementVNode("view", { class: "check-item" }, [
            vue.createElementVNode("view", { class: "check-desc form-item-desc" }, "What's the 9th word of your phrases"),
            vue.createElementVNode("input", {
              class: "form-input",
              type: "text",
              placeholder: "Enter the phrase",
              name: "ninth_word"
            })
          ])
        ]),
        vue.createElementVNode("view", { class: "confirm-btn" }, [
          vue.createElementVNode("button", {
            "form-type": "submit",
            class: "form-btn",
            type: "primary"
          }, "Confirm")
        ])
      ], 32)
    ]);
  }
  const PagesSetupWalletCheckPhrase = /* @__PURE__ */ _export_sfc(_sfc_main$8, [["render", _sfc_render$7], ["__file", "C:/Users/baba/Documents/HBuilderProjects/hello_demo/pages/setup-wallet/check-phrase.vue"]]);
  class MPAnimation {
    constructor(options, _this) {
      this.options = options;
      this.animation = uni.createAnimation(options);
      this.currentStepAnimates = {};
      this.next = 0;
      this.$ = _this;
    }
    _nvuePushAnimates(type, args) {
      let aniObj = this.currentStepAnimates[this.next];
      let styles = {};
      if (!aniObj) {
        styles = {
          styles: {},
          config: {}
        };
      } else {
        styles = aniObj;
      }
      if (animateTypes1.includes(type)) {
        if (!styles.styles.transform) {
          styles.styles.transform = "";
        }
        let unit = "";
        if (type === "rotate") {
          unit = "deg";
        }
        styles.styles.transform += `${type}(${args + unit}) `;
      } else {
        styles.styles[type] = `${args}`;
      }
      this.currentStepAnimates[this.next] = styles;
    }
    _animateRun(styles = {}, config = {}) {
      let ref = this.$.$refs["ani"].ref;
      if (!ref)
        return;
      return new Promise((resolve, reject) => {
        nvueAnimation.transition(ref, {
          styles,
          ...config
        }, (res) => {
          resolve();
        });
      });
    }
    _nvueNextAnimate(animates, step = 0, fn2) {
      let obj = animates[step];
      if (obj) {
        let {
          styles,
          config
        } = obj;
        this._animateRun(styles, config).then(() => {
          step += 1;
          this._nvueNextAnimate(animates, step, fn2);
        });
      } else {
        this.currentStepAnimates = {};
        typeof fn2 === "function" && fn2();
        this.isEnd = true;
      }
    }
    step(config = {}) {
      this.animation.step(config);
      return this;
    }
    run(fn2) {
      this.$.animationData = this.animation.export();
      this.$.timer = setTimeout(() => {
        typeof fn2 === "function" && fn2();
      }, this.$.durationTime);
    }
  }
  const animateTypes1 = [
    "matrix",
    "matrix3d",
    "rotate",
    "rotate3d",
    "rotateX",
    "rotateY",
    "rotateZ",
    "scale",
    "scale3d",
    "scaleX",
    "scaleY",
    "scaleZ",
    "skew",
    "skewX",
    "skewY",
    "translate",
    "translate3d",
    "translateX",
    "translateY",
    "translateZ"
  ];
  const animateTypes2 = ["opacity", "backgroundColor"];
  const animateTypes3 = ["width", "height", "left", "right", "top", "bottom"];
  animateTypes1.concat(animateTypes2, animateTypes3).forEach((type) => {
    MPAnimation.prototype[type] = function(...args) {
      this.animation[type](...args);
      return this;
    };
  });
  function createAnimation(option, _this) {
    if (!_this)
      return;
    clearTimeout(_this.timer);
    return new MPAnimation(option, _this);
  }
  const _sfc_main$7 = {
    name: "uniTransition",
    emits: ["click", "change"],
    props: {
      show: {
        type: Boolean,
        default: false
      },
      modeClass: {
        type: [Array, String],
        default() {
          return "fade";
        }
      },
      duration: {
        type: Number,
        default: 300
      },
      styles: {
        type: Object,
        default() {
          return {};
        }
      },
      customClass: {
        type: String,
        default: ""
      }
    },
    data() {
      return {
        isShow: false,
        transform: "",
        opacity: 1,
        animationData: {},
        durationTime: 300,
        config: {}
      };
    },
    watch: {
      show: {
        handler(newVal) {
          if (newVal) {
            this.open();
          } else {
            if (this.isShow) {
              this.close();
            }
          }
        },
        immediate: true
      }
    },
    computed: {
      stylesObject() {
        let styles = {
          ...this.styles,
          "transition-duration": this.duration / 1e3 + "s"
        };
        let transform = "";
        for (let i2 in styles) {
          let line = this.toLine(i2);
          transform += line + ":" + styles[i2] + ";";
        }
        return transform;
      },
      transformStyles() {
        return "transform:" + this.transform + ";opacity:" + this.opacity + ";" + this.stylesObject;
      }
    },
    created() {
      this.config = {
        duration: this.duration,
        timingFunction: "ease",
        transformOrigin: "50% 50%",
        delay: 0
      };
      this.durationTime = this.duration;
    },
    methods: {
      init(obj = {}) {
        if (obj.duration) {
          this.durationTime = obj.duration;
        }
        this.animation = createAnimation(Object.assign(this.config, obj), this);
      },
      onClick() {
        this.$emit("click", {
          detail: this.isShow
        });
      },
      step(obj, config = {}) {
        if (!this.animation)
          return;
        for (let i2 in obj) {
          try {
            if (typeof obj[i2] === "object") {
              this.animation[i2](...obj[i2]);
            } else {
              this.animation[i2](obj[i2]);
            }
          } catch (e) {
            formatAppLog("error", "at uni_modules/uni-transition/components/uni-transition/uni-transition.vue:139", `\u65B9\u6CD5 ${i2} \u4E0D\u5B58\u5728`);
          }
        }
        this.animation.step(config);
        return this;
      },
      run(fn2) {
        if (!this.animation)
          return;
        this.animation.run(fn2);
      },
      open() {
        clearTimeout(this.timer);
        this.transform = "";
        this.isShow = true;
        let { opacity, transform } = this.styleInit(false);
        if (typeof opacity !== "undefined") {
          this.opacity = opacity;
        }
        this.transform = transform;
        this.$nextTick(() => {
          this.timer = setTimeout(() => {
            this.animation = createAnimation(this.config, this);
            this.tranfromInit(false).step();
            this.animation.run();
            this.$emit("change", {
              detail: this.isShow
            });
          }, 20);
        });
      },
      close(type) {
        if (!this.animation)
          return;
        this.tranfromInit(true).step().run(() => {
          this.isShow = false;
          this.animationData = null;
          this.animation = null;
          let { opacity, transform } = this.styleInit(false);
          this.opacity = opacity || 1;
          this.transform = transform;
          this.$emit("change", {
            detail: this.isShow
          });
        });
      },
      styleInit(type) {
        let styles = {
          transform: ""
        };
        let buildStyle = (type2, mode) => {
          if (mode === "fade") {
            styles.opacity = this.animationType(type2)[mode];
          } else {
            styles.transform += this.animationType(type2)[mode] + " ";
          }
        };
        if (typeof this.modeClass === "string") {
          buildStyle(type, this.modeClass);
        } else {
          this.modeClass.forEach((mode) => {
            buildStyle(type, mode);
          });
        }
        return styles;
      },
      tranfromInit(type) {
        let buildTranfrom = (type2, mode) => {
          let aniNum = null;
          if (mode === "fade") {
            aniNum = type2 ? 0 : 1;
          } else {
            aniNum = type2 ? "-100%" : "0";
            if (mode === "zoom-in") {
              aniNum = type2 ? 0.8 : 1;
            }
            if (mode === "zoom-out") {
              aniNum = type2 ? 1.2 : 1;
            }
            if (mode === "slide-right") {
              aniNum = type2 ? "100%" : "0";
            }
            if (mode === "slide-bottom") {
              aniNum = type2 ? "100%" : "0";
            }
          }
          this.animation[this.animationMode()[mode]](aniNum);
        };
        if (typeof this.modeClass === "string") {
          buildTranfrom(type, this.modeClass);
        } else {
          this.modeClass.forEach((mode) => {
            buildTranfrom(type, mode);
          });
        }
        return this.animation;
      },
      animationType(type) {
        return {
          fade: type ? 1 : 0,
          "slide-top": `translateY(${type ? "0" : "-100%"})`,
          "slide-right": `translateX(${type ? "0" : "100%"})`,
          "slide-bottom": `translateY(${type ? "0" : "100%"})`,
          "slide-left": `translateX(${type ? "0" : "-100%"})`,
          "zoom-in": `scaleX(${type ? 1 : 0.8}) scaleY(${type ? 1 : 0.8})`,
          "zoom-out": `scaleX(${type ? 1 : 1.2}) scaleY(${type ? 1 : 1.2})`
        };
      },
      animationMode() {
        return {
          fade: "opacity",
          "slide-top": "translateY",
          "slide-right": "translateX",
          "slide-bottom": "translateY",
          "slide-left": "translateX",
          "zoom-in": "scale",
          "zoom-out": "scale"
        };
      },
      toLine(name) {
        return name.replace(/([A-Z])/g, "-$1").toLowerCase();
      }
    }
  };
  function _sfc_render$6(_ctx, _cache, $props, $setup, $data, $options) {
    return $data.isShow ? (vue.openBlock(), vue.createElementBlock("view", {
      key: 0,
      ref: "ani",
      animation: $data.animationData,
      class: vue.normalizeClass($props.customClass),
      style: vue.normalizeStyle($options.transformStyles),
      onClick: _cache[0] || (_cache[0] = (...args) => $options.onClick && $options.onClick(...args))
    }, [
      vue.renderSlot(_ctx.$slots, "default")
    ], 14, ["animation"])) : vue.createCommentVNode("v-if", true);
  }
  const __easycom_0$1 = /* @__PURE__ */ _export_sfc(_sfc_main$7, [["render", _sfc_render$6], ["__file", "C:/Users/baba/Documents/HBuilderProjects/hello_demo/uni_modules/uni-transition/components/uni-transition/uni-transition.vue"]]);
  const _sfc_main$6 = {
    name: "uniPopup",
    components: {},
    emits: ["change", "maskClick"],
    props: {
      animation: {
        type: Boolean,
        default: true
      },
      type: {
        type: String,
        default: "center"
      },
      isMaskClick: {
        type: Boolean,
        default: null
      },
      maskClick: {
        type: Boolean,
        default: null
      },
      backgroundColor: {
        type: String,
        default: "none"
      },
      safeArea: {
        type: Boolean,
        default: true
      },
      maskBackgroundColor: {
        type: String,
        default: "rgba(0, 0, 0, 0.4)"
      }
    },
    watch: {
      type: {
        handler: function(type) {
          if (!this.config[type])
            return;
          this[this.config[type]](true);
        },
        immediate: true
      },
      isDesktop: {
        handler: function(newVal) {
          if (!this.config[newVal])
            return;
          this[this.config[this.type]](true);
        },
        immediate: true
      },
      maskClick: {
        handler: function(val) {
          this.mkclick = val;
        },
        immediate: true
      },
      isMaskClick: {
        handler: function(val) {
          this.mkclick = val;
        },
        immediate: true
      },
      showPopup(show) {
      }
    },
    data() {
      return {
        duration: 300,
        ani: [],
        showPopup: false,
        showTrans: false,
        popupWidth: 0,
        popupHeight: 0,
        config: {
          top: "top",
          bottom: "bottom",
          center: "center",
          left: "left",
          right: "right",
          message: "top",
          dialog: "center",
          share: "bottom"
        },
        maskClass: {
          position: "fixed",
          bottom: 0,
          top: 0,
          left: 0,
          right: 0,
          backgroundColor: "rgba(0, 0, 0, 0.4)"
        },
        transClass: {
          position: "fixed",
          left: 0,
          right: 0
        },
        maskShow: true,
        mkclick: true,
        popupstyle: this.isDesktop ? "fixforpc-top" : "top"
      };
    },
    computed: {
      isDesktop() {
        return this.popupWidth >= 500 && this.popupHeight >= 500;
      },
      bg() {
        if (this.backgroundColor === "" || this.backgroundColor === "none") {
          return "transparent";
        }
        return this.backgroundColor;
      }
    },
    mounted() {
      const fixSize = () => {
        const {
          windowWidth,
          windowHeight,
          windowTop,
          safeArea,
          screenHeight,
          safeAreaInsets
        } = uni.getSystemInfoSync();
        this.popupWidth = windowWidth;
        this.popupHeight = windowHeight + (windowTop || 0);
        if (safeArea && this.safeArea) {
          this.safeAreaInsets = safeAreaInsets.bottom;
        } else {
          this.safeAreaInsets = 0;
        }
      };
      fixSize();
    },
    unmounted() {
      this.setH5Visible();
    },
    created() {
      if (this.isMaskClick === null && this.maskClick === null) {
        this.mkclick = true;
      } else {
        this.mkclick = this.isMaskClick !== null ? this.isMaskClick : this.maskClick;
      }
      if (this.animation) {
        this.duration = 300;
      } else {
        this.duration = 0;
      }
      this.messageChild = null;
      this.clearPropagation = false;
      this.maskClass.backgroundColor = this.maskBackgroundColor;
    },
    methods: {
      setH5Visible() {
      },
      closeMask() {
        this.maskShow = false;
      },
      disableMask() {
        this.mkclick = false;
      },
      clear(e) {
        e.stopPropagation();
        this.clearPropagation = true;
      },
      open(direction) {
        if (this.showPopup) {
          clearTimeout(this.timer);
          this.showPopup = false;
        }
        let innerType = ["top", "center", "bottom", "left", "right", "message", "dialog", "share"];
        if (!(direction && innerType.indexOf(direction) !== -1)) {
          direction = this.type;
        }
        if (!this.config[direction]) {
          formatAppLog("error", "at uni_modules/uni-popup/components/uni-popup/uni-popup.vue:280", "\u7F3A\u5C11\u7C7B\u578B\uFF1A", direction);
          return;
        }
        this[this.config[direction]]();
        this.$emit("change", {
          show: true,
          type: direction
        });
      },
      close(type) {
        this.showTrans = false;
        this.$emit("change", {
          show: false,
          type: this.type
        });
        clearTimeout(this.timer);
        this.timer = setTimeout(() => {
          this.showPopup = false;
        }, 300);
      },
      touchstart() {
        this.clearPropagation = false;
      },
      onTap() {
        if (this.clearPropagation) {
          this.clearPropagation = false;
          return;
        }
        this.$emit("maskClick");
        if (!this.mkclick)
          return;
        this.close();
      },
      top(type) {
        this.popupstyle = this.isDesktop ? "fixforpc-top" : "top";
        this.ani = ["slide-top"];
        this.transClass = {
          position: "fixed",
          left: 0,
          right: 0,
          backgroundColor: this.bg
        };
        if (type)
          return;
        this.showPopup = true;
        this.showTrans = true;
        this.$nextTick(() => {
          if (this.messageChild && this.type === "message") {
            this.messageChild.timerClose();
          }
        });
      },
      bottom(type) {
        this.popupstyle = "bottom";
        this.ani = ["slide-bottom"];
        this.transClass = {
          position: "fixed",
          left: 0,
          right: 0,
          bottom: 0,
          paddingBottom: this.safeAreaInsets + "px",
          backgroundColor: this.bg
        };
        if (type)
          return;
        this.showPopup = true;
        this.showTrans = true;
      },
      center(type) {
        this.popupstyle = "center";
        this.ani = ["zoom-out", "fade"];
        this.transClass = {
          position: "fixed",
          display: "flex",
          flexDirection: "column",
          bottom: 0,
          left: 0,
          right: 0,
          top: 0,
          justifyContent: "center",
          alignItems: "center"
        };
        if (type)
          return;
        this.showPopup = true;
        this.showTrans = true;
      },
      left(type) {
        this.popupstyle = "left";
        this.ani = ["slide-left"];
        this.transClass = {
          position: "fixed",
          left: 0,
          bottom: 0,
          top: 0,
          backgroundColor: this.bg,
          display: "flex",
          flexDirection: "column"
        };
        if (type)
          return;
        this.showPopup = true;
        this.showTrans = true;
      },
      right(type) {
        this.popupstyle = "right";
        this.ani = ["slide-right"];
        this.transClass = {
          position: "fixed",
          bottom: 0,
          right: 0,
          top: 0,
          backgroundColor: this.bg,
          display: "flex",
          flexDirection: "column"
        };
        if (type)
          return;
        this.showPopup = true;
        this.showTrans = true;
      }
    }
  };
  function _sfc_render$5(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_transition = resolveEasycom(vue.resolveDynamicComponent("uni-transition"), __easycom_0$1);
    return $data.showPopup ? (vue.openBlock(), vue.createElementBlock("view", {
      key: 0,
      class: vue.normalizeClass(["uni-popup", [$data.popupstyle, $options.isDesktop ? "fixforpc-z-index" : ""]])
    }, [
      vue.createElementVNode("view", {
        onTouchstart: _cache[1] || (_cache[1] = (...args) => $options.touchstart && $options.touchstart(...args))
      }, [
        $data.maskShow ? (vue.openBlock(), vue.createBlock(_component_uni_transition, {
          key: "1",
          name: "mask",
          "mode-class": "fade",
          styles: $data.maskClass,
          duration: $data.duration,
          show: $data.showTrans,
          onClick: $options.onTap
        }, null, 8, ["styles", "duration", "show", "onClick"])) : vue.createCommentVNode("v-if", true),
        vue.createVNode(_component_uni_transition, {
          key: "2",
          "mode-class": $data.ani,
          name: "content",
          styles: $data.transClass,
          duration: $data.duration,
          show: $data.showTrans,
          onClick: $options.onTap
        }, {
          default: vue.withCtx(() => [
            vue.createElementVNode("view", {
              class: vue.normalizeClass(["uni-popup__wrapper", [$data.popupstyle]]),
              style: vue.normalizeStyle({ backgroundColor: $options.bg }),
              onClick: _cache[0] || (_cache[0] = (...args) => $options.clear && $options.clear(...args))
            }, [
              vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
            ], 6)
          ]),
          _: 3
        }, 8, ["mode-class", "styles", "duration", "show", "onClick"])
      ], 32)
    ], 2)) : vue.createCommentVNode("v-if", true);
  }
  const __easycom_2 = /* @__PURE__ */ _export_sfc(_sfc_main$6, [["render", _sfc_render$5], ["__scopeId", "data-v-4dd3c44b"], ["__file", "C:/Users/baba/Documents/HBuilderProjects/hello_demo/uni_modules/uni-popup/components/uni-popup/uni-popup.vue"]]);
  const _sfc_main$5 = {
    name: "wallet-list-popup",
    emits: ["change"],
    props: {
      pop_title: {
        type: String,
        required: true
      },
      wallet_list: {
        type: Array,
        default: [],
        required: true
      },
      selected_address: {
        type: String,
        default: "",
        required: false
      },
      show_setup_btn: {
        type: Boolean,
        default: false,
        required: false
      }
    },
    data() {
      return {};
    },
    methods: {
      show() {
        this.$refs.wallet_manage_popup.open("bottom");
      },
      changeWallet(address) {
        this.closeWalletList();
        this.$emit("change", {
          address
        });
      },
      closeWalletList() {
        this.$refs.wallet_manage_popup.close();
      }
    }
  };
  function _sfc_render$4(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_popup = resolveEasycom(vue.resolveDynamicComponent("uni-popup"), __easycom_2);
    return vue.openBlock(), vue.createElementBlock("view", { class: "wmp-wallet-list-popup" }, [
      vue.renderSlot(_ctx.$slots, "default", {}, void 0, true),
      vue.createVNode(_component_uni_popup, { ref: "wallet_manage_popup" }, {
        default: vue.withCtx(() => [
          vue.createElementVNode("view", { class: "wmp-popup-container" }, [
            vue.createElementVNode("view", { class: "wmp-popup-top-area" }, [
              vue.createElementVNode("view"),
              vue.createElementVNode("view", { class: "wmp-popup-title-area font-second-title" }, vue.toDisplayString($props.pop_title), 1),
              vue.createElementVNode("image", {
                class: "wmp-popup-close-area",
                mode: "widthFix",
                src: "/static/img/close.png",
                onClick: _cache[0] || (_cache[0] = (...args) => $options.closeWalletList && $options.closeWalletList(...args))
              })
            ]),
            vue.createElementVNode("view", { class: "wmp-popup-content-area" }, [
              (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($props.wallet_list, (item, index) => {
                return vue.openBlock(), vue.createElementBlock("view", {
                  class: vue.normalizeClass(["wmp-wallet-card", [item.address == $props.selected_address ? "wmp-selected-wallet" : "wmp-un-selected-wallet"]]),
                  onClick: ($event) => $options.changeWallet(item.address)
                }, [
                  vue.createElementVNode("view", { class: "wmp-wallet-card-line" }, [
                    vue.createElementVNode("view", { class: "wmp-wallet-name font-desc-black" }, vue.toDisplayString(item.name), 1)
                  ]),
                  vue.createElementVNode("view", { class: "wmp-wallet-card-line" }, [
                    vue.createElementVNode("view", { class: "wmp-address-info" }, [
                      vue.createElementVNode("view", { class: "wmp-wallet-address font-desc-black" }, vue.toDisplayString(item.address), 1)
                    ]),
                    vue.createElementVNode("view")
                  ])
                ], 10, ["onClick"]);
              }), 256))
            ]),
            $props.show_setup_btn ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "wmp-popup-bottom-area"
            }, [
              vue.createElementVNode("navigator", {
                class: "wmp-wallet-setup-func",
                "open-type": "redirect",
                url: "/pages/setup-wallet/wallet-phrase"
              }, [
                vue.createElementVNode("image", {
                  mode: "widthFix",
                  src: "/static/img/create_wallet.png"
                }),
                vue.createElementVNode("view", { class: "font-desc-black" }, "Create wallet")
              ]),
              vue.createElementVNode("view", { class: "wmp-boundary" }),
              vue.createElementVNode("navigator", {
                class: "wmp-wallet-setup-func",
                "open-type": "redirect",
                url: "/pages/setup-wallet/setup"
              }, [
                vue.createElementVNode("image", {
                  mode: "widthFix",
                  src: "/static/img/import_wallet.png"
                }),
                vue.createElementVNode("view", { class: "font-desc-black" }, "Import wallet")
              ])
            ])) : vue.createCommentVNode("v-if", true)
          ])
        ]),
        _: 1
      }, 512)
    ]);
  }
  const __easycom_0 = /* @__PURE__ */ _export_sfc(_sfc_main$5, [["render", _sfc_render$4], ["__scopeId", "data-v-9819fba0"], ["__file", "C:/Users/baba/Documents/HBuilderProjects/hello_demo/components/wallet-list-popup/wallet-list-popup.vue"]]);
  function request({ url, method: method2, data = {} }) {
    return new Promise((resolve, reject) => {
      uni.request({
        url,
        method: method2,
        data,
        success(res) {
          resolve(res);
        },
        fail(res) {
          reject(false);
        }
      });
    });
  }
  const REQUEST = {
    request
  };
  function formatTime(time) {
    if (typeof time !== "number" || time < 0) {
      return time;
    }
    var hour = parseInt(time / 3600);
    time = time % 3600;
    var minute = parseInt(time / 60);
    time = time % 60;
    var second = time;
    return [hour, minute, second].map(function(n2) {
      n2 = n2.toString();
      return n2[1] ? n2 : "0" + n2;
    }).join(":");
  }
  function formatLocation(longitude, latitude) {
    if (typeof longitude === "string" && typeof latitude === "string") {
      longitude = parseFloat(longitude);
      latitude = parseFloat(latitude);
    }
    longitude = longitude.toFixed(2);
    latitude = latitude.toFixed(2);
    return {
      longitude: longitude.toString().split("."),
      latitude: latitude.toString().split(".")
    };
  }
  var dateUtils = {
    UNITS: {
      "Years": 315576e5,
      "Months": 26298e5,
      "Days": 864e5,
      "Hours": 36e5,
      "Mins": 6e4,
      "Secs": 1e3
    },
    humanize: function(milliseconds) {
      var humanize = "";
      for (var key in this.UNITS) {
        if (milliseconds >= this.UNITS[key]) {
          humanize = Math.floor(milliseconds / this.UNITS[key]) + key + "\u524D";
          break;
        }
      }
      return humanize || "\u521A\u521A";
    },
    humanize_2: function(milliseconds) {
      var humanize = "";
      for (var key in this.UNITS) {
        if (milliseconds >= this.UNITS[key]) {
          humanize = Math.floor(milliseconds / this.UNITS[key]) + " " + key;
          break;
        }
      }
      return humanize;
    },
    format: function(dateStr) {
      var date = this.parse(dateStr);
      var diff = Date.now() - date.getTime();
      if (diff < this.UNITS["\u5929"]) {
        return this.humanize(diff);
      }
      var _format2 = function(number2) {
        return number2 < 10 ? "0" + number2 : number2;
      };
      return date.getFullYear() + "/" + _format2(date.getMonth() + 1) + "/" + _format2(date.getDate()) + "-" + _format2(date.getHours()) + ":" + _format2(date.getMinutes());
    },
    parse: function(str) {
      var a2 = str.split(/[^0-9]/);
      return new Date(a2[0], a2[1] - 1, a2[2], a2[3], a2[4], a2[5]);
    }
  };
  const UTIL = {
    formatTime,
    formatLocation,
    dateUtils
  };
  function etherApi(network, use_ether_api = true) {
    this.network_url = network.url;
    this.network_name = network.network;
    this.etherscan_api = network.etherscan_api;
    if (use_ether_api) {
      this.provider = new JsonRpcProvider(this.network_url);
    }
  }
  etherApi.prototype.createWallet = function() {
    const wallet = Wallet.createRandom();
    return wallet;
  }, etherApi.prototype.createWalletKeyStore = async function(private_key, password) {
    const wallet = new Wallet(private_key);
    const keystore_json = await wallet.encrypt(password);
    return keystore_json;
  }, etherApi.prototype.getBalance = async function(address) {
    const balance = await this.provider.getBalance(address);
    const format2 = formatEther(balance);
    return format2;
  }, etherApi.prototype.getBlockNumber = async function() {
    const block_num = await this.provider.getBlockNumber();
    return block_num;
  }, etherApi.prototype.getBlock = async function(block_number) {
    let block = await this.provider.getBlock(block_number);
    return block;
  }, etherApi.prototype.getTransaction = async function(transaction_hash) {
    const transcation = await this.provider.getTransaction(transaction_hash);
    return transcation;
  }, etherApi.prototype.getCode = async function(address) {
    const code = await this.provider.getCode(address);
    return code;
  }, etherApi.prototype.getFeeData = async function() {
    let fee_data = await this.provider.getFeeData();
    return fee_data;
  }, etherApi.prototype.getGasAndTimeOracle = async function() {
    let gas_priority = [
      { "level": "Fastest", "max_fee": "_", "time": "_ Min", "cost_usd": "_", "cost": "_", "gas": "21000", "eth_price": "0" },
      { "level": "Standard", "max_fee": "_", "time": "_ Min", "cost_usd": "_", "cost": "_", "gas": "21000", "eth_price": "0" },
      { "level": "Low", "max_fee": "_", "time": "_ Min", "cost_usd": "_", "cost": "_", "gas": "21000", "eth_price": "0" }
    ];
    let eth_price = await REQUEST.request({
      url: "https://api.binance.com/api/v3/ticker/price?symbol=ETHUSDT",
      method: "GET"
    });
    if (!eth_price || !eth_price.data.price) {
      formatAppLog("log", "at common/etherApi.js:63", eth_price);
      return gas_priority;
    }
    if ("Goerli Test Network" == this.network_name) {
      let fee_info = await this.getFeeData();
      if (!fee_info) {
        formatAppLog("log", "at common/etherApi.js:70", "\u83B7\u53D6gas\u4FE1\u606F\u5931\u8D25");
        return gas_priority;
      }
      let gas_spend = fee_info.gasPrice * BigInt(gas_priority[0].gas);
      gas_priority[0].max_fee = gas_priority[1].max_fee = gas_priority[2].max_fee = formatUnits(fee_info.gasPrice, "gwei");
      gas_priority[0].cost = gas_priority[1].cost = gas_priority[2].cost = Number(formatEther(gas_spend)).toFixed(8);
      gas_priority[0].eth_price = gas_priority[1].eth_price = gas_priority[2].eth_price = eth_price.data.price;
      gas_priority[0].cost_usd = gas_priority[1].cost_usd = gas_priority[1].cost_usd = (eth_price.data.price * gas_priority[0].cost).toFixed(4);
      gas_priority[0].time = gas_priority[1].time = gas_priority[2].time = "30 Secs";
      return gas_priority;
    }
    let gas_oracle = await REQUEST.request({
      url: this.etherscan_api + "?module=gastracker&action=gasoracle&apikey=" + CONFIG.etherscan_api_key,
      method: "GET"
    });
    if (!gas_oracle || gas_oracle.data.message != "OK") {
      formatAppLog("log", "at common/etherApi.js:87", "\u83B7\u53D6gas\u9884\u6D4B\u5931\u8D25");
      formatAppLog("log", "at common/etherApi.js:88", gas_oracle);
      return false;
    }
    gas_priority[0].max_fee = gas_oracle.data.result.FastGasPrice;
    gas_priority[0].cost = (formatEther(parseUnits(gas_oracle.data.result.FastGasPrice, "gwei")) * gas_priority[0].gas).toFixed(6);
    gas_priority[1].max_fee = gas_oracle.data.result.ProposeGasPrice;
    gas_priority[1].cost = (formatEther(parseUnits(gas_oracle.data.result.ProposeGasPrice, "gwei")) * gas_priority[1].gas).toFixed(6);
    gas_priority[2].max_fee = gas_oracle.data.result.SafeGasPrice;
    gas_priority[2].cost = (formatEther(parseUnits(gas_oracle.data.result.SafeGasPrice, "gwei")) * gas_priority[2].gas).toFixed(6);
    gas_priority[0].eth_price = gas_priority[1].eth_price = gas_priority[2].eth_price = eth_price.data.price;
    gas_priority[0].cost_usd = (eth_price.data.price * gas_priority[0].cost).toFixed(2);
    gas_priority[1].cost_usd = (eth_price.data.price * gas_priority[1].cost).toFixed(2);
    gas_priority[2].cost_usd = (eth_price.data.price * gas_priority[2].cost).toFixed(2);
    let price_list = [gas_oracle.data.result.FastGasPrice, gas_oracle.data.result.ProposeGasPrice, gas_oracle.data.result.SafeGasPrice];
    for (var i2 = 0; i2 < price_list.length; i2++) {
      let time_info = await REQUEST.request({
        url: this.etherscan_api + "?module=gastracker&action=gasestimate&gasprice=" + parseUnits(price_list[i2], "gwei") + "&apikey=" + CONFIG.etherscan_api_key,
        method: "GET"
      });
      if (time_info && time_info.data.message == "OK") {
        gas_priority[i2].time = UTIL.dateUtils.humanize_2(time_info.data.result * 1e3);
      } else {
        formatAppLog("log", "at common/etherApi.js:113", "\u83B7\u53D6\u8F6C\u8D26\u786E\u8BA4\u65F6\u95F4\u5931\u8D25");
        formatAppLog("log", "at common/etherApi.js:114", time_info);
      }
    }
    return gas_priority;
  }, etherApi.prototype.transfer = async function(from, to, value, private_key, gas_price, gas_limit = 21e3) {
    value = BigInt(value);
    gas_price = BigInt(gas_price);
    gas_limit = BigInt(gas_limit);
    formatAppLog("log", "at common/etherApi.js:123", value.toString());
    formatAppLog("log", "at common/etherApi.js:124", gas_price.toString());
    formatAppLog("log", "at common/etherApi.js:125", gas_limit.toString());
    let wallet = new Wallet(private_key, this.provider);
    let code = await this.provider.getCode(to);
    formatAppLog("log", "at common/etherApi.js:128", "address code:" + code);
    if (code !== "0x") {
      uni.showToast({
        title: "Cannot transfer to a contract",
        icon: "error"
      });
      return false;
    }
    let balance = await this.provider.getBalance(from);
    formatAppLog("log", "at common/etherApi.js:137", "current balance:" + balance.toString());
    let need_value = value + gas_price * gas_limit;
    formatAppLog("log", "at common/etherApi.js:140", "need_value:" + need_value.toString());
    if (need_value > balance) {
      uni.showToast({
        title: "Insufficient balance",
        icon: "error"
      });
      return false;
    }
    let tx = await wallet.sendTransaction({
      gasLimit: gas_limit,
      gasPrice: gas_price,
      to,
      value: need_value
    });
    formatAppLog("log", "at common/etherApi.js:155", "transaction hash: " + tx.hash);
    formatAppLog("log", "at common/etherApi.js:156", JSON.stringify(tx));
    return tx;
  }, etherApi.prototype.getTxHistory = async function(address, page = 1, offset = 20) {
    let txlist = await REQUEST.request({
      url: this.etherscan_api + "?module=account&action=txlist&address=" + address + "&startblock=0&endblock=99999999&page=" + page + "&offset=" + offset + "&sort=desc&apikey=" + CONFIG.etherscan_api_key,
      method: "GET"
    });
    if (!txlist || txlist.data.message != "OK") {
      formatAppLog("log", "at common/etherApi.js:165", txlist);
      return false;
    }
    return txlist.data.result;
  };
  const ETHER_API = {
    etherApi
  };
  const _sfc_main$4 = {
    data() {
      return {
        network_list: getApp().globalData.global_network_list,
        global_network_index: getApp().globalData.global_network_index,
        current_wallet: {
          "address": "0x...........................",
          "name": "my wallet",
          "keystore": "",
          "balance": 0,
          "usd_worth": 0,
          "tokens": []
        },
        wallet_list: null
      };
    },
    onLoad() {
      if (!getApp().globalData.global_is_app_data_init) {
        uni.redirectTo({
          url: "/pages/start/start-up"
        });
        return;
      }
      this.loadWalletData();
    },
    onShow() {
    },
    onPullDownRefresh() {
      formatAppLog("log", "at pages/index/wallet.vue:151", "refresh");
      setTimeout(function() {
        uni.stopPullDownRefresh();
      }, 1e3);
      this.loadWalletData();
    },
    methods: {
      loadWalletData: function() {
        this.wallet_list = WALLET.getWalletList();
        if (!this.wallet_list || !(this.wallet_list instanceof Array) || 0 == this.wallet_list.length) {
          uni.showModal({
            title: "Data exception, please contact admin",
            showCancel: false,
            confirmText: "Got it"
          });
          formatAppLog("log", "at pages/index/wallet.vue:168", "\u8BFB\u53D6\u94B1\u5305\u5217\u8868\u5F02\u5E38");
          return;
        }
        this.current_wallet = WALLET.getDefaultWallet();
        formatAppLog("log", "at pages/index/wallet.vue:173", this.current_wallet);
        if (!this.current_wallet) {
          uni.showModal({
            title: "Data exception, please contact admin",
            showCancel: false,
            confirmText: "Got it"
          });
          formatAppLog("log", "at pages/index/wallet.vue:180", "\u8BFB\u53D6\u94B1\u5305\u6570\u636E\u5F02\u5E38");
          return;
        }
        this.current_wallet.usd_worth = 0;
        let ether_api = new ETHER_API.etherApi(this.network_list[this.global_network_index]);
        ether_api.getBalance("0x03b5b0221fd758c16ced3c3402f830234cf73bb8").then((res) => {
          formatAppLog("log", "at pages/index/wallet.vue:188", "balance:" + res);
          if (typeof res == "undefined") {
            this.current_wallet.balance = "__";
          } else {
            this.current_wallet.balance = Number(res).toFixed(8);
          }
        }, (res) => {
        });
      },
      showNetworkPop: function() {
        this.$refs.network_selector_popup.open("bottom");
      },
      closeNetworkSelector: function() {
        this.$refs.network_selector_popup.close();
      },
      changeNetwork: function(index) {
        if (index == this.global_network_index) {
          return;
        }
        getApp().globalData.global_network_index = this.global_network_index = index;
        uni.setStorage({
          key: "storage_default_network",
          data: this.network_list[index].network,
          success: function() {
          }
        });
        this.closeNetworkSelector();
        uni.startPullDownRefresh({
          fail: function() {
            formatAppLog("log", "at pages/index/wallet.vue:221", "\u89E6\u53D1\u5237\u65B0\u5931\u8D25");
          }
        });
      },
      copyAddress() {
        uni.setClipboardData({
          data: this.current_wallet.address,
          success: function() {
            uni.showToast({
              title: "The address has been copied",
              icon: "none"
            });
          },
          fail: function() {
            uni.showToast({
              title: "Failed to copy address"
            });
            formatAppLog("log", "at pages/index/wallet.vue:239", "\u590D\u5236\u94B1\u5305\u5730\u5740\u5931\u8D25");
          }
        });
      },
      showWalletListPop() {
        this.$refs.wallet_list_pop.show();
      },
      changeWallet(e) {
        var default_wallet = WALLET.setDefaultWallet(e.address);
        if (!default_wallet) {
          uni.showToast({
            title: "Failed to change wallet",
            icon: "error"
          });
          return false;
        }
        if (e.address == this.current_wallet.address) {
          return true;
        }
        this.current_wallet = default_wallet;
        uni.startPullDownRefresh();
      },
      async test_transfer() {
        let ether_api = new ETHER_API.etherApi(this.network_list[this.global_network_index]);
        let txlist = await ether_api.getTxHistory("0x03b5b0221fd758c16ced3c3402f830234cf73bb8");
        formatAppLog("log", "at pages/index/wallet.vue:264", txlist);
      }
    }
  };
  function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_wallet_list_popup = resolveEasycom(vue.resolveDynamicComponent("wallet-list-popup"), __easycom_0);
    const _component_uni_popup = resolveEasycom(vue.resolveDynamicComponent("uni-popup"), __easycom_2);
    return vue.openBlock(), vue.createElementBlock("view", { class: "container" }, [
      vue.createElementVNode("view", { class: "status-bar" }),
      vue.createElementVNode("view", { class: "nav-bar" }, [
        vue.createElementVNode("view", { class: "nav-bar-container" }, [
          vue.createElementVNode("view", { class: "nav-bar-left" }, [
            vue.createElementVNode("view", { class: "wallet-title font-second-title" }, "Turtle Wallet"),
            vue.createElementVNode("view", {
              class: "network-part",
              onClick: _cache[0] || (_cache[0] = (...args) => $options.showNetworkPop && $options.showNetworkPop(...args))
            }, [
              vue.createElementVNode("view", {
                class: "network-color",
                style: vue.normalizeStyle({ "--networkColor": $data.network_list[$data.global_network_index].color ? $data.network_list[$data.global_network_index].color : "#6f6b73" })
              }, null, 4),
              vue.createElementVNode("view", { class: "network-selector font-desc-gray" }, vue.toDisplayString($data.network_list[$data.global_network_index].network), 1),
              vue.createElementVNode("image", {
                class: "selector-arrow",
                src: "/static/img/expand.png"
              })
            ])
          ]),
          vue.createElementVNode("view", { class: "nav-bar-right" }, [
            vue.createElementVNode("view", { class: "manage-wallet" }, [
              vue.createVNode(_component_wallet_list_popup, {
                ref: "wallet_list_pop",
                pop_title: "Manage account",
                wallet_list: $data.wallet_list,
                selected_address: $data.current_wallet.address,
                show_setup_btn: true,
                onChange: $options.changeWallet
              }, {
                default: vue.withCtx(() => [
                  vue.createElementVNode("image", {
                    class: "nav-icon",
                    mode: "widthFix",
                    src: "/static/img/wallet-manage.png",
                    onClick: _cache[1] || (_cache[1] = (...args) => $options.showWalletListPop && $options.showWalletListPop(...args))
                  })
                ]),
                _: 1
              }, 8, ["wallet_list", "selected_address", "onChange"])
            ]),
            vue.createElementVNode("view", { class: "scan-qr" }, [
              vue.createElementVNode("image", {
                class: "nav-icon",
                mode: "widthFix",
                src: "/static/img/scan-qr.png"
              })
            ]),
            vue.createElementVNode("view", { class: "more-func" }, [
              vue.createElementVNode("image", {
                class: "nav-icon",
                mode: "widthFix",
                src: "/static/img/more.png"
              })
            ])
          ])
        ])
      ]),
      vue.createElementVNode("view", { class: "page-container" }, [
        vue.createElementVNode("view", { class: "wallet-card-part" }, [
          vue.createElementVNode("view", { class: "wallet-card selected-wallet" }, [
            vue.createElementVNode("view", { class: "wallet-card-line" }, [
              vue.createElementVNode("view", { class: "wallet-name font-desc-black" }, vue.toDisplayString($data.current_wallet.name), 1),
              vue.createElementVNode("image", {
                class: "wallet-info",
                mode: "widthFix",
                src: "/static/img/more2.png"
              })
            ]),
            vue.createElementVNode("view", { class: "wallet-card-line" }, [
              vue.createElementVNode("view", { class: "address-info" }, [
                vue.createElementVNode("view", { class: "wallet-address font-desc-black" }, vue.toDisplayString($data.current_wallet.address), 1),
                vue.createElementVNode("image", {
                  class: "copy-address",
                  mode: "widthFix",
                  src: "/static/img/copy2.png",
                  onClick: _cache[2] || (_cache[2] = (...args) => $options.copyAddress && $options.copyAddress(...args))
                })
              ]),
              vue.createElementVNode("view")
            ]),
            vue.createElementVNode("view", { class: "wallet-card-line" }, [
              vue.createElementVNode("view"),
              vue.createElementVNode("view", { class: "wallet-worth" }, "$ " + vue.toDisplayString($data.current_wallet.usd_worth), 1)
            ])
          ])
        ]),
        vue.createElementVNode("view", { class: "transfer-receive-part" }, [
          vue.createElementVNode("navigator", {
            class: "transfer-receive",
            "open-type": "redirect",
            url: "/pages/transfer/transfer"
          }, [
            vue.createElementVNode("image", {
              mode: "widthFix",
              src: "/static/img/doller-transfer.png"
            }),
            vue.createElementVNode("view", { class: "font-desc-black" }, "Transfer")
          ]),
          vue.createElementVNode("view", { class: "boundary" }),
          vue.createElementVNode("view", { class: "transfer-receive" }, [
            vue.createElementVNode("image", {
              mode: "widthFix",
              src: "/static/img/qr.png"
            }),
            vue.createElementVNode("view", { class: "font-desc-black" }, "Receive")
          ])
        ]),
        vue.createElementVNode("view", { class: "assets-part" }, [
          vue.createElementVNode("view", { class: "assets-part-title" }, [
            vue.createElementVNode("view", { class: "font-desc-black" }, "Assets"),
            vue.createElementVNode("image", {
              mode: "widthFix",
              src: "/static/img/plus.png"
            })
          ]),
          vue.createElementVNode("view", { class: "asset-list" }, [
            vue.createElementVNode("view", { class: "asset-item" }, [
              vue.createElementVNode("view", { class: "asset-name" }, [
                vue.createElementVNode("image", {
                  mode: "widthFix",
                  src: "/static/img/ETH.png"
                }),
                vue.createElementVNode("view", { class: "asset-text font-third-title" }, "ETH")
              ]),
              vue.createElementVNode("view", { class: "asset-bal" }, [
                vue.createElementVNode("view", { class: "asset-bal-num font-third-title" }, vue.toDisplayString($data.current_wallet.balance), 1),
                vue.createElementVNode("view", { class: "asset-bal-worth font-desc-gray" }, "$ " + vue.toDisplayString($data.current_wallet.usd_worth), 1)
              ])
            ]),
            vue.createElementVNode("view", { class: "add-coin-tip font-desc-gray" }, [
              vue.createElementVNode("view", null, "Don't see your Token?"),
              vue.createElementVNode("view", { class: "add-coin-func" }, "Add token")
            ])
          ]),
          vue.createElementVNode("view", {
            onClick: _cache[3] || (_cache[3] = (...args) => $options.test_transfer && $options.test_transfer(...args))
          }, "test transfer")
        ])
      ]),
      vue.createElementVNode("view", null, [
        vue.createCommentVNode(" \u5207\u6362\u7F51\u7EDC\u5F39\u7A97 "),
        vue.createVNode(_component_uni_popup, { ref: "network_selector_popup" }, {
          default: vue.withCtx(() => [
            vue.createElementVNode("view", { class: "popup-container" }, [
              vue.createElementVNode("view", { class: "popup-top-area" }, [
                vue.createElementVNode("view"),
                vue.createElementVNode("view", { class: "popup-title-area font-second-title" }, "Select Network"),
                vue.createElementVNode("image", {
                  class: "popup-close-area",
                  mode: "widthFix",
                  src: "/static/img/close.png",
                  onClick: _cache[4] || (_cache[4] = (...args) => $options.closeNetworkSelector && $options.closeNetworkSelector(...args))
                })
              ]),
              vue.createElementVNode("view", { class: "popup-content-area" }, [
                (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($data.network_list, (item, index) => {
                  return vue.openBlock(), vue.createElementBlock("view", {
                    class: "network-item",
                    onClick: ($event) => $options.changeNetwork(index)
                  }, [
                    vue.createElementVNode("view", { class: "network-item-left" }, [
                      vue.createElementVNode("view", {
                        class: "network-color",
                        style: vue.normalizeStyle({ "--networkColor": item.color ? item.color : "#6f6b73" })
                      }, null, 4),
                      vue.createElementVNode("view", { class: "network-name font-desc-black" }, vue.toDisplayString(item.network), 1)
                    ]),
                    vue.createElementVNode("view", null, [
                      index == $data.global_network_index ? (vue.openBlock(), vue.createElementBlock("image", {
                        key: 0,
                        class: "is-network-select",
                        mode: "widthFix",
                        src: "/static/img/right.png"
                      })) : vue.createCommentVNode("v-if", true)
                    ])
                  ], 8, ["onClick"]);
                }), 256))
              ])
            ])
          ]),
          _: 1
        }, 512)
      ])
    ]);
  }
  const PagesIndexWallet = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["render", _sfc_render$3], ["__file", "C:/Users/baba/Documents/HBuilderProjects/hello_demo/pages/index/wallet.vue"]]);
  const _sfc_main$3 = {
    name: "UniSegmentedControl",
    emits: ["clickItem"],
    props: {
      current: {
        type: Number,
        default: 0
      },
      values: {
        type: Array,
        default() {
          return [];
        }
      },
      activeColor: {
        type: String,
        default: "#2979FF"
      },
      styleType: {
        type: String,
        default: "button"
      }
    },
    data() {
      return {
        currentIndex: 0
      };
    },
    watch: {
      current(val) {
        if (val !== this.currentIndex) {
          this.currentIndex = val;
        }
      }
    },
    created() {
      this.currentIndex = this.current;
    },
    methods: {
      _onClick(index) {
        if (this.currentIndex !== index) {
          this.currentIndex = index;
          this.$emit("clickItem", {
            currentIndex: index
          });
        }
      }
    }
  };
  function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", {
      class: vue.normalizeClass([[$props.styleType === "text" ? "segmented-control--text" : "segmented-control--button"], "segmented-control"]),
      style: vue.normalizeStyle({ borderColor: $props.styleType === "text" ? "" : $props.activeColor })
    }, [
      (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($props.values, (item, index) => {
        return vue.openBlock(), vue.createElementBlock("view", {
          class: vue.normalizeClass([[
            $props.styleType === "text" ? "" : "segmented-control__item--button",
            index === $data.currentIndex && $props.styleType === "button" ? "segmented-control__item--button--active" : "",
            index === 0 && $props.styleType === "button" ? "segmented-control__item--button--first" : "",
            index === $props.values.length - 1 && $props.styleType === "button" ? "segmented-control__item--button--last" : ""
          ], "segmented-control__item"]),
          key: index,
          style: vue.normalizeStyle({ backgroundColor: index === $data.currentIndex && $props.styleType === "button" ? $props.activeColor : "", borderColor: index === $data.currentIndex && $props.styleType === "text" || $props.styleType === "button" ? $props.activeColor : "transparent" }),
          onClick: ($event) => $options._onClick(index)
        }, [
          vue.createElementVNode("view", null, [
            vue.createElementVNode("text", {
              style: vue.normalizeStyle({ color: index === $data.currentIndex ? $props.styleType === "text" ? $props.activeColor : "#fff" : $props.styleType === "text" ? "#000" : $props.activeColor }),
              class: vue.normalizeClass(["segmented-control__text", $props.styleType === "text" && index === $data.currentIndex ? "segmented-control__item--text" : ""])
            }, vue.toDisplayString(item), 7)
          ])
        ], 14, ["onClick"]);
      }), 128))
    ], 6);
  }
  const __easycom_1 = /* @__PURE__ */ _export_sfc(_sfc_main$3, [["render", _sfc_render$2], ["__scopeId", "data-v-8ebe3aef"], ["__file", "C:/Users/baba/Documents/HBuilderProjects/hello_demo/components/uni-segmented-control/uni-segmented-control.vue"]]);
  const graceChecker = {
    error: "",
    check: function(data, rule) {
      for (var i2 = 0; i2 < rule.length; i2++) {
        if (!rule[i2].checkType) {
          return true;
        }
        if (!rule[i2].name) {
          return true;
        }
        if (!rule[i2].errorMsg) {
          return true;
        }
        if (!data[rule[i2].name]) {
          this.error = rule[i2].errorMsg;
          return false;
        }
        switch (rule[i2].checkType) {
          case "string":
            var reg = new RegExp("^.{" + rule[i2].checkRule + "}$");
            if (!reg.test(data[rule[i2].name])) {
              this.error = rule[i2].errorMsg;
              return false;
            }
            break;
          case "int":
            var reg = new RegExp("^(-[1-9]|[1-9])[0-9]{" + rule[i2].checkRule + "}$");
            if (!reg.test(data[rule[i2].name])) {
              this.error = rule[i2].errorMsg;
              return false;
            }
            break;
          case "between":
            if (!this.isNumber(data[rule[i2].name])) {
              this.error = rule[i2].errorMsg;
              return false;
            }
            var minMax = rule[i2].checkRule.split(",");
            minMax[0] = Number(minMax[0]);
            minMax[1] = Number(minMax[1]);
            if (data[rule[i2].name] > minMax[1] || data[rule[i2].name] < minMax[0]) {
              this.error = rule[i2].errorMsg;
              return false;
            }
            break;
          case "betweenD":
            var reg = /^-?[1-9][0-9]?$/;
            if (!reg.test(data[rule[i2].name])) {
              this.error = rule[i2].errorMsg;
              return false;
            }
            var minMax = rule[i2].checkRule.split(",");
            minMax[0] = Number(minMax[0]);
            minMax[1] = Number(minMax[1]);
            if (data[rule[i2].name] > minMax[1] || data[rule[i2].name] < minMax[0]) {
              this.error = rule[i2].errorMsg;
              return false;
            }
            break;
          case "betweenF":
            var reg = /^-?[0-9][0-9]?.+[0-9]+$/;
            if (!reg.test(data[rule[i2].name])) {
              this.error = rule[i2].errorMsg;
              return false;
            }
            var minMax = rule[i2].checkRule.split(",");
            minMax[0] = Number(minMax[0]);
            minMax[1] = Number(minMax[1]);
            if (data[rule[i2].name] > minMax[1] || data[rule[i2].name] < minMax[0]) {
              this.error = rule[i2].errorMsg;
              return false;
            }
            break;
          case "same":
            if (data[rule[i2].name] != rule[i2].checkRule) {
              this.error = rule[i2].errorMsg;
              return false;
            }
            break;
          case "notsame":
            if (data[rule[i2].name] == rule[i2].checkRule) {
              this.error = rule[i2].errorMsg;
              return false;
            }
            break;
          case "email":
            var reg = /^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/;
            if (!reg.test(data[rule[i2].name])) {
              this.error = rule[i2].errorMsg;
              return false;
            }
            break;
          case "phoneno":
            var reg = /^1[0-9]{10,10}$/;
            if (!reg.test(data[rule[i2].name])) {
              this.error = rule[i2].errorMsg;
              return false;
            }
            break;
          case "zipcode":
            var reg = /^[0-9]{6}$/;
            if (!reg.test(data[rule[i2].name])) {
              this.error = rule[i2].errorMsg;
              return false;
            }
            break;
          case "reg":
            var reg = new RegExp(rule[i2].checkRule);
            if (!reg.test(data[rule[i2].name])) {
              this.error = rule[i2].errorMsg;
              return false;
            }
            break;
          case "in":
            if (rule[i2].checkRule.indexOf(data[rule[i2].name]) == -1) {
              this.error = rule[i2].errorMsg;
              return false;
            }
            break;
          case "notnull":
            if (data[rule[i2].name] == null || data[rule[i2].name].length < 1) {
              this.error = rule[i2].errorMsg;
              return false;
            }
            break;
        }
      }
      return true;
    },
    isNumber: function(checkVal) {
      var reg = /^-?[1-9][0-9]?.?[0-9]*$/;
      return reg.test(checkVal);
    }
  };
  const _sfc_main$2 = {
    data() {
      return {
        ether_api: null,
        network_list: getApp().globalData.global_network_list,
        global_network_index: getApp().globalData.global_network_index,
        wallet_list: [],
        current_wallet: {
          "address": "____________________________________",
          "name": "______",
          "keystore": "",
          "balance": "_",
          "usd_worth": "_",
          "tokens": []
        },
        current_tab_index: 0,
        tab_list: ["Set priority", "Customize"],
        gas_priority: [
          { "level": "Fastest", "max_fee": "_", "time": "_ Min", "cost_usd": "_", "cost": "_", "gas": "21000", "eth_price": "0" },
          { "level": "Standard", "max_fee": "_", "time": "_ Min", "cost_usd": "_", "cost": "_", "gas": "21000", "eth_price": "0" },
          { "level": "Low", "max_fee": "_", "time": "_ Min", "cost_usd": "_", "cost": "_", "gas": "21000", "eth_price": "0" }
        ],
        gas_price: 0,
        gas_limit: 0,
        current_priority_index: 1,
        customize_set_max_fee: 0,
        customize_max_priority_fee: 0,
        customize_gas: 21e3,
        gas_fee_usd: "_",
        gas_fee: "_",
        gas_status_tip: "",
        gas_estimate_status: "done",
        refrush_gas_countdown: 0,
        refrush_gas_last_time: 0,
        refrush_gas_gap: 10
      };
    },
    onShow() {
      if (!getApp().globalData.global_is_app_data_init) {
        uni.redirectTo({
          url: "/pages/start/start-up"
        });
        return;
      }
      this.wallet_list = WALLET.getWalletList();
      if (!this.wallet_list || !(this.wallet_list instanceof Array) || 0 == this.wallet_list.length) {
        uni.showModal({
          title: "Data exception, please contact admin",
          showCancel: false,
          confirmText: "Got it"
        });
        formatAppLog("log", "at pages/transfer/transfer.vue:206", "\u8BFB\u53D6\u94B1\u5305\u5217\u8868\u5F02\u5E38");
        return;
      }
      this.current_wallet = WALLET.getDefaultWallet();
      formatAppLog("log", "at pages/transfer/transfer.vue:211", this.current_wallet);
      if (!this.current_wallet) {
        uni.showModal({
          title: "Data exception, please contact admin",
          showCancel: false,
          confirmText: "Got it"
        });
        formatAppLog("log", "at pages/transfer/transfer.vue:218", "\u8BFB\u53D6\u94B1\u5305\u6570\u636E\u5F02\u5E38");
        return;
      }
      this.ether_api = new ETHER_API.etherApi(this.network_list[this.global_network_index].url);
      this.getBalance();
      setInterval(() => {
        if ("loading" == this.gas_estimate_status) {
          return;
        }
        let now = new Date().getTime();
        let time_gap = now - this.refrush_gas_last_time;
        if (time_gap > this.refrush_gas_gap * 1e3) {
          this.gas_estimate_status = "loading";
          this.gas_status_tip = "Refreshing...";
          this.getGasInfo().then((res) => {
            this.gas_estimate_status = "done";
            this.refrush_gas_last_time = now;
            this.refrush_gas_countdown = this.refrush_gas_gap;
          }, (res) => {
            formatAppLog("log", "at pages/transfer/transfer.vue:241", res);
            this.gas_estimate_status = "done";
          });
          return;
        }
        this.gas_status_tip = "";
      }, 1e3);
    },
    methods: {
      showWalletListPop() {
        this.$refs.wallet_list_pop.show();
      },
      changeWallet(e) {
        var default_wallet = WALLET.setDefaultWallet(e.address);
        if (!default_wallet) {
          uni.showToast({
            title: "Failed to change wallet",
            icon: "error"
          });
          return false;
        }
        if (e.address == this.current_wallet.address) {
          return true;
        }
        this.current_wallet = default_wallet;
        this.getBalance();
      },
      getBalance() {
        let ether_api = new ETHER_API.etherApi(this.network_list[this.global_network_index].url);
        ether_api.getBalance("0x03b5b0221fd758c16ced3c3402f830234cf73bb8").then((res) => {
          formatAppLog("log", "at pages/transfer/transfer.vue:273", "balance:" + res);
          if (typeof res == "undefined") {
            this.current_wallet.balance = "__";
          } else {
            this.current_wallet.balance = Number(res).toFixed(8);
          }
        }, (res) => {
        });
      },
      async getGasInfo() {
        let ether_api = new ETHER_API.etherApi(this.network_list[this.global_network_index].url);
        let ret = await ether_api.getGasAndTimeOracle();
        if (ret) {
          this.gas_priority = ret;
          if (0 == this.current_tab_index) {
            this.gas_price = this.gas_priority[this.current_priority_index].max_fee;
            this.gas_limit = this.gas_priority[this.current_priority_index].gas;
            this.gas_fee = this.gas_priority[this.current_priority_index].cost;
            this.gas_fee_usd = this.gas_priority[this.current_priority_index].cost_usd;
          }
          return this.gas_priority;
        }
        return false;
      },
      showGasPopup() {
        this.$refs.set_gas_popup.open("bottom");
      },
      closeGasPopup() {
        this.$refs.set_gas_popup.close();
      },
      async formSubmit(e) {
        let form_data = {};
        form_data.to_address = e.detail.value.to_address;
        form_data.amount = e.detail.value.amount;
        form_data.gas_price = this.gas_price;
        form_data.gas = this.gas_limit;
        var rule = [
          { name: "to_address", checkType: "notnull", checkRule: "", errorMsg: "Please enter wallet address" },
          { name: "to_address", checkType: "reg", checkRule: "^0x[0-9a-fA-F]{40}$", errorMsg: "Incorrect wallet address" },
          { name: "amount", checkType: "notnull", checkRule: "", errorMsg: "Please enter amount" },
          { name: "amount", checkType: "number", checkRule: "1,20", errorMsg: "Please enter a amount" },
          { name: "gas_price", checkType: "notnull", checkRule: "", errorMsg: "Please set gas price" },
          { name: "gas", checkType: "notnull", checkRule: "", errorMsg: "Please set gas limit" }
        ];
        var checkRes = graceChecker.check(form_data, rule);
        if (!checkRes) {
          uni.showToast({ title: graceChecker.error, icon: "none" });
          return false;
        }
        form_data.gas_price = parseUnits(form_data.gas_price, "gwei");
        form_data.amount = parseEther(form_data.amount);
        formatAppLog("log", "at pages/transfer/transfer.vue:326", form_data);
        let pin_code = pin.checkPinStatus();
        if (!pin_code) {
          return false;
        }
        let wallet_info = await WALLET.getPrivateKey(this.current_wallet.address, pin_code);
        if (typeof wallet_info.privateKey == "undefined") {
          uni.showToast({ title: "Failed to decrypt wallet , please try again", icon: "error" });
          return false;
        }
        let ether_api = new ETHER_API.etherApi(this.network_list[this.global_network_index].url);
        uni.showLoading({
          title: "Sending transcation..."
        });
        try {
          let trans_ret = await ether_api.transfer(
            "0x03b5b0221fd758c16ced3c3402f830234cf73bb8",
            form_data.to_address,
            form_data.amount,
            wallet_info.privateKey,
            form_data.gas_price
          );
          uni.hideLoading();
          if (!trans_ret) {
            uni.showModal({
              title: "Failed to send the transcation,please try again",
              showCancel: false,
              confirmText: "Got it"
            });
            return false;
          }
          formatAppLog("log", "at pages/transfer/transfer.vue:359", trans_ret);
          uni.showToast({ title: "Successfully sent the transcation", icon: "success" });
          return true;
        } catch (e2) {
          uni.hideLoading();
          uni.showModal({
            title: "Failed to send the transcation,please try again",
            showCancel: false,
            confirmText: "Got it"
          });
          return false;
        }
      },
      onClickTabItem(e) {
        if (this.current_tab_index !== e.currentIndex) {
          this.current_tab_index = e.currentIndex;
        }
        if (1 == this.current_tab_index) {
          if ("_" == this.gas_priority[this.current_priority_index].max_fee) {
            this.gas_priority[this.current_priority_index].max_fee = "0";
          }
          this.customize_set_max_fee = this.gas_priority[this.current_priority_index].max_fee;
        }
      },
      selectPriority(priority_index) {
        this.current_priority_index = priority_index;
        if ("_" == this.gas_priority[this.current_priority_index].max_fee) {
          this.gas_priority[this.current_priority_index].max_fee = "0";
        }
        this.gas_price = this.gas_priority[this.current_priority_index].max_fee;
        this.gas_limit = this.gas_priority[this.current_priority_index].gas;
        this.gas_fee = this.gas_priority[this.current_priority_index].cost;
        this.gas_fee_usd = this.gas_priority[this.current_priority_index].cost_usd;
        this.closeGasPopup();
      },
      setCustomizeGas(e) {
        var rule = [
          { name: "customize_set_max_fee", checkType: "notnull", checkRule: "", errorMsg: "Please enter max fee" },
          { name: "customize_set_max_fee", checkType: "number", checkRule: "1,20", errorMsg: "Please enter a valid max fee" },
          { name: "customize_max_priority_fee", checkType: "number", checkRule: "1,20", errorMsg: "Please enter a valid max priority fee" },
          { name: "customize_gas", checkType: "notnull", checkRule: "", errorMsg: "Please enter gas" },
          { name: "customize_gas", checkType: "number", checkRule: "1,20", errorMsg: "Please enter a valid gas" }
        ];
        var formData = e.detail.value;
        var checkRes = graceChecker.check(formData, rule);
        if (!checkRes) {
          uni.showToast({ title: graceChecker.error, icon: "none" });
          return;
        }
        this.gas_price = (Number(e.detail.value.customize_set_max_fee) + Number(e.detail.value.customize_max_priority_fee)).toString();
        this.gas_limit = this.customize_gas;
      }
    }
  };
  function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_wallet_list_popup = resolveEasycom(vue.resolveDynamicComponent("wallet-list-popup"), __easycom_0);
    const _component_uni_segmented_control = resolveEasycom(vue.resolveDynamicComponent("uni-segmented-control"), __easycom_1);
    const _component_uni_popup = resolveEasycom(vue.resolveDynamicComponent("uni-popup"), __easycom_2);
    return vue.openBlock(), vue.createElementBlock("view", { class: "container" }, [
      vue.createElementVNode("form", {
        onSubmit: _cache[2] || (_cache[2] = (...args) => $options.formSubmit && $options.formSubmit(...args))
      }, [
        vue.createElementVNode("view", { class: "transfer-item" }, [
          vue.createElementVNode("view", { class: "transfer-item-title font-desc-gray" }, "From"),
          vue.createVNode(_component_wallet_list_popup, {
            ref: "wallet_list_pop",
            pop_title: "Select account",
            wallet_list: $data.wallet_list,
            selected_address: $data.current_wallet.address,
            show_setup_btn: false,
            onChange: $options.changeWallet
          }, {
            default: vue.withCtx(() => [
              vue.createElementVNode("view", {
                class: "transfer-form-item from-address-selector",
                onClick: _cache[0] || (_cache[0] = (...args) => $options.showWalletListPop && $options.showWalletListPop(...args))
              }, [
                vue.createElementVNode("view", { class: "from-address-info" }, [
                  vue.createElementVNode("view", { class: "from-address-name font-desc-gray" }, vue.toDisplayString($data.current_wallet.name), 1),
                  vue.createElementVNode("view", { class: "from-address font-desc-black" }, vue.toDisplayString($data.current_wallet.address), 1)
                ]),
                vue.createElementVNode("image", {
                  class: "form-icon",
                  mode: "widthFix",
                  src: "/static/img/expand.png"
                })
              ])
            ]),
            _: 1
          }, 8, ["wallet_list", "selected_address", "onChange"])
        ]),
        vue.createElementVNode("view", { class: "transfer-item" }, [
          vue.createElementVNode("view", { class: "transfer-item-title font-desc-gray" }, "To"),
          vue.createElementVNode("view", { class: "transfer-form-item to-address" }, [
            vue.createElementVNode("input", {
              class: "to-address-input",
              type: "text",
              name: "to_address",
              value: "0x6A01aaa2edA6f55DB4b4906e807837CBA2dfBc80"
            }),
            vue.createElementVNode("view", { class: "to-address-func-list" }, [
              vue.createElementVNode("image", {
                class: "form-icon",
                mode: "widthFix",
                src: "/static/img/contact.png"
              }),
              vue.createElementVNode("image", {
                class: "form-icon",
                mode: "widthFix",
                src: "/static/img/scan.png"
              })
            ])
          ])
        ]),
        vue.createElementVNode("view", { class: "transfer-item" }, [
          vue.createElementVNode("view", { class: "transfer-item-title font-desc-gray" }, "Asset"),
          vue.createElementVNode("view", { class: "transfer-form-item asset-selector" }, [
            vue.createElementVNode("view", { class: "asset-info" }, [
              vue.createElementVNode("image", {
                class: "asset-icon",
                mode: "widthFix",
                src: "/static/img/ETH.png"
              }),
              vue.createElementVNode("view", { class: "asset-name font-desc-black" }, "ETH")
            ]),
            vue.createElementVNode("image", {
              class: "form-icon",
              mode: "widthFix",
              src: "/static/img/expand.png"
            })
          ])
        ]),
        vue.createElementVNode("view", { class: "transfer-item" }, [
          vue.createElementVNode("view", {
            class: "transfer-item-title",
            style: { "display": "flex", "justify-content": "space-between", "align-items": "center" }
          }, [
            vue.createElementVNode("view", null, "Amount"),
            vue.createElementVNode("view", {
              class: "balance font-desc-gray-little",
              style: { "font-weight": "500" }
            }, "Balance : " + vue.toDisplayString($data.current_wallet.balance) + "ETH", 1)
          ]),
          vue.createElementVNode("view", { class: "transfer-form-item amount-input-part" }, [
            vue.createElementVNode("input", {
              class: "amount-input",
              type: "digit",
              name: "amount"
            }),
            vue.createElementVNode("view", { class: "amount-input-right" }, [
              vue.createElementVNode("view", { class: "font-desc-gray" }, "ETH"),
              vue.createElementVNode("view", { class: "use-max-amount font-desc-gray" }, "Max")
            ])
          ])
        ]),
        vue.createElementVNode("view", { class: "transfer-item" }, [
          vue.createElementVNode("view", {
            class: "transfer-item-title font-desc-gray",
            style: { "display": "flex", "justify-content": "space-between", "align-items": "center" }
          }, [
            vue.createElementVNode("view", null, "Gas Fee (Estimated)"),
            vue.createElementVNode("view", {
              class: "font-desc-gray-little",
              style: { "font-weight": "500" }
            }, vue.toDisplayString($data.gas_status_tip), 1)
          ]),
          vue.createElementVNode("view", {
            class: "transfer-form-item gas-fee-selector",
            onClick: _cache[1] || (_cache[1] = (...args) => $options.showGasPopup && $options.showGasPopup(...args))
          }, [
            vue.createElementVNode("view", { class: "gas-fee-left" }, [
              vue.createElementVNode("view", { class: "gas-fee-usd-worth font-desc-black" }, "$ " + vue.toDisplayString($data.gas_priority[$data.current_priority_index].cost_usd), 1),
              vue.createElementVNode("view", { class: "gas-fee-asset-worth font-desc-gray" }, vue.toDisplayString($data.gas_priority[$data.current_priority_index].cost) + " ETH", 1)
            ]),
            vue.createElementVNode("view", { class: "gas-fee-right" }, [
              vue.createElementVNode("view", { class: "estimated-time font-desc-black" }, vue.toDisplayString($data.gas_priority[$data.current_priority_index].time), 1),
              vue.createElementVNode("image", {
                class: "form-icon",
                mode: "widthFix",
                src: "/static/img/expand.png"
              })
            ])
          ])
        ]),
        vue.createElementVNode("view", { class: "confirm-btn" }, [
          vue.createElementVNode("button", {
            "form-type": "submit",
            class: "form-btn",
            type: "primary"
          }, "Confirm")
        ])
      ], 32),
      vue.createElementVNode("view", null, [
        vue.createCommentVNode(" gas \u8BBE\u7F6E\u5F39\u7A97 "),
        vue.createVNode(_component_uni_popup, { ref: "set_gas_popup" }, {
          default: vue.withCtx(() => [
            vue.createElementVNode("view", { class: "popup-container" }, [
              vue.createElementVNode("view", { class: "popup-top-area" }, [
                vue.createElementVNode("view"),
                vue.createElementVNode("view", { class: "popup-title-area font-second-title" }, "Set Gas Fee"),
                vue.createElementVNode("image", {
                  class: "popup-close-area",
                  mode: "widthFix",
                  src: "/static/img/close.png",
                  onClick: _cache[3] || (_cache[3] = (...args) => $options.closeGasPopup && $options.closeGasPopup(...args))
                })
              ]),
              vue.createElementVNode("view", { class: "popup-content-area" }, [
                vue.createElementVNode("view", { class: "gas-fee-overview" }, [
                  vue.createElementVNode("view", { class: "gas-fee-overview-line" }, [
                    vue.createElementVNode("view", { class: "font-third-title" }, "Gas Fee"),
                    vue.createElementVNode("view", {
                      class: "font-third-title",
                      style: { "margin-top": "10rpx" }
                    }, "$ " + vue.toDisplayString($data.gas_fee_usd), 1)
                  ]),
                  vue.createElementVNode("view", { class: "gas-fee-overview-line" }, [
                    vue.createElementVNode("view"),
                    vue.createElementVNode("view", { class: "font-desc-gray" }, vue.toDisplayString($data.gas_fee) + " ETH", 1)
                  ])
                ]),
                vue.createElementVNode("view", { class: "tab-swiper" }, [
                  vue.createElementVNode("view", null, [
                    vue.createVNode(_component_uni_segmented_control, {
                      current: $data.current_tab_index,
                      values: $data.tab_list,
                      "style-type": "button",
                      "active-color": "#1196db",
                      onClickItem: $options.onClickTabItem
                    }, null, 8, ["current", "values", "onClickItem"])
                  ])
                ]),
                vue.createElementVNode("view", { class: "tab-content" }, [
                  0 == $data.current_tab_index ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 0,
                    class: "tab-content-set-priority"
                  }, [
                    (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($data.gas_priority, (priority_item, priority_index) => {
                      return vue.openBlock(), vue.createElementBlock("view", {
                        class: vue.normalizeClass(["priority-item flex-row-start-center", [priority_index == 2 ? "last-priority-item" : ""]]),
                        onClick: ($event) => $options.selectPriority(priority_index)
                      }, [
                        vue.createElementVNode("view", { class: "priority-item-radio" }, [
                          vue.createElementVNode("view", { class: "radio-border flex-row-center-center" }, [
                            vue.createElementVNode("view", {
                              class: vue.normalizeClass([$data.current_priority_index == priority_index ? "priority-item-radio-active" : "priority-item-radio-inactive"])
                            }, null, 2)
                          ])
                        ]),
                        vue.createElementVNode("view", { class: "priority-item-detail" }, [
                          vue.createElementVNode("view", { class: "flex-row-space-between-center" }, [
                            vue.createElementVNode("view", { class: "font-desc-black" }, vue.toDisplayString(priority_item.level), 1),
                            vue.createElementVNode("view", { class: "font-desc-gray-little" }, vue.toDisplayString(priority_item.time), 1)
                          ]),
                          vue.createElementVNode("view", { class: "font-desc-gray-little" }, "MaxFee: " + vue.toDisplayString(priority_item.max_fee) + " GWEI", 1)
                        ])
                      ], 10, ["onClick"]);
                    }), 256)),
                    vue.createElementVNode("view", {
                      class: "flex-row-center-center font-desc-gray-little",
                      style: { "font-weight": "500", "margin": "30rpx 0 30rpx 0" }
                    }, [
                      vue.createElementVNode("view", null, vue.toDisplayString($data.gas_status_tip), 1)
                    ])
                  ])) : vue.createCommentVNode("v-if", true),
                  1 == $data.current_tab_index ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 1,
                    class: "tab-content-customize"
                  }, [
                    vue.createElementVNode("form", {
                      onSubmit: _cache[4] || (_cache[4] = (...args) => $options.setCustomizeGas && $options.setCustomizeGas(...args))
                    }, [
                      vue.createElementVNode("view", { class: "customize-gas-item" }, [
                        vue.createElementVNode("view", { class: "font-desc-gray" }, "MaxFee"),
                        vue.createElementVNode("view", { class: "customize-gas-item-input flex-row-space-between-center" }, [
                          vue.createElementVNode("input", {
                            type: "digit",
                            value: $data.customize_set_max_fee,
                            name: "customize_set_max_fee"
                          }, null, 8, ["value"]),
                          vue.createElementVNode("view", { class: "font-desc-gray" }, "GWEI")
                        ])
                      ]),
                      vue.createElementVNode("view", { class: "customize-gas-item" }, [
                        vue.createElementVNode("view", { class: "font-desc-gray" }, "MaxPriorityFee"),
                        vue.createElementVNode("view", { class: "customize-gas-item-input flex-row-space-between-center" }, [
                          vue.createElementVNode("input", {
                            type: "digit",
                            value: $data.customize_max_priority_fee,
                            name: "customize_max_priority_fee"
                          }, null, 8, ["value"]),
                          vue.createElementVNode("view", { class: "font-desc-gray" }, "GWEI")
                        ])
                      ]),
                      vue.createElementVNode("view", { class: "customize-gas-item" }, [
                        vue.createElementVNode("view", { class: "font-desc-gray" }, "Gas"),
                        vue.createElementVNode("view", { class: "customize-gas-item-input" }, [
                          vue.createElementVNode("input", {
                            type: "digit",
                            value: $data.customize_gas,
                            name: "customize_gas"
                          }, null, 8, ["value"])
                        ])
                      ]),
                      vue.createElementVNode("view", { style: { "margin-top": "40rpx" } }, [
                        vue.createElementVNode("button", {
                          "form-type": "submit",
                          class: "form-btn",
                          type: "primary"
                        }, "Set")
                      ])
                    ], 32)
                  ])) : vue.createCommentVNode("v-if", true)
                ])
              ])
            ])
          ]),
          _: 1
        }, 512),
        vue.createCommentVNode(" \u8F6C\u8D26\u786E\u8BA4\u5F39\u7A97 ")
      ])
    ]);
  }
  const PagesTransferTransfer = /* @__PURE__ */ _export_sfc(_sfc_main$2, [["render", _sfc_render$1], ["__file", "C:/Users/baba/Documents/HBuilderProjects/hello_demo/pages/transfer/transfer.vue"]]);
  const _sfc_main$1 = {
    data() {
      return {};
    },
    methods: {}
  };
  function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view");
  }
  const PagesTransactionList = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["render", _sfc_render], ["__file", "C:/Users/baba/Documents/HBuilderProjects/hello_demo/pages/transaction/list.vue"]]);
  __definePage("pages/start/start-up", PagesStartStartUp);
  __definePage("pages/index/index", PagesIndexIndex);
  __definePage("pages/component/component", PagesComponentComponent);
  __definePage("pages/api/api", PagesApiApi);
  __definePage("pages/schema/schema", PagesSchemaSchema);
  __definePage("pages/verify/unlock/unlock", PagesVerifyUnlockUnlock);
  __definePage("pages/setup-wallet/setup", PagesSetupWalletSetup);
  __definePage("pages/setup-wallet/create-pin", PagesSetupWalletCreatePin);
  __definePage("pages/setup-wallet/import-wallet", PagesSetupWalletImportWallet);
  __definePage("pages/setup-wallet/wallet-phrase", PagesSetupWalletWalletPhrase);
  __definePage("pages/setup-wallet/check-phrase", PagesSetupWalletCheckPhrase);
  __definePage("pages/index/wallet", PagesIndexWallet);
  __definePage("pages/transfer/transfer", PagesTransferTransfer);
  __definePage("pages/transaction/list", PagesTransactionList);
  const _sfc_main = {
    onLaunch: function() {
      formatAppLog("log", "at App.vue:4", "App Launch");
    },
    onShow: function() {
      formatAppLog("log", "at App.vue:7", "App Show");
    },
    onHide: function() {
      formatAppLog("log", "at App.vue:11", "App Hide");
    },
    globalData: {
      global_network_list: [],
      global_network_index: -1,
      global_is_app_data_init: false
    }
  };
  const App = /* @__PURE__ */ _export_sfc(_sfc_main, [["__file", "C:/Users/baba/Documents/HBuilderProjects/hello_demo/App.vue"]]);
  const en = {
    "locale.auto": "System",
    "locale.en": "English",
    "locale.zh-hans": "\u7B80\u4F53\u4E2D\u6587",
    "locale.zh-hant": "\u7E41\u4F53\u4E2D\u6587",
    "locale.ja": "\u65E5\u8BED",
    "index.title": "Hello i18n",
    "index.home": "Home",
    "index.component": "Component",
    "index.api": "API",
    "index.schema": "Schema",
    "index.demo": "uni-app globalization",
    "index.demo-description": "Include uni-framework, manifest.json, pages.json, tabbar, Page, Component, API, Schema",
    "index.detail": "Detail",
    "index.language": "Language",
    "index.language-info": "Settings",
    "index.system-language": "System language",
    "index.application-language": "Application language",
    "index.language-change-confirm": "Applying this setting will restart the app",
    "api.message": "Message",
    "schema.name": "Name",
    "schema.add": "Add",
    "schema.add-success": "Add success"
  };
  const zhHans = {
    "locale.auto": "\u7CFB\u7EDF",
    "locale.en": "English",
    "locale.zh-hans": "\u7B80\u4F53\u4E2D\u6587",
    "locale.zh-hant": "\u7E41\u4F53\u4E2D\u6587",
    "locale.ja": "\u65E5\u8BED",
    "index.title": "Hello i18n",
    "index.home": "\u4E3B\u9875",
    "index.component": "\u7EC4\u4EF6",
    "index.api": "API",
    "index.schema": "Schema",
    "index.demo": "uni-app \u56FD\u9645\u5316\u6F14\u793A",
    "index.demo-description": "\u5305\u542B uni-framework\u3001manifest.json\u3001pages.json\u3001tabbar\u3001\u9875\u9762\u3001\u7EC4\u4EF6\u3001API\u3001Schema",
    "index.detail": "\u8BE6\u60C5",
    "index.language": "\u8BED\u8A00",
    "index.language-info": "\u8BED\u8A00\u4FE1\u606F",
    "index.system-language": "\u7CFB\u7EDF\u8BED\u8A00",
    "index.application-language": "\u5E94\u7528\u8BED\u8A00",
    "index.language-change-confirm": "\u5E94\u7528\u6B64\u8BBE\u7F6E\u5C06\u91CD\u542FApp",
    "api.message": "\u63D0\u793A",
    "schema.name": "\u59D3\u540D",
    "schema.add": "\u65B0\u589E",
    "schema.add-success": "\u65B0\u589E\u6210\u529F"
  };
  const zhHant = {
    "locale.auto": "\u7CFB\u7D71",
    "locale.en": "English",
    "locale.zh-hans": "\u7B80\u4F53\u4E2D\u6587",
    "locale.zh-hant": "\u7E41\u9AD4\u4E2D\u6587",
    "locale.ja": "\u65E5\u8BED",
    "index.title": "Hello i18n",
    "index.home": "\u4E3B\u9801",
    "index.component": "\u7D44\u4EF6",
    "index.api": "API",
    "index.schema": "Schema",
    "index.demo": "uni-app \u570B\u969B\u5316\u6F14\u793A",
    "index.demo-description": "\u5305\u542B uni-framework\u3001manifest.json\u3001pages.json\u3001tabbar\u3001\u9801\u9762\u3001\u7D44\u4EF6\u3001API\u3001Schema",
    "index.detail": "\u8A73\u60C5",
    "index.language": "\u8A9E\u8A00",
    "index.language-info": "\u8A9E\u8A00\u4FE1\u606F",
    "index.system-language": "\u7CFB\u7D71\u8A9E\u8A00",
    "index.application-language": "\u61C9\u7528\u8A9E\u8A00",
    "index.language-change-confirm": "\u61C9\u7528\u6B64\u8A2D\u7F6E\u5C07\u91CD\u555FApp",
    "api.message": "\u63D0\u793A",
    "schema.name": "\u59D3\u540D",
    "schema.add": "\u65B0\u589E",
    "schema.add-success": "\u65B0\u589E\u6210\u529F"
  };
  const ja = {
    "locale.auto": "\u30B7\u30B9\u30C6\u30E0",
    "locale.en": "\u82F1\u8A9E",
    "locale.zh-hans": "\u7B80\u4F53\u4E2D\u6587",
    "locale.zh-hant": "\u7E41\u4F53\u4E2D\u6587",
    "locale.ja": "\u65E5\u8BED",
    "index.title": "Hello i18n",
    "index.home": "\u30DB\u30FC\u30E0",
    "index.component": "\u30B3\u30F3\u30DD\u30FC\u30CD\u30F3\u30C8",
    "index.api": "API",
    "index.schema": "Schema",
    "index.demo": "uni-app globalization",
    "index.demo-description": "\u30E6\u30CB\u30D5\u30EC\u30FC\u30E0\u30EF\u30FC\u30AF\u3001manifest.json\u3001pages.json\u3001\u30BF\u30D6\u30D0\u30FC\u3001\u30DA\u30FC\u30B8\u3001\u30B3\u30F3\u30DD\u30FC\u30CD\u30F3\u30C8\u3001API\u3092\u542B\u3081\u308B\u3001Schema",
    "index.detail": "\u8A73\u7D30",
    "index.language": "\u8A00\u8A9E",
    "index.language-info": "\u8A2D\u5B9A",
    "index.system-language": "\u30B7\u30B9\u30C6\u30E0\u8A00\u8A9E",
    "index.application-language": "\u30A2\u30D7\u30EA\u30B1\u30FC\u30B7\u30E7\u30F3\u8A00\u8A9E",
    "index.language-change-confirm": "\u3053\u306E\u8A2D\u5B9A\u3092\u9069\u7528\u3059\u308B\u3068\u3001\u30A2\u30D7\u30EA\u304C\u518D\u8D77\u52D5\u3057\u307E\u3059",
    "api.message": "\u30E1\u30C3\u30BB\u30FC\u30B8",
    "schema.add": "\u8FFD\u52A0",
    "schema.add-success": "\u6210\u529F\u3092\u8FFD\u52A0"
  };
  const messages = {
    en,
    "zh-Hans": zhHans,
    "zh-Hant": zhHant,
    ja
  };
  /*!
    * @intlify/shared v9.1.9
    * (c) 2021 kazuya kawaguchi
    * Released under the MIT License.
    */
  const inBrowser = typeof window !== "undefined";
  let mark;
  let measure;
  {
    const perf = inBrowser && window.performance;
    if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {
      mark = (tag) => perf.mark(tag);
      measure = (name, startTag, endTag) => {
        perf.measure(name, startTag, endTag);
        perf.clearMarks(startTag);
        perf.clearMarks(endTag);
      };
    }
  }
  const RE_ARGS = /\{([0-9a-zA-Z]+)\}/g;
  function format(message, ...args) {
    if (args.length === 1 && isObject$1(args[0])) {
      args = args[0];
    }
    if (!args || !args.hasOwnProperty) {
      args = {};
    }
    return message.replace(RE_ARGS, (match, identifier) => {
      return args.hasOwnProperty(identifier) ? args[identifier] : "";
    });
  }
  const hasSymbol = typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol";
  const makeSymbol = (name) => hasSymbol ? Symbol(name) : name;
  const generateFormatCacheKey = (locale, key, source) => friendlyJSONstringify({ l: locale, k: key, s: source });
  const friendlyJSONstringify = (json) => JSON.stringify(json).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029").replace(/\u0027/g, "\\u0027");
  const isNumber = (val) => typeof val === "number" && isFinite(val);
  const isDate = (val) => toTypeString(val) === "[object Date]";
  const isRegExp = (val) => toTypeString(val) === "[object RegExp]";
  const isEmptyObject = (val) => isPlainObject(val) && Object.keys(val).length === 0;
  function warn(msg, err) {
    if (typeof console !== "undefined") {
      console.warn(`[intlify] ` + msg);
      if (err) {
        console.warn(err.stack);
      }
    }
  }
  const assign = Object.assign;
  let _globalThis;
  const getGlobalThis = () => {
    return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
  };
  function escapeHtml(rawText) {
    return rawText.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;");
  }
  const hasOwnProperty$1 = Object.prototype.hasOwnProperty;
  function hasOwn$1(obj, key) {
    return hasOwnProperty$1.call(obj, key);
  }
  const isArray = Array.isArray;
  const isFunction = (val) => typeof val === "function";
  const isString = (val) => typeof val === "string";
  const isBoolean = (val) => typeof val === "boolean";
  const isObject$1 = (val) => val !== null && typeof val === "object";
  const objectToString = Object.prototype.toString;
  const toTypeString = (value) => objectToString.call(value);
  const isPlainObject = (val) => toTypeString(val) === "[object Object]";
  const toDisplayString = (val) => {
    return val == null ? "" : isArray(val) || isPlainObject(val) && val.toString === objectToString ? JSON.stringify(val, null, 2) : String(val);
  };
  const RANGE = 2;
  function generateCodeFrame(source, start = 0, end = source.length) {
    const lines = source.split(/\r?\n/);
    let count = 0;
    const res = [];
    for (let i2 = 0; i2 < lines.length; i2++) {
      count += lines[i2].length + 1;
      if (count >= start) {
        for (let j2 = i2 - RANGE; j2 <= i2 + RANGE || end > count; j2++) {
          if (j2 < 0 || j2 >= lines.length)
            continue;
          const line = j2 + 1;
          res.push(`${line}${" ".repeat(3 - String(line).length)}|  ${lines[j2]}`);
          const lineLength = lines[j2].length;
          if (j2 === i2) {
            const pad = start - (count - lineLength) + 1;
            const length = Math.max(1, end > count ? lineLength - pad : end - start);
            res.push(`   |  ` + " ".repeat(pad) + "^".repeat(length));
          } else if (j2 > i2) {
            if (end > count) {
              const length = Math.max(Math.min(end - count, lineLength), 1);
              res.push(`   |  ` + "^".repeat(length));
            }
            count += lineLength + 1;
          }
        }
        break;
      }
    }
    return res.join("\n");
  }
  function createEmitter() {
    const events = /* @__PURE__ */ new Map();
    const emitter = {
      events,
      on(event, handler) {
        const handlers = events.get(event);
        const added = handlers && handlers.push(handler);
        if (!added) {
          events.set(event, [handler]);
        }
      },
      off(event, handler) {
        const handlers = events.get(event);
        if (handlers) {
          handlers.splice(handlers.indexOf(handler) >>> 0, 1);
        }
      },
      emit(event, payload) {
        (events.get(event) || []).slice().map((handler) => handler(payload));
        (events.get("*") || []).slice().map((handler) => handler(event, payload));
      }
    };
    return emitter;
  }
  /*!
    * @intlify/message-resolver v9.1.9
    * (c) 2021 kazuya kawaguchi
    * Released under the MIT License.
    */
  const hasOwnProperty = Object.prototype.hasOwnProperty;
  function hasOwn(obj, key) {
    return hasOwnProperty.call(obj, key);
  }
  const isObject = (val) => val !== null && typeof val === "object";
  const pathStateMachine = [];
  pathStateMachine[0] = {
    ["w"]: [0],
    ["i"]: [3, 0],
    ["["]: [4],
    ["o"]: [7]
  };
  pathStateMachine[1] = {
    ["w"]: [1],
    ["."]: [2],
    ["["]: [4],
    ["o"]: [7]
  };
  pathStateMachine[2] = {
    ["w"]: [2],
    ["i"]: [3, 0],
    ["0"]: [3, 0]
  };
  pathStateMachine[3] = {
    ["i"]: [3, 0],
    ["0"]: [3, 0],
    ["w"]: [1, 1],
    ["."]: [2, 1],
    ["["]: [4, 1],
    ["o"]: [7, 1]
  };
  pathStateMachine[4] = {
    ["'"]: [5, 0],
    ['"']: [6, 0],
    ["["]: [
      4,
      2
    ],
    ["]"]: [1, 3],
    ["o"]: 8,
    ["l"]: [4, 0]
  };
  pathStateMachine[5] = {
    ["'"]: [4, 0],
    ["o"]: 8,
    ["l"]: [5, 0]
  };
  pathStateMachine[6] = {
    ['"']: [4, 0],
    ["o"]: 8,
    ["l"]: [6, 0]
  };
  const literalValueRE = /^\s?(?:true|false|-?[\d.]+|'[^']*'|"[^"]*")\s?$/;
  function isLiteral(exp) {
    return literalValueRE.test(exp);
  }
  function stripQuotes(str) {
    const a2 = str.charCodeAt(0);
    const b2 = str.charCodeAt(str.length - 1);
    return a2 === b2 && (a2 === 34 || a2 === 39) ? str.slice(1, -1) : str;
  }
  function getPathCharType(ch) {
    if (ch === void 0 || ch === null) {
      return "o";
    }
    const code = ch.charCodeAt(0);
    switch (code) {
      case 91:
      case 93:
      case 46:
      case 34:
      case 39:
        return ch;
      case 95:
      case 36:
      case 45:
        return "i";
      case 9:
      case 10:
      case 13:
      case 160:
      case 65279:
      case 8232:
      case 8233:
        return "w";
    }
    return "i";
  }
  function formatSubPath(path) {
    const trimmed = path.trim();
    if (path.charAt(0) === "0" && isNaN(parseInt(path))) {
      return false;
    }
    return isLiteral(trimmed) ? stripQuotes(trimmed) : "*" + trimmed;
  }
  function parse(path) {
    const keys = [];
    let index = -1;
    let mode = 0;
    let subPathDepth = 0;
    let c2;
    let key;
    let newChar;
    let type;
    let transition;
    let action;
    let typeMap;
    const actions = [];
    actions[0] = () => {
      if (key === void 0) {
        key = newChar;
      } else {
        key += newChar;
      }
    };
    actions[1] = () => {
      if (key !== void 0) {
        keys.push(key);
        key = void 0;
      }
    };
    actions[2] = () => {
      actions[0]();
      subPathDepth++;
    };
    actions[3] = () => {
      if (subPathDepth > 0) {
        subPathDepth--;
        mode = 4;
        actions[0]();
      } else {
        subPathDepth = 0;
        if (key === void 0) {
          return false;
        }
        key = formatSubPath(key);
        if (key === false) {
          return false;
        } else {
          actions[1]();
        }
      }
    };
    function maybeUnescapeQuote() {
      const nextChar = path[index + 1];
      if (mode === 5 && nextChar === "'" || mode === 6 && nextChar === '"') {
        index++;
        newChar = "\\" + nextChar;
        actions[0]();
        return true;
      }
    }
    while (mode !== null) {
      index++;
      c2 = path[index];
      if (c2 === "\\" && maybeUnescapeQuote()) {
        continue;
      }
      type = getPathCharType(c2);
      typeMap = pathStateMachine[mode];
      transition = typeMap[type] || typeMap["l"] || 8;
      if (transition === 8) {
        return;
      }
      mode = transition[0];
      if (transition[1] !== void 0) {
        action = actions[transition[1]];
        if (action) {
          newChar = c2;
          if (action() === false) {
            return;
          }
        }
      }
      if (mode === 7) {
        return keys;
      }
    }
  }
  const cache = /* @__PURE__ */ new Map();
  function resolveValue(obj, path) {
    if (!isObject(obj)) {
      return null;
    }
    let hit = cache.get(path);
    if (!hit) {
      hit = parse(path);
      if (hit) {
        cache.set(path, hit);
      }
    }
    if (!hit) {
      return null;
    }
    const len = hit.length;
    let last = obj;
    let i2 = 0;
    while (i2 < len) {
      const val = last[hit[i2]];
      if (val === void 0) {
        return null;
      }
      last = val;
      i2++;
    }
    return last;
  }
  function handleFlatJson(obj) {
    if (!isObject(obj)) {
      return obj;
    }
    for (const key in obj) {
      if (!hasOwn(obj, key)) {
        continue;
      }
      if (!key.includes(".")) {
        if (isObject(obj[key])) {
          handleFlatJson(obj[key]);
        }
      } else {
        const subKeys = key.split(".");
        const lastIndex = subKeys.length - 1;
        let currentObj = obj;
        for (let i2 = 0; i2 < lastIndex; i2++) {
          if (!(subKeys[i2] in currentObj)) {
            currentObj[subKeys[i2]] = {};
          }
          currentObj = currentObj[subKeys[i2]];
        }
        currentObj[subKeys[lastIndex]] = obj[key];
        delete obj[key];
        if (isObject(currentObj[subKeys[lastIndex]])) {
          handleFlatJson(currentObj[subKeys[lastIndex]]);
        }
      }
    }
    return obj;
  }
  /*!
    * @intlify/runtime v9.1.9
    * (c) 2021 kazuya kawaguchi
    * Released under the MIT License.
    */
  const DEFAULT_MODIFIER = (str) => str;
  const DEFAULT_MESSAGE = (ctx) => "";
  const DEFAULT_MESSAGE_DATA_TYPE = "text";
  const DEFAULT_NORMALIZE = (values) => values.length === 0 ? "" : values.join("");
  const DEFAULT_INTERPOLATE = toDisplayString;
  function pluralDefault(choice, choicesLength) {
    choice = Math.abs(choice);
    if (choicesLength === 2) {
      return choice ? choice > 1 ? 1 : 0 : 1;
    }
    return choice ? Math.min(choice, 2) : 0;
  }
  function getPluralIndex(options) {
    const index = isNumber(options.pluralIndex) ? options.pluralIndex : -1;
    return options.named && (isNumber(options.named.count) || isNumber(options.named.n)) ? isNumber(options.named.count) ? options.named.count : isNumber(options.named.n) ? options.named.n : index : index;
  }
  function normalizeNamed(pluralIndex, props) {
    if (!props.count) {
      props.count = pluralIndex;
    }
    if (!props.n) {
      props.n = pluralIndex;
    }
  }
  function createMessageContext(options = {}) {
    const locale = options.locale;
    const pluralIndex = getPluralIndex(options);
    const pluralRule = isObject$1(options.pluralRules) && isString(locale) && isFunction(options.pluralRules[locale]) ? options.pluralRules[locale] : pluralDefault;
    const orgPluralRule = isObject$1(options.pluralRules) && isString(locale) && isFunction(options.pluralRules[locale]) ? pluralDefault : void 0;
    const plural = (messages2) => messages2[pluralRule(pluralIndex, messages2.length, orgPluralRule)];
    const _list = options.list || [];
    const list = (index) => _list[index];
    const _named = options.named || {};
    isNumber(options.pluralIndex) && normalizeNamed(pluralIndex, _named);
    const named = (key) => _named[key];
    function message(key) {
      const msg = isFunction(options.messages) ? options.messages(key) : isObject$1(options.messages) ? options.messages[key] : false;
      return !msg ? options.parent ? options.parent.message(key) : DEFAULT_MESSAGE : msg;
    }
    const _modifier = (name) => options.modifiers ? options.modifiers[name] : DEFAULT_MODIFIER;
    const normalize = isPlainObject(options.processor) && isFunction(options.processor.normalize) ? options.processor.normalize : DEFAULT_NORMALIZE;
    const interpolate = isPlainObject(options.processor) && isFunction(options.processor.interpolate) ? options.processor.interpolate : DEFAULT_INTERPOLATE;
    const type = isPlainObject(options.processor) && isString(options.processor.type) ? options.processor.type : DEFAULT_MESSAGE_DATA_TYPE;
    const ctx = {
      ["list"]: list,
      ["named"]: named,
      ["plural"]: plural,
      ["linked"]: (key, modifier) => {
        const msg = message(key)(ctx);
        return isString(modifier) ? _modifier(modifier)(msg) : msg;
      },
      ["message"]: message,
      ["type"]: type,
      ["interpolate"]: interpolate,
      ["normalize"]: normalize
    };
    return ctx;
  }
  /*!
    * @intlify/message-compiler v9.1.9
    * (c) 2021 kazuya kawaguchi
    * Released under the MIT License.
    */
  const errorMessages$2 = {
    [0]: `Expected token: '{0}'`,
    [1]: `Invalid token in placeholder: '{0}'`,
    [2]: `Unterminated single quote in placeholder`,
    [3]: `Unknown escape sequence: \\{0}`,
    [4]: `Invalid unicode escape sequence: {0}`,
    [5]: `Unbalanced closing brace`,
    [6]: `Unterminated closing brace`,
    [7]: `Empty placeholder`,
    [8]: `Not allowed nest placeholder`,
    [9]: `Invalid linked format`,
    [10]: `Plural must have messages`,
    [11]: `Unexpected empty linked modifier`,
    [12]: `Unexpected empty linked key`,
    [13]: `Unexpected lexical analysis in token: '{0}'`
  };
  function createCompileError(code, loc, options = {}) {
    const { domain, messages: messages2, args } = options;
    const msg = format((messages2 || errorMessages$2)[code] || "", ...args || []);
    const error = new SyntaxError(String(msg));
    error.code = code;
    if (loc) {
      error.location = loc;
    }
    error.domain = domain;
    return error;
  }
  /*!
    * @intlify/devtools-if v9.1.9
    * (c) 2021 kazuya kawaguchi
    * Released under the MIT License.
    */
  const IntlifyDevToolsHooks = {
    I18nInit: "i18n:init",
    FunctionTranslate: "function:translate"
  };
  /*!
    * @intlify/core-base v9.1.9
    * (c) 2021 kazuya kawaguchi
    * Released under the MIT License.
    */
  let devtools = null;
  function setDevToolsHook(hook) {
    devtools = hook;
  }
  function initI18nDevTools(i18n2, version2, meta) {
    devtools && devtools.emit(IntlifyDevToolsHooks.I18nInit, {
      timestamp: Date.now(),
      i18n: i18n2,
      version: version2,
      meta
    });
  }
  const translateDevTools = /* @__PURE__ */ createDevToolsHook(IntlifyDevToolsHooks.FunctionTranslate);
  function createDevToolsHook(hook) {
    return (payloads) => devtools && devtools.emit(hook, payloads);
  }
  const warnMessages$1 = {
    [0]: `Not found '{key}' key in '{locale}' locale messages.`,
    [1]: `Fall back to translate '{key}' key with '{target}' locale.`,
    [2]: `Cannot format a number value due to not supported Intl.NumberFormat.`,
    [3]: `Fall back to number format '{key}' key with '{target}' locale.`,
    [4]: `Cannot format a date value due to not supported Intl.DateTimeFormat.`,
    [5]: `Fall back to datetime format '{key}' key with '{target}' locale.`
  };
  function getWarnMessage$1(code, ...args) {
    return format(warnMessages$1[code], ...args);
  }
  const VERSION$1 = "9.1.9";
  const NOT_REOSLVED = -1;
  const MISSING_RESOLVE_VALUE = "";
  function getDefaultLinkedModifiers() {
    return {
      upper: (val) => isString(val) ? val.toUpperCase() : val,
      lower: (val) => isString(val) ? val.toLowerCase() : val,
      capitalize: (val) => isString(val) ? `${val.charAt(0).toLocaleUpperCase()}${val.substr(1)}` : val
    };
  }
  let _compiler;
  let _additionalMeta = null;
  const setAdditionalMeta = (meta) => {
    _additionalMeta = meta;
  };
  const getAdditionalMeta = () => _additionalMeta;
  let _cid = 0;
  function createCoreContext(options = {}) {
    const version2 = isString(options.version) ? options.version : VERSION$1;
    const locale = isString(options.locale) ? options.locale : "en-US";
    const fallbackLocale = isArray(options.fallbackLocale) || isPlainObject(options.fallbackLocale) || isString(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : locale;
    const messages2 = isPlainObject(options.messages) ? options.messages : { [locale]: {} };
    const datetimeFormats = isPlainObject(options.datetimeFormats) ? options.datetimeFormats : { [locale]: {} };
    const numberFormats = isPlainObject(options.numberFormats) ? options.numberFormats : { [locale]: {} };
    const modifiers = assign({}, options.modifiers || {}, getDefaultLinkedModifiers());
    const pluralRules = options.pluralRules || {};
    const missing = isFunction(options.missing) ? options.missing : null;
    const missingWarn = isBoolean(options.missingWarn) || isRegExp(options.missingWarn) ? options.missingWarn : true;
    const fallbackWarn = isBoolean(options.fallbackWarn) || isRegExp(options.fallbackWarn) ? options.fallbackWarn : true;
    const fallbackFormat = !!options.fallbackFormat;
    const unresolving = !!options.unresolving;
    const postTranslation = isFunction(options.postTranslation) ? options.postTranslation : null;
    const processor = isPlainObject(options.processor) ? options.processor : null;
    const warnHtmlMessage = isBoolean(options.warnHtmlMessage) ? options.warnHtmlMessage : true;
    const escapeParameter = !!options.escapeParameter;
    const messageCompiler = isFunction(options.messageCompiler) ? options.messageCompiler : _compiler;
    const onWarn = isFunction(options.onWarn) ? options.onWarn : warn;
    const internalOptions = options;
    const __datetimeFormatters = isObject$1(internalOptions.__datetimeFormatters) ? internalOptions.__datetimeFormatters : /* @__PURE__ */ new Map();
    const __numberFormatters = isObject$1(internalOptions.__numberFormatters) ? internalOptions.__numberFormatters : /* @__PURE__ */ new Map();
    const __meta = isObject$1(internalOptions.__meta) ? internalOptions.__meta : {};
    _cid++;
    const context = {
      version: version2,
      cid: _cid,
      locale,
      fallbackLocale,
      messages: messages2,
      datetimeFormats,
      numberFormats,
      modifiers,
      pluralRules,
      missing,
      missingWarn,
      fallbackWarn,
      fallbackFormat,
      unresolving,
      postTranslation,
      processor,
      warnHtmlMessage,
      escapeParameter,
      messageCompiler,
      onWarn,
      __datetimeFormatters,
      __numberFormatters,
      __meta
    };
    {
      context.__v_emitter = internalOptions.__v_emitter != null ? internalOptions.__v_emitter : void 0;
    }
    {
      initI18nDevTools(context, version2, __meta);
    }
    return context;
  }
  function isTranslateFallbackWarn(fallback, key) {
    return fallback instanceof RegExp ? fallback.test(key) : fallback;
  }
  function isTranslateMissingWarn(missing, key) {
    return missing instanceof RegExp ? missing.test(key) : missing;
  }
  function handleMissing(context, key, locale, missingWarn, type) {
    const { missing, onWarn } = context;
    {
      const emitter = context.__v_emitter;
      if (emitter) {
        emitter.emit("missing", {
          locale,
          key,
          type,
          groupId: `${type}:${key}`
        });
      }
    }
    if (missing !== null) {
      const ret = missing(context, locale, key, type);
      return isString(ret) ? ret : key;
    } else {
      if (isTranslateMissingWarn(missingWarn, key)) {
        onWarn(getWarnMessage$1(0, { key, locale }));
      }
      return key;
    }
  }
  function getLocaleChain(ctx, fallback, start) {
    const context = ctx;
    if (!context.__localeChainCache) {
      context.__localeChainCache = /* @__PURE__ */ new Map();
    }
    let chain = context.__localeChainCache.get(start);
    if (!chain) {
      chain = [];
      let block = [start];
      while (isArray(block)) {
        block = appendBlockToChain(chain, block, fallback);
      }
      const defaults = isArray(fallback) ? fallback : isPlainObject(fallback) ? fallback["default"] ? fallback["default"] : null : fallback;
      block = isString(defaults) ? [defaults] : defaults;
      if (isArray(block)) {
        appendBlockToChain(chain, block, false);
      }
      context.__localeChainCache.set(start, chain);
    }
    return chain;
  }
  function appendBlockToChain(chain, block, blocks2) {
    let follow = true;
    for (let i2 = 0; i2 < block.length && isBoolean(follow); i2++) {
      const locale = block[i2];
      if (isString(locale)) {
        follow = appendLocaleToChain(chain, block[i2], blocks2);
      }
    }
    return follow;
  }
  function appendLocaleToChain(chain, locale, blocks2) {
    let follow;
    const tokens = locale.split("-");
    do {
      const target = tokens.join("-");
      follow = appendItemToChain(chain, target, blocks2);
      tokens.splice(-1, 1);
    } while (tokens.length && follow === true);
    return follow;
  }
  function appendItemToChain(chain, target, blocks2) {
    let follow = false;
    if (!chain.includes(target)) {
      follow = true;
      if (target) {
        follow = target[target.length - 1] !== "!";
        const locale = target.replace(/!/g, "");
        chain.push(locale);
        if ((isArray(blocks2) || isPlainObject(blocks2)) && blocks2[locale]) {
          follow = blocks2[locale];
        }
      }
    }
    return follow;
  }
  function updateFallbackLocale(ctx, locale, fallback) {
    const context = ctx;
    context.__localeChainCache = /* @__PURE__ */ new Map();
    getLocaleChain(ctx, fallback, locale);
  }
  function createCoreError(code) {
    return createCompileError(code, null, { messages: errorMessages$1 });
  }
  const errorMessages$1 = {
    [14]: "Invalid arguments",
    [15]: "The date provided is an invalid Date object.Make sure your Date represents a valid date.",
    [16]: "The argument provided is not a valid ISO date string"
  };
  const NOOP_MESSAGE_FUNCTION = () => "";
  const isMessageFunction = (val) => isFunction(val);
  function translate(context, ...args) {
    const { fallbackFormat, postTranslation, unresolving, fallbackLocale, messages: messages2 } = context;
    const [key, options] = parseTranslateArgs(...args);
    const missingWarn = isBoolean(options.missingWarn) ? options.missingWarn : context.missingWarn;
    const fallbackWarn = isBoolean(options.fallbackWarn) ? options.fallbackWarn : context.fallbackWarn;
    const escapeParameter = isBoolean(options.escapeParameter) ? options.escapeParameter : context.escapeParameter;
    const resolvedMessage = !!options.resolvedMessage;
    const defaultMsgOrKey = isString(options.default) || isBoolean(options.default) ? !isBoolean(options.default) ? options.default : key : fallbackFormat ? key : "";
    const enableDefaultMsg = fallbackFormat || defaultMsgOrKey !== "";
    const locale = isString(options.locale) ? options.locale : context.locale;
    escapeParameter && escapeParams(options);
    let [format2, targetLocale, message] = !resolvedMessage ? resolveMessageFormat(context, key, locale, fallbackLocale, fallbackWarn, missingWarn) : [
      key,
      locale,
      messages2[locale] || {}
    ];
    let cacheBaseKey = key;
    if (!resolvedMessage && !(isString(format2) || isMessageFunction(format2))) {
      if (enableDefaultMsg) {
        format2 = defaultMsgOrKey;
        cacheBaseKey = format2;
      }
    }
    if (!resolvedMessage && (!(isString(format2) || isMessageFunction(format2)) || !isString(targetLocale))) {
      return unresolving ? NOT_REOSLVED : key;
    }
    if (isString(format2) && context.messageCompiler == null) {
      warn(`The message format compilation is not supported in this build. Because message compiler isn't included. You need to pre-compilation all message format. So translate function return '${key}'.`);
      return key;
    }
    let occurred = false;
    const errorDetector = () => {
      occurred = true;
    };
    const msg = !isMessageFunction(format2) ? compileMessageFormat(context, key, targetLocale, format2, cacheBaseKey, errorDetector) : format2;
    if (occurred) {
      return format2;
    }
    const ctxOptions = getMessageContextOptions(context, targetLocale, message, options);
    const msgContext = createMessageContext(ctxOptions);
    const messaged = evaluateMessage(context, msg, msgContext);
    const ret = postTranslation ? postTranslation(messaged) : messaged;
    {
      const payloads = {
        timestamp: Date.now(),
        key: isString(key) ? key : isMessageFunction(format2) ? format2.key : "",
        locale: targetLocale || (isMessageFunction(format2) ? format2.locale : ""),
        format: isString(format2) ? format2 : isMessageFunction(format2) ? format2.source : "",
        message: ret
      };
      payloads.meta = assign({}, context.__meta, getAdditionalMeta() || {});
      translateDevTools(payloads);
    }
    return ret;
  }
  function escapeParams(options) {
    if (isArray(options.list)) {
      options.list = options.list.map((item) => isString(item) ? escapeHtml(item) : item);
    } else if (isObject$1(options.named)) {
      Object.keys(options.named).forEach((key) => {
        if (isString(options.named[key])) {
          options.named[key] = escapeHtml(options.named[key]);
        }
      });
    }
  }
  function resolveMessageFormat(context, key, locale, fallbackLocale, fallbackWarn, missingWarn) {
    const { messages: messages2, onWarn } = context;
    const locales = getLocaleChain(context, fallbackLocale, locale);
    let message = {};
    let targetLocale;
    let format2 = null;
    let from = locale;
    let to = null;
    const type = "translate";
    for (let i2 = 0; i2 < locales.length; i2++) {
      targetLocale = to = locales[i2];
      if (locale !== targetLocale && isTranslateFallbackWarn(fallbackWarn, key)) {
        onWarn(getWarnMessage$1(1, {
          key,
          target: targetLocale
        }));
      }
      if (locale !== targetLocale) {
        const emitter = context.__v_emitter;
        if (emitter) {
          emitter.emit("fallback", {
            type,
            key,
            from,
            to,
            groupId: `${type}:${key}`
          });
        }
      }
      message = messages2[targetLocale] || {};
      let start = null;
      let startTag;
      let endTag;
      if (inBrowser) {
        start = window.performance.now();
        startTag = "intlify-message-resolve-start";
        endTag = "intlify-message-resolve-end";
        mark && mark(startTag);
      }
      if ((format2 = resolveValue(message, key)) === null) {
        format2 = message[key];
      }
      if (inBrowser) {
        const end = window.performance.now();
        const emitter = context.__v_emitter;
        if (emitter && start && format2) {
          emitter.emit("message-resolve", {
            type: "message-resolve",
            key,
            message: format2,
            time: end - start,
            groupId: `${type}:${key}`
          });
        }
        if (startTag && endTag && mark && measure) {
          mark(endTag);
          measure("intlify message resolve", startTag, endTag);
        }
      }
      if (isString(format2) || isFunction(format2))
        break;
      const missingRet = handleMissing(context, key, targetLocale, missingWarn, type);
      if (missingRet !== key) {
        format2 = missingRet;
      }
      from = to;
    }
    return [format2, targetLocale, message];
  }
  function compileMessageFormat(context, key, targetLocale, format2, cacheBaseKey, errorDetector) {
    const { messageCompiler, warnHtmlMessage } = context;
    if (isMessageFunction(format2)) {
      const msg2 = format2;
      msg2.locale = msg2.locale || targetLocale;
      msg2.key = msg2.key || key;
      return msg2;
    }
    let start = null;
    let startTag;
    let endTag;
    if (inBrowser) {
      start = window.performance.now();
      startTag = "intlify-message-compilation-start";
      endTag = "intlify-message-compilation-end";
      mark && mark(startTag);
    }
    const msg = messageCompiler(format2, getCompileOptions(context, targetLocale, cacheBaseKey, format2, warnHtmlMessage, errorDetector));
    if (inBrowser) {
      const end = window.performance.now();
      const emitter = context.__v_emitter;
      if (emitter && start) {
        emitter.emit("message-compilation", {
          type: "message-compilation",
          message: format2,
          time: end - start,
          groupId: `${"translate"}:${key}`
        });
      }
      if (startTag && endTag && mark && measure) {
        mark(endTag);
        measure("intlify message compilation", startTag, endTag);
      }
    }
    msg.locale = targetLocale;
    msg.key = key;
    msg.source = format2;
    return msg;
  }
  function evaluateMessage(context, msg, msgCtx) {
    let start = null;
    let startTag;
    let endTag;
    if (inBrowser) {
      start = window.performance.now();
      startTag = "intlify-message-evaluation-start";
      endTag = "intlify-message-evaluation-end";
      mark && mark(startTag);
    }
    const messaged = msg(msgCtx);
    if (inBrowser) {
      const end = window.performance.now();
      const emitter = context.__v_emitter;
      if (emitter && start) {
        emitter.emit("message-evaluation", {
          type: "message-evaluation",
          value: messaged,
          time: end - start,
          groupId: `${"translate"}:${msg.key}`
        });
      }
      if (startTag && endTag && mark && measure) {
        mark(endTag);
        measure("intlify message evaluation", startTag, endTag);
      }
    }
    return messaged;
  }
  function parseTranslateArgs(...args) {
    const [arg1, arg2, arg3] = args;
    const options = {};
    if (!isString(arg1) && !isNumber(arg1) && !isMessageFunction(arg1)) {
      throw createCoreError(14);
    }
    const key = isNumber(arg1) ? String(arg1) : isMessageFunction(arg1) ? arg1 : arg1;
    if (isNumber(arg2)) {
      options.plural = arg2;
    } else if (isString(arg2)) {
      options.default = arg2;
    } else if (isPlainObject(arg2) && !isEmptyObject(arg2)) {
      options.named = arg2;
    } else if (isArray(arg2)) {
      options.list = arg2;
    }
    if (isNumber(arg3)) {
      options.plural = arg3;
    } else if (isString(arg3)) {
      options.default = arg3;
    } else if (isPlainObject(arg3)) {
      assign(options, arg3);
    }
    return [key, options];
  }
  function getCompileOptions(context, locale, key, source, warnHtmlMessage, errorDetector) {
    return {
      warnHtmlMessage,
      onError: (err) => {
        errorDetector && errorDetector(err);
        {
          const message = `Message compilation error: ${err.message}`;
          const codeFrame = err.location && generateCodeFrame(source, err.location.start.offset, err.location.end.offset);
          const emitter = context.__v_emitter;
          if (emitter) {
            emitter.emit("compile-error", {
              message: source,
              error: err.message,
              start: err.location && err.location.start.offset,
              end: err.location && err.location.end.offset,
              groupId: `${"translate"}:${key}`
            });
          }
          console.error(codeFrame ? `${message}
${codeFrame}` : message);
        }
      },
      onCacheKey: (source2) => generateFormatCacheKey(locale, key, source2)
    };
  }
  function getMessageContextOptions(context, locale, message, options) {
    const { modifiers, pluralRules } = context;
    const resolveMessage = (key) => {
      const val = resolveValue(message, key);
      if (isString(val)) {
        let occurred = false;
        const errorDetector = () => {
          occurred = true;
        };
        const msg = compileMessageFormat(context, key, locale, val, key, errorDetector);
        return !occurred ? msg : NOOP_MESSAGE_FUNCTION;
      } else if (isMessageFunction(val)) {
        return val;
      } else {
        return NOOP_MESSAGE_FUNCTION;
      }
    };
    const ctxOptions = {
      locale,
      modifiers,
      pluralRules,
      messages: resolveMessage
    };
    if (context.processor) {
      ctxOptions.processor = context.processor;
    }
    if (options.list) {
      ctxOptions.list = options.list;
    }
    if (options.named) {
      ctxOptions.named = options.named;
    }
    if (isNumber(options.plural)) {
      ctxOptions.pluralIndex = options.plural;
    }
    return ctxOptions;
  }
  const intlDefined = typeof Intl !== "undefined";
  const Availabilities = {
    dateTimeFormat: intlDefined && typeof Intl.DateTimeFormat !== "undefined",
    numberFormat: intlDefined && typeof Intl.NumberFormat !== "undefined"
  };
  function datetime(context, ...args) {
    const { datetimeFormats, unresolving, fallbackLocale, onWarn } = context;
    const { __datetimeFormatters } = context;
    if (!Availabilities.dateTimeFormat) {
      onWarn(getWarnMessage$1(4));
      return MISSING_RESOLVE_VALUE;
    }
    const [key, value, options, overrides] = parseDateTimeArgs(...args);
    const missingWarn = isBoolean(options.missingWarn) ? options.missingWarn : context.missingWarn;
    const fallbackWarn = isBoolean(options.fallbackWarn) ? options.fallbackWarn : context.fallbackWarn;
    const part = !!options.part;
    const locale = isString(options.locale) ? options.locale : context.locale;
    const locales = getLocaleChain(context, fallbackLocale, locale);
    if (!isString(key) || key === "") {
      return new Intl.DateTimeFormat(locale).format(value);
    }
    let datetimeFormat = {};
    let targetLocale;
    let format2 = null;
    let from = locale;
    let to = null;
    const type = "datetime format";
    for (let i2 = 0; i2 < locales.length; i2++) {
      targetLocale = to = locales[i2];
      if (locale !== targetLocale && isTranslateFallbackWarn(fallbackWarn, key)) {
        onWarn(getWarnMessage$1(5, {
          key,
          target: targetLocale
        }));
      }
      if (locale !== targetLocale) {
        const emitter = context.__v_emitter;
        if (emitter) {
          emitter.emit("fallback", {
            type,
            key,
            from,
            to,
            groupId: `${type}:${key}`
          });
        }
      }
      datetimeFormat = datetimeFormats[targetLocale] || {};
      format2 = datetimeFormat[key];
      if (isPlainObject(format2))
        break;
      handleMissing(context, key, targetLocale, missingWarn, type);
      from = to;
    }
    if (!isPlainObject(format2) || !isString(targetLocale)) {
      return unresolving ? NOT_REOSLVED : key;
    }
    let id2 = `${targetLocale}__${key}`;
    if (!isEmptyObject(overrides)) {
      id2 = `${id2}__${JSON.stringify(overrides)}`;
    }
    let formatter = __datetimeFormatters.get(id2);
    if (!formatter) {
      formatter = new Intl.DateTimeFormat(targetLocale, assign({}, format2, overrides));
      __datetimeFormatters.set(id2, formatter);
    }
    return !part ? formatter.format(value) : formatter.formatToParts(value);
  }
  function parseDateTimeArgs(...args) {
    const [arg1, arg2, arg3, arg4] = args;
    let options = {};
    let overrides = {};
    let value;
    if (isString(arg1)) {
      if (!/\d{4}-\d{2}-\d{2}(T.*)?/.test(arg1)) {
        throw createCoreError(16);
      }
      value = new Date(arg1);
      try {
        value.toISOString();
      } catch (e) {
        throw createCoreError(16);
      }
    } else if (isDate(arg1)) {
      if (isNaN(arg1.getTime())) {
        throw createCoreError(15);
      }
      value = arg1;
    } else if (isNumber(arg1)) {
      value = arg1;
    } else {
      throw createCoreError(14);
    }
    if (isString(arg2)) {
      options.key = arg2;
    } else if (isPlainObject(arg2)) {
      options = arg2;
    }
    if (isString(arg3)) {
      options.locale = arg3;
    } else if (isPlainObject(arg3)) {
      overrides = arg3;
    }
    if (isPlainObject(arg4)) {
      overrides = arg4;
    }
    return [options.key || "", value, options, overrides];
  }
  function clearDateTimeFormat(ctx, locale, format2) {
    const context = ctx;
    for (const key in format2) {
      const id2 = `${locale}__${key}`;
      if (!context.__datetimeFormatters.has(id2)) {
        continue;
      }
      context.__datetimeFormatters.delete(id2);
    }
  }
  function number(context, ...args) {
    const { numberFormats, unresolving, fallbackLocale, onWarn } = context;
    const { __numberFormatters } = context;
    if (!Availabilities.numberFormat) {
      onWarn(getWarnMessage$1(2));
      return MISSING_RESOLVE_VALUE;
    }
    const [key, value, options, overrides] = parseNumberArgs(...args);
    const missingWarn = isBoolean(options.missingWarn) ? options.missingWarn : context.missingWarn;
    const fallbackWarn = isBoolean(options.fallbackWarn) ? options.fallbackWarn : context.fallbackWarn;
    const part = !!options.part;
    const locale = isString(options.locale) ? options.locale : context.locale;
    const locales = getLocaleChain(context, fallbackLocale, locale);
    if (!isString(key) || key === "") {
      return new Intl.NumberFormat(locale).format(value);
    }
    let numberFormat = {};
    let targetLocale;
    let format2 = null;
    let from = locale;
    let to = null;
    const type = "number format";
    for (let i2 = 0; i2 < locales.length; i2++) {
      targetLocale = to = locales[i2];
      if (locale !== targetLocale && isTranslateFallbackWarn(fallbackWarn, key)) {
        onWarn(getWarnMessage$1(3, {
          key,
          target: targetLocale
        }));
      }
      if (locale !== targetLocale) {
        const emitter = context.__v_emitter;
        if (emitter) {
          emitter.emit("fallback", {
            type,
            key,
            from,
            to,
            groupId: `${type}:${key}`
          });
        }
      }
      numberFormat = numberFormats[targetLocale] || {};
      format2 = numberFormat[key];
      if (isPlainObject(format2))
        break;
      handleMissing(context, key, targetLocale, missingWarn, type);
      from = to;
    }
    if (!isPlainObject(format2) || !isString(targetLocale)) {
      return unresolving ? NOT_REOSLVED : key;
    }
    let id2 = `${targetLocale}__${key}`;
    if (!isEmptyObject(overrides)) {
      id2 = `${id2}__${JSON.stringify(overrides)}`;
    }
    let formatter = __numberFormatters.get(id2);
    if (!formatter) {
      formatter = new Intl.NumberFormat(targetLocale, assign({}, format2, overrides));
      __numberFormatters.set(id2, formatter);
    }
    return !part ? formatter.format(value) : formatter.formatToParts(value);
  }
  function parseNumberArgs(...args) {
    const [arg1, arg2, arg3, arg4] = args;
    let options = {};
    let overrides = {};
    if (!isNumber(arg1)) {
      throw createCoreError(14);
    }
    const value = arg1;
    if (isString(arg2)) {
      options.key = arg2;
    } else if (isPlainObject(arg2)) {
      options = arg2;
    }
    if (isString(arg3)) {
      options.locale = arg3;
    } else if (isPlainObject(arg3)) {
      overrides = arg3;
    }
    if (isPlainObject(arg4)) {
      overrides = arg4;
    }
    return [options.key || "", value, options, overrides];
  }
  function clearNumberFormat(ctx, locale, format2) {
    const context = ctx;
    for (const key in format2) {
      const id2 = `${locale}__${key}`;
      if (!context.__numberFormatters.has(id2)) {
        continue;
      }
      context.__numberFormatters.delete(id2);
    }
  }
  function getDevtoolsGlobalHook() {
    return getTarget().__VUE_DEVTOOLS_GLOBAL_HOOK__;
  }
  function getTarget() {
    return typeof navigator !== "undefined" && typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {};
  }
  const isProxyAvailable = typeof Proxy === "function";
  const HOOK_SETUP = "devtools-plugin:setup";
  const HOOK_PLUGIN_SETTINGS_SET = "plugin:settings:set";
  class ApiProxy {
    constructor(plugin, hook) {
      this.target = null;
      this.targetQueue = [];
      this.onQueue = [];
      this.plugin = plugin;
      this.hook = hook;
      const defaultSettings = {};
      if (plugin.settings) {
        for (const id2 in plugin.settings) {
          const item = plugin.settings[id2];
          defaultSettings[id2] = item.defaultValue;
        }
      }
      const localSettingsSaveId = `__vue-devtools-plugin-settings__${plugin.id}`;
      let currentSettings = { ...defaultSettings };
      try {
        const raw = localStorage.getItem(localSettingsSaveId);
        const data = JSON.parse(raw);
        Object.assign(currentSettings, data);
      } catch (e) {
      }
      this.fallbacks = {
        getSettings() {
          return currentSettings;
        },
        setSettings(value) {
          try {
            localStorage.setItem(localSettingsSaveId, JSON.stringify(value));
          } catch (e) {
          }
          currentSettings = value;
        }
      };
      hook.on(HOOK_PLUGIN_SETTINGS_SET, (pluginId, value) => {
        if (pluginId === this.plugin.id) {
          this.fallbacks.setSettings(value);
        }
      });
      this.proxiedOn = new Proxy({}, {
        get: (_target, prop) => {
          if (this.target) {
            return this.target.on[prop];
          } else {
            return (...args) => {
              this.onQueue.push({
                method: prop,
                args
              });
            };
          }
        }
      });
      this.proxiedTarget = new Proxy({}, {
        get: (_target, prop) => {
          if (this.target) {
            return this.target[prop];
          } else if (prop === "on") {
            return this.proxiedOn;
          } else if (Object.keys(this.fallbacks).includes(prop)) {
            return (...args) => {
              this.targetQueue.push({
                method: prop,
                args,
                resolve: () => {
                }
              });
              return this.fallbacks[prop](...args);
            };
          } else {
            return (...args) => {
              return new Promise((resolve) => {
                this.targetQueue.push({
                  method: prop,
                  args,
                  resolve
                });
              });
            };
          }
        }
      });
    }
    async setRealTarget(target) {
      this.target = target;
      for (const item of this.onQueue) {
        this.target.on[item.method](...item.args);
      }
      for (const item of this.targetQueue) {
        item.resolve(await this.target[item.method](...item.args));
      }
    }
  }
  function setupDevtoolsPlugin(pluginDescriptor, setupFn) {
    const target = getTarget();
    const hook = getDevtoolsGlobalHook();
    const enableProxy = isProxyAvailable && pluginDescriptor.enableEarlyProxy;
    if (hook && (target.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__ || !enableProxy)) {
      hook.emit(HOOK_SETUP, pluginDescriptor, setupFn);
    } else {
      const proxy = enableProxy ? new ApiProxy(pluginDescriptor, hook) : null;
      const list = target.__VUE_DEVTOOLS_PLUGINS__ = target.__VUE_DEVTOOLS_PLUGINS__ || [];
      list.push({
        pluginDescriptor,
        setupFn,
        proxy
      });
      if (proxy)
        setupFn(proxy.proxiedTarget);
    }
  }
  /*!
    * @intlify/vue-devtools v9.1.9
    * (c) 2021 kazuya kawaguchi
    * Released under the MIT License.
    */
  const VueDevToolsLabels = {
    ["vue-devtools-plugin-vue-i18n"]: "Vue I18n devtools",
    ["vue-i18n-resource-inspector"]: "I18n Resources",
    ["vue-i18n-timeline"]: "Vue I18n"
  };
  const VueDevToolsPlaceholders = {
    ["vue-i18n-resource-inspector"]: "Search for scopes ..."
  };
  const VueDevToolsTimelineColors = {
    ["vue-i18n-timeline"]: 16764185
  };
  /*!
    * vue-i18n v9.1.9
    * (c) 2022 kazuya kawaguchi
    * Released under the MIT License.
    */
  const VERSION = "9.1.9";
  function initFeatureFlags() {
    let needWarn = false;
    {
      needWarn = true;
    }
    if (needWarn) {
      console.warn(`You are running the esm-bundler build of vue-i18n. It is recommended to configure your bundler to explicitly replace feature flag globals with boolean literals to get proper tree-shaking in the final bundle.`);
    }
  }
  const warnMessages = {
    [6]: `Fall back to {type} '{key}' with root locale.`,
    [7]: `Not supported 'preserve'.`,
    [8]: `Not supported 'formatter'.`,
    [9]: `Not supported 'preserveDirectiveContent'.`,
    [10]: `Not supported 'getChoiceIndex'.`,
    [11]: `Component name legacy compatible: '{name}' -> 'i18n'`,
    [12]: `Not found parent scope. use the global scope.`
  };
  function getWarnMessage(code, ...args) {
    return format(warnMessages[code], ...args);
  }
  function createI18nError(code, ...args) {
    return createCompileError(code, null, { messages: errorMessages, args });
  }
  const errorMessages = {
    [14]: "Unexpected return type in composer",
    [15]: "Invalid argument",
    [16]: "Must be called at the top of a `setup` function",
    [17]: "Need to install with `app.use` function",
    [22]: "Unexpected error",
    [18]: "Not available in legacy mode",
    [19]: `Required in value: {0}`,
    [20]: `Invalid value`,
    [21]: `Cannot setup vue-devtools plugin`
  };
  const DEVTOOLS_META = "__INTLIFY_META__";
  const TransrateVNodeSymbol = makeSymbol("__transrateVNode");
  const DatetimePartsSymbol = makeSymbol("__datetimeParts");
  const NumberPartsSymbol = makeSymbol("__numberParts");
  const EnableEmitter = makeSymbol("__enableEmitter");
  const DisableEmitter = makeSymbol("__disableEmitter");
  const SetPluralRulesSymbol = makeSymbol("__setPluralRules");
  makeSymbol("__intlifyMeta");
  const InejctWithOption = makeSymbol("__injectWithOption");
  let composerID = 0;
  function defineCoreMissingHandler(missing) {
    return (ctx, locale, key, type) => {
      return missing(locale, key, vue.getCurrentInstance() || void 0, type);
    };
  }
  function getLocaleMessages(locale, options) {
    const { messages: messages2, __i18n } = options;
    const ret = isPlainObject(messages2) ? messages2 : isArray(__i18n) ? {} : { [locale]: {} };
    if (isArray(__i18n)) {
      __i18n.forEach(({ locale: locale2, resource }) => {
        if (locale2) {
          ret[locale2] = ret[locale2] || {};
          deepCopy(resource, ret[locale2]);
        } else {
          deepCopy(resource, ret);
        }
      });
    }
    if (options.flatJson) {
      for (const key in ret) {
        if (hasOwn$1(ret, key)) {
          handleFlatJson(ret[key]);
        }
      }
    }
    return ret;
  }
  const isNotObjectOrIsArray = (val) => !isObject$1(val) || isArray(val);
  function deepCopy(src, des) {
    if (isNotObjectOrIsArray(src) || isNotObjectOrIsArray(des)) {
      throw createI18nError(20);
    }
    for (const key in src) {
      if (hasOwn$1(src, key)) {
        if (isNotObjectOrIsArray(src[key]) || isNotObjectOrIsArray(des[key])) {
          des[key] = src[key];
        } else {
          deepCopy(src[key], des[key]);
        }
      }
    }
  }
  const getMetaInfo = () => {
    const instance = vue.getCurrentInstance();
    return instance && instance.type[DEVTOOLS_META] ? { [DEVTOOLS_META]: instance.type[DEVTOOLS_META] } : null;
  };
  function createComposer(options = {}) {
    const { __root } = options;
    const _isGlobal = __root === void 0;
    let _inheritLocale = isBoolean(options.inheritLocale) ? options.inheritLocale : true;
    const _locale = vue.ref(
      __root && _inheritLocale ? __root.locale.value : isString(options.locale) ? options.locale : "en-US"
    );
    const _fallbackLocale = vue.ref(
      __root && _inheritLocale ? __root.fallbackLocale.value : isString(options.fallbackLocale) || isArray(options.fallbackLocale) || isPlainObject(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : _locale.value
    );
    const _messages = vue.ref(getLocaleMessages(_locale.value, options));
    const _datetimeFormats = vue.ref(isPlainObject(options.datetimeFormats) ? options.datetimeFormats : { [_locale.value]: {} });
    const _numberFormats = vue.ref(isPlainObject(options.numberFormats) ? options.numberFormats : { [_locale.value]: {} });
    let _missingWarn = __root ? __root.missingWarn : isBoolean(options.missingWarn) || isRegExp(options.missingWarn) ? options.missingWarn : true;
    let _fallbackWarn = __root ? __root.fallbackWarn : isBoolean(options.fallbackWarn) || isRegExp(options.fallbackWarn) ? options.fallbackWarn : true;
    let _fallbackRoot = __root ? __root.fallbackRoot : isBoolean(options.fallbackRoot) ? options.fallbackRoot : true;
    let _fallbackFormat = !!options.fallbackFormat;
    let _missing = isFunction(options.missing) ? options.missing : null;
    let _runtimeMissing = isFunction(options.missing) ? defineCoreMissingHandler(options.missing) : null;
    let _postTranslation = isFunction(options.postTranslation) ? options.postTranslation : null;
    let _warnHtmlMessage = isBoolean(options.warnHtmlMessage) ? options.warnHtmlMessage : true;
    let _escapeParameter = !!options.escapeParameter;
    const _modifiers = __root ? __root.modifiers : isPlainObject(options.modifiers) ? options.modifiers : {};
    let _pluralRules = options.pluralRules || __root && __root.pluralRules;
    let _context;
    function getCoreContext() {
      return createCoreContext({
        version: VERSION,
        locale: _locale.value,
        fallbackLocale: _fallbackLocale.value,
        messages: _messages.value,
        messageCompiler: function compileToFunction(source) {
          return (ctx) => {
            return ctx.normalize([source]);
          };
        },
        datetimeFormats: _datetimeFormats.value,
        numberFormats: _numberFormats.value,
        modifiers: _modifiers,
        pluralRules: _pluralRules,
        missing: _runtimeMissing === null ? void 0 : _runtimeMissing,
        missingWarn: _missingWarn,
        fallbackWarn: _fallbackWarn,
        fallbackFormat: _fallbackFormat,
        unresolving: true,
        postTranslation: _postTranslation === null ? void 0 : _postTranslation,
        warnHtmlMessage: _warnHtmlMessage,
        escapeParameter: _escapeParameter,
        __datetimeFormatters: isPlainObject(_context) ? _context.__datetimeFormatters : void 0,
        __numberFormatters: isPlainObject(_context) ? _context.__numberFormatters : void 0,
        __v_emitter: isPlainObject(_context) ? _context.__v_emitter : void 0,
        __meta: { framework: "vue" }
      });
    }
    _context = getCoreContext();
    updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);
    function trackReactivityValues() {
      return [
        _locale.value,
        _fallbackLocale.value,
        _messages.value,
        _datetimeFormats.value,
        _numberFormats.value
      ];
    }
    const locale = vue.computed({
      get: () => _locale.value,
      set: (val) => {
        _locale.value = val;
        _context.locale = _locale.value;
      }
    });
    const fallbackLocale = vue.computed({
      get: () => _fallbackLocale.value,
      set: (val) => {
        _fallbackLocale.value = val;
        _context.fallbackLocale = _fallbackLocale.value;
        updateFallbackLocale(_context, _locale.value, val);
      }
    });
    const messages2 = vue.computed(() => _messages.value);
    const datetimeFormats = vue.computed(() => _datetimeFormats.value);
    const numberFormats = vue.computed(() => _numberFormats.value);
    function getPostTranslationHandler() {
      return isFunction(_postTranslation) ? _postTranslation : null;
    }
    function setPostTranslationHandler(handler) {
      _postTranslation = handler;
      _context.postTranslation = handler;
    }
    function getMissingHandler() {
      return _missing;
    }
    function setMissingHandler(handler) {
      if (handler !== null) {
        _runtimeMissing = defineCoreMissingHandler(handler);
      }
      _missing = handler;
      _context.missing = _runtimeMissing;
    }
    function isResolvedTranslateMessage(type, arg) {
      return type !== "translate" || !!arg.resolvedMessage === false;
    }
    function wrapWithDeps(fn2, argumentParser, warnType, fallbackSuccess, fallbackFail, successCondition) {
      trackReactivityValues();
      let ret;
      {
        try {
          setAdditionalMeta(getMetaInfo());
          ret = fn2(_context);
        } finally {
          setAdditionalMeta(null);
        }
      }
      if (isNumber(ret) && ret === NOT_REOSLVED) {
        const [key, arg2] = argumentParser();
        if (__root && isString(key) && isResolvedTranslateMessage(warnType, arg2)) {
          if (_fallbackRoot && (isTranslateFallbackWarn(_fallbackWarn, key) || isTranslateMissingWarn(_missingWarn, key))) {
            warn(getWarnMessage(6, {
              key,
              type: warnType
            }));
          }
          {
            const { __v_emitter: emitter } = _context;
            if (emitter && _fallbackRoot) {
              emitter.emit("fallback", {
                type: warnType,
                key,
                to: "global",
                groupId: `${warnType}:${key}`
              });
            }
          }
        }
        return __root && _fallbackRoot ? fallbackSuccess(__root) : fallbackFail(key);
      } else if (successCondition(ret)) {
        return ret;
      } else {
        throw createI18nError(14);
      }
    }
    function t2(...args) {
      return wrapWithDeps((context) => translate(context, ...args), () => parseTranslateArgs(...args), "translate", (root2) => root2.t(...args), (key) => key, (val) => isString(val));
    }
    function rt2(...args) {
      const [arg1, arg2, arg3] = args;
      if (arg3 && !isObject$1(arg3)) {
        throw createI18nError(15);
      }
      return t2(...[arg1, arg2, assign({ resolvedMessage: true }, arg3 || {})]);
    }
    function d2(...args) {
      return wrapWithDeps((context) => datetime(context, ...args), () => parseDateTimeArgs(...args), "datetime format", (root2) => root2.d(...args), () => MISSING_RESOLVE_VALUE, (val) => isString(val));
    }
    function n2(...args) {
      return wrapWithDeps((context) => number(context, ...args), () => parseNumberArgs(...args), "number format", (root2) => root2.n(...args), () => MISSING_RESOLVE_VALUE, (val) => isString(val));
    }
    function normalize(values) {
      return values.map((val) => isString(val) ? vue.createVNode(vue.Text, null, val, 0) : val);
    }
    const interpolate = (val) => val;
    const processor = {
      normalize,
      interpolate,
      type: "vnode"
    };
    function transrateVNode(...args) {
      return wrapWithDeps(
        (context) => {
          let ret;
          const _context2 = context;
          try {
            _context2.processor = processor;
            ret = translate(_context2, ...args);
          } finally {
            _context2.processor = null;
          }
          return ret;
        },
        () => parseTranslateArgs(...args),
        "translate",
        (root2) => root2[TransrateVNodeSymbol](...args),
        (key) => [vue.createVNode(vue.Text, null, key, 0)],
        (val) => isArray(val)
      );
    }
    function numberParts(...args) {
      return wrapWithDeps(
        (context) => number(context, ...args),
        () => parseNumberArgs(...args),
        "number format",
        (root2) => root2[NumberPartsSymbol](...args),
        () => [],
        (val) => isString(val) || isArray(val)
      );
    }
    function datetimeParts(...args) {
      return wrapWithDeps(
        (context) => datetime(context, ...args),
        () => parseDateTimeArgs(...args),
        "datetime format",
        (root2) => root2[DatetimePartsSymbol](...args),
        () => [],
        (val) => isString(val) || isArray(val)
      );
    }
    function setPluralRules(rules) {
      _pluralRules = rules;
      _context.pluralRules = _pluralRules;
    }
    function te2(key, locale2) {
      const targetLocale = isString(locale2) ? locale2 : _locale.value;
      const message = getLocaleMessage(targetLocale);
      return resolveValue(message, key) !== null;
    }
    function resolveMessages(key) {
      let messages3 = null;
      const locales = getLocaleChain(_context, _fallbackLocale.value, _locale.value);
      for (let i2 = 0; i2 < locales.length; i2++) {
        const targetLocaleMessages = _messages.value[locales[i2]] || {};
        const messageValue = resolveValue(targetLocaleMessages, key);
        if (messageValue != null) {
          messages3 = messageValue;
          break;
        }
      }
      return messages3;
    }
    function tm(key) {
      const messages3 = resolveMessages(key);
      return messages3 != null ? messages3 : __root ? __root.tm(key) || {} : {};
    }
    function getLocaleMessage(locale2) {
      return _messages.value[locale2] || {};
    }
    function setLocaleMessage(locale2, message) {
      _messages.value[locale2] = message;
      _context.messages = _messages.value;
    }
    function mergeLocaleMessage(locale2, message) {
      _messages.value[locale2] = _messages.value[locale2] || {};
      deepCopy(message, _messages.value[locale2]);
      _context.messages = _messages.value;
    }
    function getDateTimeFormat(locale2) {
      return _datetimeFormats.value[locale2] || {};
    }
    function setDateTimeFormat(locale2, format2) {
      _datetimeFormats.value[locale2] = format2;
      _context.datetimeFormats = _datetimeFormats.value;
      clearDateTimeFormat(_context, locale2, format2);
    }
    function mergeDateTimeFormat(locale2, format2) {
      _datetimeFormats.value[locale2] = assign(_datetimeFormats.value[locale2] || {}, format2);
      _context.datetimeFormats = _datetimeFormats.value;
      clearDateTimeFormat(_context, locale2, format2);
    }
    function getNumberFormat(locale2) {
      return _numberFormats.value[locale2] || {};
    }
    function setNumberFormat(locale2, format2) {
      _numberFormats.value[locale2] = format2;
      _context.numberFormats = _numberFormats.value;
      clearNumberFormat(_context, locale2, format2);
    }
    function mergeNumberFormat(locale2, format2) {
      _numberFormats.value[locale2] = assign(_numberFormats.value[locale2] || {}, format2);
      _context.numberFormats = _numberFormats.value;
      clearNumberFormat(_context, locale2, format2);
    }
    composerID++;
    if (__root) {
      vue.watch(__root.locale, (val) => {
        if (_inheritLocale) {
          _locale.value = val;
          _context.locale = val;
          updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);
        }
      });
      vue.watch(__root.fallbackLocale, (val) => {
        if (_inheritLocale) {
          _fallbackLocale.value = val;
          _context.fallbackLocale = val;
          updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);
        }
      });
    }
    const composer = {
      id: composerID,
      locale,
      fallbackLocale,
      get inheritLocale() {
        return _inheritLocale;
      },
      set inheritLocale(val) {
        _inheritLocale = val;
        if (val && __root) {
          _locale.value = __root.locale.value;
          _fallbackLocale.value = __root.fallbackLocale.value;
          updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);
        }
      },
      get availableLocales() {
        return Object.keys(_messages.value).sort();
      },
      messages: messages2,
      datetimeFormats,
      numberFormats,
      get modifiers() {
        return _modifiers;
      },
      get pluralRules() {
        return _pluralRules || {};
      },
      get isGlobal() {
        return _isGlobal;
      },
      get missingWarn() {
        return _missingWarn;
      },
      set missingWarn(val) {
        _missingWarn = val;
        _context.missingWarn = _missingWarn;
      },
      get fallbackWarn() {
        return _fallbackWarn;
      },
      set fallbackWarn(val) {
        _fallbackWarn = val;
        _context.fallbackWarn = _fallbackWarn;
      },
      get fallbackRoot() {
        return _fallbackRoot;
      },
      set fallbackRoot(val) {
        _fallbackRoot = val;
      },
      get fallbackFormat() {
        return _fallbackFormat;
      },
      set fallbackFormat(val) {
        _fallbackFormat = val;
        _context.fallbackFormat = _fallbackFormat;
      },
      get warnHtmlMessage() {
        return _warnHtmlMessage;
      },
      set warnHtmlMessage(val) {
        _warnHtmlMessage = val;
        _context.warnHtmlMessage = val;
      },
      get escapeParameter() {
        return _escapeParameter;
      },
      set escapeParameter(val) {
        _escapeParameter = val;
        _context.escapeParameter = val;
      },
      t: t2,
      rt: rt2,
      d: d2,
      n: n2,
      te: te2,
      tm,
      getLocaleMessage,
      setLocaleMessage,
      mergeLocaleMessage,
      getDateTimeFormat,
      setDateTimeFormat,
      mergeDateTimeFormat,
      getNumberFormat,
      setNumberFormat,
      mergeNumberFormat,
      getPostTranslationHandler,
      setPostTranslationHandler,
      getMissingHandler,
      setMissingHandler,
      [TransrateVNodeSymbol]: transrateVNode,
      [NumberPartsSymbol]: numberParts,
      [DatetimePartsSymbol]: datetimeParts,
      [SetPluralRulesSymbol]: setPluralRules,
      [InejctWithOption]: options.__injectWithOption
    };
    {
      composer[EnableEmitter] = (emitter) => {
        _context.__v_emitter = emitter;
      };
      composer[DisableEmitter] = () => {
        _context.__v_emitter = void 0;
      };
    }
    return composer;
  }
  function convertComposerOptions(options) {
    const locale = isString(options.locale) ? options.locale : "en-US";
    const fallbackLocale = isString(options.fallbackLocale) || isArray(options.fallbackLocale) || isPlainObject(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : locale;
    const missing = isFunction(options.missing) ? options.missing : void 0;
    const missingWarn = isBoolean(options.silentTranslationWarn) || isRegExp(options.silentTranslationWarn) ? !options.silentTranslationWarn : true;
    const fallbackWarn = isBoolean(options.silentFallbackWarn) || isRegExp(options.silentFallbackWarn) ? !options.silentFallbackWarn : true;
    const fallbackRoot = isBoolean(options.fallbackRoot) ? options.fallbackRoot : true;
    const fallbackFormat = !!options.formatFallbackMessages;
    const modifiers = isPlainObject(options.modifiers) ? options.modifiers : {};
    const pluralizationRules = options.pluralizationRules;
    const postTranslation = isFunction(options.postTranslation) ? options.postTranslation : void 0;
    const warnHtmlMessage = isString(options.warnHtmlInMessage) ? options.warnHtmlInMessage !== "off" : true;
    const escapeParameter = !!options.escapeParameterHtml;
    const inheritLocale = isBoolean(options.sync) ? options.sync : true;
    if (options.formatter) {
      warn(getWarnMessage(8));
    }
    if (options.preserveDirectiveContent) {
      warn(getWarnMessage(9));
    }
    let messages2 = options.messages;
    if (isPlainObject(options.sharedMessages)) {
      const sharedMessages = options.sharedMessages;
      const locales = Object.keys(sharedMessages);
      messages2 = locales.reduce((messages3, locale2) => {
        const message = messages3[locale2] || (messages3[locale2] = {});
        assign(message, sharedMessages[locale2]);
        return messages3;
      }, messages2 || {});
    }
    const { __i18n, __root, __injectWithOption } = options;
    const datetimeFormats = options.datetimeFormats;
    const numberFormats = options.numberFormats;
    const flatJson = options.flatJson;
    return {
      locale,
      fallbackLocale,
      messages: messages2,
      flatJson,
      datetimeFormats,
      numberFormats,
      missing,
      missingWarn,
      fallbackWarn,
      fallbackRoot,
      fallbackFormat,
      modifiers,
      pluralRules: pluralizationRules,
      postTranslation,
      warnHtmlMessage,
      escapeParameter,
      inheritLocale,
      __i18n,
      __root,
      __injectWithOption
    };
  }
  function createVueI18n(options = {}) {
    const composer = createComposer(convertComposerOptions(options));
    const vueI18n = {
      id: composer.id,
      get locale() {
        return composer.locale.value;
      },
      set locale(val) {
        composer.locale.value = val;
      },
      get fallbackLocale() {
        return composer.fallbackLocale.value;
      },
      set fallbackLocale(val) {
        composer.fallbackLocale.value = val;
      },
      get messages() {
        return composer.messages.value;
      },
      get datetimeFormats() {
        return composer.datetimeFormats.value;
      },
      get numberFormats() {
        return composer.numberFormats.value;
      },
      get availableLocales() {
        return composer.availableLocales;
      },
      get formatter() {
        warn(getWarnMessage(8));
        return {
          interpolate() {
            return [];
          }
        };
      },
      set formatter(val) {
        warn(getWarnMessage(8));
      },
      get missing() {
        return composer.getMissingHandler();
      },
      set missing(handler) {
        composer.setMissingHandler(handler);
      },
      get silentTranslationWarn() {
        return isBoolean(composer.missingWarn) ? !composer.missingWarn : composer.missingWarn;
      },
      set silentTranslationWarn(val) {
        composer.missingWarn = isBoolean(val) ? !val : val;
      },
      get silentFallbackWarn() {
        return isBoolean(composer.fallbackWarn) ? !composer.fallbackWarn : composer.fallbackWarn;
      },
      set silentFallbackWarn(val) {
        composer.fallbackWarn = isBoolean(val) ? !val : val;
      },
      get modifiers() {
        return composer.modifiers;
      },
      get formatFallbackMessages() {
        return composer.fallbackFormat;
      },
      set formatFallbackMessages(val) {
        composer.fallbackFormat = val;
      },
      get postTranslation() {
        return composer.getPostTranslationHandler();
      },
      set postTranslation(handler) {
        composer.setPostTranslationHandler(handler);
      },
      get sync() {
        return composer.inheritLocale;
      },
      set sync(val) {
        composer.inheritLocale = val;
      },
      get warnHtmlInMessage() {
        return composer.warnHtmlMessage ? "warn" : "off";
      },
      set warnHtmlInMessage(val) {
        composer.warnHtmlMessage = val !== "off";
      },
      get escapeParameterHtml() {
        return composer.escapeParameter;
      },
      set escapeParameterHtml(val) {
        composer.escapeParameter = val;
      },
      get preserveDirectiveContent() {
        warn(getWarnMessage(9));
        return true;
      },
      set preserveDirectiveContent(val) {
        warn(getWarnMessage(9));
      },
      get pluralizationRules() {
        return composer.pluralRules || {};
      },
      __composer: composer,
      t(...args) {
        const [arg1, arg2, arg3] = args;
        const options2 = {};
        let list = null;
        let named = null;
        if (!isString(arg1)) {
          throw createI18nError(15);
        }
        const key = arg1;
        if (isString(arg2)) {
          options2.locale = arg2;
        } else if (isArray(arg2)) {
          list = arg2;
        } else if (isPlainObject(arg2)) {
          named = arg2;
        }
        if (isArray(arg3)) {
          list = arg3;
        } else if (isPlainObject(arg3)) {
          named = arg3;
        }
        return composer.t(key, list || named || {}, options2);
      },
      rt(...args) {
        return composer.rt(...args);
      },
      tc(...args) {
        const [arg1, arg2, arg3] = args;
        const options2 = { plural: 1 };
        let list = null;
        let named = null;
        if (!isString(arg1)) {
          throw createI18nError(15);
        }
        const key = arg1;
        if (isString(arg2)) {
          options2.locale = arg2;
        } else if (isNumber(arg2)) {
          options2.plural = arg2;
        } else if (isArray(arg2)) {
          list = arg2;
        } else if (isPlainObject(arg2)) {
          named = arg2;
        }
        if (isString(arg3)) {
          options2.locale = arg3;
        } else if (isArray(arg3)) {
          list = arg3;
        } else if (isPlainObject(arg3)) {
          named = arg3;
        }
        return composer.t(key, list || named || {}, options2);
      },
      te(key, locale) {
        return composer.te(key, locale);
      },
      tm(key) {
        return composer.tm(key);
      },
      getLocaleMessage(locale) {
        return composer.getLocaleMessage(locale);
      },
      setLocaleMessage(locale, message) {
        composer.setLocaleMessage(locale, message);
      },
      mergeLocaleMessage(locale, message) {
        composer.mergeLocaleMessage(locale, message);
      },
      d(...args) {
        return composer.d(...args);
      },
      getDateTimeFormat(locale) {
        return composer.getDateTimeFormat(locale);
      },
      setDateTimeFormat(locale, format2) {
        composer.setDateTimeFormat(locale, format2);
      },
      mergeDateTimeFormat(locale, format2) {
        composer.mergeDateTimeFormat(locale, format2);
      },
      n(...args) {
        return composer.n(...args);
      },
      getNumberFormat(locale) {
        return composer.getNumberFormat(locale);
      },
      setNumberFormat(locale, format2) {
        composer.setNumberFormat(locale, format2);
      },
      mergeNumberFormat(locale, format2) {
        composer.mergeNumberFormat(locale, format2);
      },
      getChoiceIndex(choice, choicesLength) {
        warn(getWarnMessage(10));
        return -1;
      },
      __onComponentInstanceCreated(target) {
        const { componentInstanceCreatedListener } = options;
        if (componentInstanceCreatedListener) {
          componentInstanceCreatedListener(target, vueI18n);
        }
      }
    };
    {
      vueI18n.__enableEmitter = (emitter) => {
        const __composer = composer;
        __composer[EnableEmitter] && __composer[EnableEmitter](emitter);
      };
      vueI18n.__disableEmitter = () => {
        const __composer = composer;
        __composer[DisableEmitter] && __composer[DisableEmitter]();
      };
    }
    return vueI18n;
  }
  const baseFormatProps = {
    tag: {
      type: [String, Object]
    },
    locale: {
      type: String
    },
    scope: {
      type: String,
      validator: (val) => val === "parent" || val === "global",
      default: "parent"
    },
    i18n: {
      type: Object
    }
  };
  const Translation = {
    name: "i18n-t",
    props: assign({
      keypath: {
        type: String,
        required: true
      },
      plural: {
        type: [Number, String],
        validator: (val) => isNumber(val) || !isNaN(val)
      }
    }, baseFormatProps),
    setup(props, context) {
      const { slots, attrs } = context;
      const i18n2 = props.i18n || useI18n({
        useScope: props.scope,
        __useComponent: true
      });
      const keys = Object.keys(slots).filter((key) => key !== "_");
      return () => {
        const options = {};
        if (props.locale) {
          options.locale = props.locale;
        }
        if (props.plural !== void 0) {
          options.plural = isString(props.plural) ? +props.plural : props.plural;
        }
        const arg = getInterpolateArg(context, keys);
        const children = i18n2[TransrateVNodeSymbol](props.keypath, arg, options);
        const assignedAttrs = assign({}, attrs);
        return isString(props.tag) ? vue.h(props.tag, assignedAttrs, children) : isObject$1(props.tag) ? vue.h(props.tag, assignedAttrs, children) : vue.h(vue.Fragment, assignedAttrs, children);
      };
    }
  };
  function getInterpolateArg({ slots }, keys) {
    if (keys.length === 1 && keys[0] === "default") {
      return slots.default ? slots.default() : [];
    } else {
      return keys.reduce((arg, key) => {
        const slot = slots[key];
        if (slot) {
          arg[key] = slot();
        }
        return arg;
      }, {});
    }
  }
  function renderFormatter(props, context, slotKeys, partFormatter) {
    const { slots, attrs } = context;
    return () => {
      const options = { part: true };
      let overrides = {};
      if (props.locale) {
        options.locale = props.locale;
      }
      if (isString(props.format)) {
        options.key = props.format;
      } else if (isObject$1(props.format)) {
        if (isString(props.format.key)) {
          options.key = props.format.key;
        }
        overrides = Object.keys(props.format).reduce((options2, prop) => {
          return slotKeys.includes(prop) ? assign({}, options2, { [prop]: props.format[prop] }) : options2;
        }, {});
      }
      const parts = partFormatter(...[props.value, options, overrides]);
      let children = [options.key];
      if (isArray(parts)) {
        children = parts.map((part, index) => {
          const slot = slots[part.type];
          return slot ? slot({ [part.type]: part.value, index, parts }) : [part.value];
        });
      } else if (isString(parts)) {
        children = [parts];
      }
      const assignedAttrs = assign({}, attrs);
      return isString(props.tag) ? vue.h(props.tag, assignedAttrs, children) : isObject$1(props.tag) ? vue.h(props.tag, assignedAttrs, children) : vue.h(vue.Fragment, assignedAttrs, children);
    };
  }
  const NUMBER_FORMAT_KEYS = [
    "localeMatcher",
    "style",
    "unit",
    "unitDisplay",
    "currency",
    "currencyDisplay",
    "useGrouping",
    "numberingSystem",
    "minimumIntegerDigits",
    "minimumFractionDigits",
    "maximumFractionDigits",
    "minimumSignificantDigits",
    "maximumSignificantDigits",
    "notation",
    "formatMatcher"
  ];
  const NumberFormat = {
    name: "i18n-n",
    props: assign({
      value: {
        type: Number,
        required: true
      },
      format: {
        type: [String, Object]
      }
    }, baseFormatProps),
    setup(props, context) {
      const i18n2 = props.i18n || useI18n({ useScope: "parent", __useComponent: true });
      return renderFormatter(props, context, NUMBER_FORMAT_KEYS, (...args) => i18n2[NumberPartsSymbol](...args));
    }
  };
  const DATETIME_FORMAT_KEYS = [
    "dateStyle",
    "timeStyle",
    "fractionalSecondDigits",
    "calendar",
    "dayPeriod",
    "numberingSystem",
    "localeMatcher",
    "timeZone",
    "hour12",
    "hourCycle",
    "formatMatcher",
    "weekday",
    "era",
    "year",
    "month",
    "day",
    "hour",
    "minute",
    "second",
    "timeZoneName"
  ];
  const DatetimeFormat = {
    name: "i18n-d",
    props: assign({
      value: {
        type: [Number, Date],
        required: true
      },
      format: {
        type: [String, Object]
      }
    }, baseFormatProps),
    setup(props, context) {
      const i18n2 = props.i18n || useI18n({ useScope: "parent", __useComponent: true });
      return renderFormatter(props, context, DATETIME_FORMAT_KEYS, (...args) => i18n2[DatetimePartsSymbol](...args));
    }
  };
  function getComposer$2(i18n2, instance) {
    const i18nInternal = i18n2;
    if (i18n2.mode === "composition") {
      return i18nInternal.__getInstance(instance) || i18n2.global;
    } else {
      const vueI18n = i18nInternal.__getInstance(instance);
      return vueI18n != null ? vueI18n.__composer : i18n2.global.__composer;
    }
  }
  function vTDirective(i18n2) {
    const bind = (el, { instance, value, modifiers }) => {
      if (!instance || !instance.$) {
        throw createI18nError(22);
      }
      const composer = getComposer$2(i18n2, instance.$);
      if (modifiers.preserve) {
        warn(getWarnMessage(7));
      }
      const parsedValue = parseValue(value);
      el.textContent = composer.t(...makeParams(parsedValue));
    };
    return {
      beforeMount: bind,
      beforeUpdate: bind
    };
  }
  function parseValue(value) {
    if (isString(value)) {
      return { path: value };
    } else if (isPlainObject(value)) {
      if (!("path" in value)) {
        throw createI18nError(19, "path");
      }
      return value;
    } else {
      throw createI18nError(20);
    }
  }
  function makeParams(value) {
    const { path, locale, args, choice, plural } = value;
    const options = {};
    const named = args || {};
    if (isString(locale)) {
      options.locale = locale;
    }
    if (isNumber(choice)) {
      options.plural = choice;
    }
    if (isNumber(plural)) {
      options.plural = plural;
    }
    return [path, named, options];
  }
  function apply(app, i18n2, ...options) {
    const pluginOptions = isPlainObject(options[0]) ? options[0] : {};
    const useI18nComponentName = !!pluginOptions.useI18nComponentName;
    const globalInstall = isBoolean(pluginOptions.globalInstall) ? pluginOptions.globalInstall : true;
    if (globalInstall && useI18nComponentName) {
      warn(getWarnMessage(11, {
        name: Translation.name
      }));
    }
    if (globalInstall) {
      app.component(!useI18nComponentName ? Translation.name : "i18n", Translation);
      app.component(NumberFormat.name, NumberFormat);
      app.component(DatetimeFormat.name, DatetimeFormat);
    }
    app.directive("t", vTDirective(i18n2));
  }
  const VUE_I18N_COMPONENT_TYPES = "vue-i18n: composer properties";
  let devtoolsApi;
  async function enableDevTools(app, i18n2) {
    return new Promise((resolve, reject) => {
      try {
        setupDevtoolsPlugin({
          id: "vue-devtools-plugin-vue-i18n",
          label: VueDevToolsLabels["vue-devtools-plugin-vue-i18n"],
          packageName: "vue-i18n",
          homepage: "https://vue-i18n.intlify.dev",
          logo: "https://vue-i18n.intlify.dev/vue-i18n-devtools-logo.png",
          componentStateTypes: [VUE_I18N_COMPONENT_TYPES],
          app
        }, (api) => {
          devtoolsApi = api;
          api.on.visitComponentTree(({ componentInstance, treeNode }) => {
            updateComponentTreeTags(componentInstance, treeNode, i18n2);
          });
          api.on.inspectComponent(({ componentInstance, instanceData }) => {
            if (componentInstance.vnode.el.__VUE_I18N__ && instanceData) {
              if (i18n2.mode === "legacy") {
                if (componentInstance.vnode.el.__VUE_I18N__ !== i18n2.global.__composer) {
                  inspectComposer(instanceData, componentInstance.vnode.el.__VUE_I18N__);
                }
              } else {
                inspectComposer(instanceData, componentInstance.vnode.el.__VUE_I18N__);
              }
            }
          });
          api.addInspector({
            id: "vue-i18n-resource-inspector",
            label: VueDevToolsLabels["vue-i18n-resource-inspector"],
            icon: "language",
            treeFilterPlaceholder: VueDevToolsPlaceholders["vue-i18n-resource-inspector"]
          });
          api.on.getInspectorTree((payload) => {
            if (payload.app === app && payload.inspectorId === "vue-i18n-resource-inspector") {
              registerScope(payload, i18n2);
            }
          });
          api.on.getInspectorState((payload) => {
            if (payload.app === app && payload.inspectorId === "vue-i18n-resource-inspector") {
              inspectScope(payload, i18n2);
            }
          });
          api.on.editInspectorState((payload) => {
            if (payload.app === app && payload.inspectorId === "vue-i18n-resource-inspector") {
              editScope(payload, i18n2);
            }
          });
          api.addTimelineLayer({
            id: "vue-i18n-timeline",
            label: VueDevToolsLabels["vue-i18n-timeline"],
            color: VueDevToolsTimelineColors["vue-i18n-timeline"]
          });
          resolve(true);
        });
      } catch (e) {
        console.error(e);
        reject(false);
      }
    });
  }
  function updateComponentTreeTags(instance, treeNode, i18n2) {
    const global2 = i18n2.mode === "composition" ? i18n2.global : i18n2.global.__composer;
    if (instance && instance.vnode.el.__VUE_I18N__) {
      if (instance.vnode.el.__VUE_I18N__ !== global2) {
        const label = instance.type.name || instance.type.displayName || instance.type.__file;
        const tag = {
          label: `i18n (${label} Scope)`,
          textColor: 0,
          backgroundColor: 16764185
        };
        treeNode.tags.push(tag);
      }
    }
  }
  function inspectComposer(instanceData, composer) {
    const type = VUE_I18N_COMPONENT_TYPES;
    instanceData.state.push({
      type,
      key: "locale",
      editable: true,
      value: composer.locale.value
    });
    instanceData.state.push({
      type,
      key: "availableLocales",
      editable: false,
      value: composer.availableLocales
    });
    instanceData.state.push({
      type,
      key: "fallbackLocale",
      editable: true,
      value: composer.fallbackLocale.value
    });
    instanceData.state.push({
      type,
      key: "inheritLocale",
      editable: true,
      value: composer.inheritLocale
    });
    instanceData.state.push({
      type,
      key: "messages",
      editable: false,
      value: getLocaleMessageValue(composer.messages.value)
    });
    instanceData.state.push({
      type,
      key: "datetimeFormats",
      editable: false,
      value: composer.datetimeFormats.value
    });
    instanceData.state.push({
      type,
      key: "numberFormats",
      editable: false,
      value: composer.numberFormats.value
    });
  }
  function getLocaleMessageValue(messages2) {
    const value = {};
    Object.keys(messages2).forEach((key) => {
      const v2 = messages2[key];
      if (isFunction(v2) && "source" in v2) {
        value[key] = getMessageFunctionDetails(v2);
      } else if (isObject$1(v2)) {
        value[key] = getLocaleMessageValue(v2);
      } else {
        value[key] = v2;
      }
    });
    return value;
  }
  const ESC = {
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "&": "&amp;"
  };
  function escape$1(s2) {
    return s2.replace(/[<>"&]/g, escapeChar);
  }
  function escapeChar(a2) {
    return ESC[a2] || a2;
  }
  function getMessageFunctionDetails(func) {
    const argString = func.source ? `("${escape$1(func.source)}")` : `(?)`;
    return {
      _custom: {
        type: "function",
        display: `<span>\u0192</span> ${argString}`
      }
    };
  }
  function registerScope(payload, i18n2) {
    payload.rootNodes.push({
      id: "global",
      label: "Global Scope"
    });
    const global2 = i18n2.mode === "composition" ? i18n2.global : i18n2.global.__composer;
    for (const [keyInstance, instance] of i18n2.__instances) {
      const composer = i18n2.mode === "composition" ? instance : instance.__composer;
      if (global2 === composer) {
        continue;
      }
      const label = keyInstance.type.name || keyInstance.type.displayName || keyInstance.type.__file;
      payload.rootNodes.push({
        id: composer.id.toString(),
        label: `${label} Scope`
      });
    }
  }
  function getComposer$1(nodeId, i18n2) {
    if (nodeId === "global") {
      return i18n2.mode === "composition" ? i18n2.global : i18n2.global.__composer;
    } else {
      const instance = Array.from(i18n2.__instances.values()).find((item) => item.id.toString() === nodeId);
      if (instance) {
        return i18n2.mode === "composition" ? instance : instance.__composer;
      } else {
        return null;
      }
    }
  }
  function inspectScope(payload, i18n2) {
    const composer = getComposer$1(payload.nodeId, i18n2);
    if (composer) {
      payload.state = makeScopeInspectState(composer);
    }
  }
  function makeScopeInspectState(composer) {
    const state = {};
    const localeType = "Locale related info";
    const localeStates = [
      {
        type: localeType,
        key: "locale",
        editable: true,
        value: composer.locale.value
      },
      {
        type: localeType,
        key: "fallbackLocale",
        editable: true,
        value: composer.fallbackLocale.value
      },
      {
        type: localeType,
        key: "availableLocales",
        editable: false,
        value: composer.availableLocales
      },
      {
        type: localeType,
        key: "inheritLocale",
        editable: true,
        value: composer.inheritLocale
      }
    ];
    state[localeType] = localeStates;
    const localeMessagesType = "Locale messages info";
    const localeMessagesStates = [
      {
        type: localeMessagesType,
        key: "messages",
        editable: false,
        value: getLocaleMessageValue(composer.messages.value)
      }
    ];
    state[localeMessagesType] = localeMessagesStates;
    const datetimeFormatsType = "Datetime formats info";
    const datetimeFormatsStates = [
      {
        type: datetimeFormatsType,
        key: "datetimeFormats",
        editable: false,
        value: composer.datetimeFormats.value
      }
    ];
    state[datetimeFormatsType] = datetimeFormatsStates;
    const numberFormatsType = "Datetime formats info";
    const numberFormatsStates = [
      {
        type: numberFormatsType,
        key: "numberFormats",
        editable: false,
        value: composer.numberFormats.value
      }
    ];
    state[numberFormatsType] = numberFormatsStates;
    return state;
  }
  function addTimelineEvent(event, payload) {
    if (devtoolsApi) {
      let groupId;
      if (payload && "groupId" in payload) {
        groupId = payload.groupId;
        delete payload.groupId;
      }
      devtoolsApi.addTimelineEvent({
        layerId: "vue-i18n-timeline",
        event: {
          title: event,
          groupId,
          time: Date.now(),
          meta: {},
          data: payload || {},
          logType: event === "compile-error" ? "error" : event === "fallback" || event === "missing" ? "warning" : "default"
        }
      });
    }
  }
  function editScope(payload, i18n2) {
    const composer = getComposer$1(payload.nodeId, i18n2);
    if (composer) {
      const [field] = payload.path;
      if (field === "locale" && isString(payload.state.value)) {
        composer.locale.value = payload.state.value;
      } else if (field === "fallbackLocale" && (isString(payload.state.value) || isArray(payload.state.value) || isObject$1(payload.state.value))) {
        composer.fallbackLocale.value = payload.state.value;
      } else if (field === "inheritLocale" && isBoolean(payload.state.value)) {
        composer.inheritLocale = payload.state.value;
      }
    }
  }
  function defineMixin(vuei18n, composer, i18n2) {
    return {
      beforeCreate() {
        const instance = vue.getCurrentInstance();
        if (!instance) {
          throw createI18nError(22);
        }
        const options = this.$options;
        if (options.i18n) {
          const optionsI18n = options.i18n;
          if (options.__i18n) {
            optionsI18n.__i18n = options.__i18n;
          }
          optionsI18n.__root = composer;
          if (this === this.$root) {
            this.$i18n = mergeToRoot(vuei18n, optionsI18n);
          } else {
            optionsI18n.__injectWithOption = true;
            this.$i18n = createVueI18n(optionsI18n);
          }
        } else if (options.__i18n) {
          if (this === this.$root) {
            this.$i18n = mergeToRoot(vuei18n, options);
          } else {
            this.$i18n = createVueI18n({
              __i18n: options.__i18n,
              __injectWithOption: true,
              __root: composer
            });
          }
        } else {
          this.$i18n = vuei18n;
        }
        vuei18n.__onComponentInstanceCreated(this.$i18n);
        i18n2.__setInstance(instance, this.$i18n);
        this.$t = (...args) => this.$i18n.t(...args);
        this.$rt = (...args) => this.$i18n.rt(...args);
        this.$tc = (...args) => this.$i18n.tc(...args);
        this.$te = (key, locale) => this.$i18n.te(key, locale);
        this.$d = (...args) => this.$i18n.d(...args);
        this.$n = (...args) => this.$i18n.n(...args);
        this.$tm = (key) => this.$i18n.tm(key);
      },
      mounted() {
        {
          this.$el.__VUE_I18N__ = this.$i18n.__composer;
          const emitter = this.__v_emitter = createEmitter();
          const _vueI18n = this.$i18n;
          _vueI18n.__enableEmitter && _vueI18n.__enableEmitter(emitter);
          emitter.on("*", addTimelineEvent);
        }
      },
      beforeUnmount() {
        const instance = vue.getCurrentInstance();
        if (!instance) {
          throw createI18nError(22);
        }
        {
          if (this.__v_emitter) {
            this.__v_emitter.off("*", addTimelineEvent);
            delete this.__v_emitter;
          }
          const _vueI18n = this.$i18n;
          _vueI18n.__disableEmitter && _vueI18n.__disableEmitter();
          delete this.$el.__VUE_I18N__;
        }
        delete this.$t;
        delete this.$rt;
        delete this.$tc;
        delete this.$te;
        delete this.$d;
        delete this.$n;
        delete this.$tm;
        i18n2.__deleteInstance(instance);
        delete this.$i18n;
      }
    };
  }
  function mergeToRoot(root2, options) {
    root2.locale = options.locale || root2.locale;
    root2.fallbackLocale = options.fallbackLocale || root2.fallbackLocale;
    root2.missing = options.missing || root2.missing;
    root2.silentTranslationWarn = options.silentTranslationWarn || root2.silentFallbackWarn;
    root2.silentFallbackWarn = options.silentFallbackWarn || root2.silentFallbackWarn;
    root2.formatFallbackMessages = options.formatFallbackMessages || root2.formatFallbackMessages;
    root2.postTranslation = options.postTranslation || root2.postTranslation;
    root2.warnHtmlInMessage = options.warnHtmlInMessage || root2.warnHtmlInMessage;
    root2.escapeParameterHtml = options.escapeParameterHtml || root2.escapeParameterHtml;
    root2.sync = options.sync || root2.sync;
    root2.__composer[SetPluralRulesSymbol](options.pluralizationRules || root2.pluralizationRules);
    const messages2 = getLocaleMessages(root2.locale, {
      messages: options.messages,
      __i18n: options.__i18n
    });
    Object.keys(messages2).forEach((locale) => root2.mergeLocaleMessage(locale, messages2[locale]));
    if (options.datetimeFormats) {
      Object.keys(options.datetimeFormats).forEach((locale) => root2.mergeDateTimeFormat(locale, options.datetimeFormats[locale]));
    }
    if (options.numberFormats) {
      Object.keys(options.numberFormats).forEach((locale) => root2.mergeNumberFormat(locale, options.numberFormats[locale]));
    }
    return root2;
  }
  function createI18n(options = {}) {
    const __legacyMode = isBoolean(options.legacy) ? options.legacy : true;
    const __globalInjection = !!options.globalInjection;
    const __instances = /* @__PURE__ */ new Map();
    const __global = __legacyMode ? createVueI18n(options) : createComposer(options);
    const symbol = makeSymbol("vue-i18n");
    const i18n2 = {
      get mode() {
        return __legacyMode ? "legacy" : "composition";
      },
      async install(app, ...options2) {
        {
          app.__VUE_I18N__ = i18n2;
        }
        app.__VUE_I18N_SYMBOL__ = symbol;
        app.provide(app.__VUE_I18N_SYMBOL__, i18n2);
        if (!__legacyMode && __globalInjection) {
          injectGlobalFields(app, i18n2.global);
        }
        {
          apply(app, i18n2, ...options2);
        }
        if (__legacyMode) {
          app.mixin(defineMixin(__global, __global.__composer, i18n2));
        }
        {
          const ret = await enableDevTools(app, i18n2);
          if (!ret) {
            throw createI18nError(21);
          }
          const emitter = createEmitter();
          if (__legacyMode) {
            const _vueI18n = __global;
            _vueI18n.__enableEmitter && _vueI18n.__enableEmitter(emitter);
          } else {
            const _composer = __global;
            _composer[EnableEmitter] && _composer[EnableEmitter](emitter);
          }
          emitter.on("*", addTimelineEvent);
        }
      },
      get global() {
        return __global;
      },
      __instances,
      __getInstance(component) {
        return __instances.get(component) || null;
      },
      __setInstance(component, instance) {
        __instances.set(component, instance);
      },
      __deleteInstance(component) {
        __instances.delete(component);
      }
    };
    return i18n2;
  }
  function useI18n(options = {}) {
    const instance = vue.getCurrentInstance();
    if (instance == null) {
      throw createI18nError(16);
    }
    if (!instance.appContext.app.__VUE_I18N_SYMBOL__) {
      throw createI18nError(17);
    }
    const i18n2 = vue.inject(instance.appContext.app.__VUE_I18N_SYMBOL__);
    if (!i18n2) {
      throw createI18nError(22);
    }
    const global2 = i18n2.mode === "composition" ? i18n2.global : i18n2.global.__composer;
    const scope = isEmptyObject(options) ? "__i18n" in instance.type ? "local" : "global" : !options.useScope ? "local" : options.useScope;
    if (scope === "global") {
      let messages2 = isObject$1(options.messages) ? options.messages : {};
      if ("__i18nGlobal" in instance.type) {
        messages2 = getLocaleMessages(global2.locale.value, {
          messages: messages2,
          __i18n: instance.type.__i18nGlobal
        });
      }
      const locales = Object.keys(messages2);
      if (locales.length) {
        locales.forEach((locale) => {
          global2.mergeLocaleMessage(locale, messages2[locale]);
        });
      }
      if (isObject$1(options.datetimeFormats)) {
        const locales2 = Object.keys(options.datetimeFormats);
        if (locales2.length) {
          locales2.forEach((locale) => {
            global2.mergeDateTimeFormat(locale, options.datetimeFormats[locale]);
          });
        }
      }
      if (isObject$1(options.numberFormats)) {
        const locales2 = Object.keys(options.numberFormats);
        if (locales2.length) {
          locales2.forEach((locale) => {
            global2.mergeNumberFormat(locale, options.numberFormats[locale]);
          });
        }
      }
      return global2;
    }
    if (scope === "parent") {
      let composer2 = getComposer(i18n2, instance, options.__useComponent);
      if (composer2 == null) {
        {
          warn(getWarnMessage(12));
        }
        composer2 = global2;
      }
      return composer2;
    }
    if (i18n2.mode === "legacy") {
      throw createI18nError(18);
    }
    const i18nInternal = i18n2;
    let composer = i18nInternal.__getInstance(instance);
    if (composer == null) {
      const type = instance.type;
      const composerOptions = assign({}, options);
      if (type.__i18n) {
        composerOptions.__i18n = type.__i18n;
      }
      if (global2) {
        composerOptions.__root = global2;
      }
      composer = createComposer(composerOptions);
      setupLifeCycle(i18nInternal, instance, composer);
      i18nInternal.__setInstance(instance, composer);
    }
    return composer;
  }
  function getComposer(i18n2, target, useComponent = false) {
    let composer = null;
    const root2 = target.root;
    let current = target.parent;
    while (current != null) {
      const i18nInternal = i18n2;
      if (i18n2.mode === "composition") {
        composer = i18nInternal.__getInstance(current);
      } else {
        const vueI18n = i18nInternal.__getInstance(current);
        if (vueI18n != null) {
          composer = vueI18n.__composer;
        }
        if (useComponent && composer && !composer[InejctWithOption]) {
          composer = null;
        }
      }
      if (composer != null) {
        break;
      }
      if (root2 === current) {
        break;
      }
      current = current.parent;
    }
    return composer;
  }
  function setupLifeCycle(i18n2, target, composer) {
    let emitter = null;
    vue.onMounted(() => {
      if (target.vnode.el) {
        target.vnode.el.__VUE_I18N__ = composer;
        emitter = createEmitter();
        const _composer = composer;
        _composer[EnableEmitter] && _composer[EnableEmitter](emitter);
        emitter.on("*", addTimelineEvent);
      }
    }, target);
    vue.onUnmounted(() => {
      if (target.vnode.el && target.vnode.el.__VUE_I18N__) {
        emitter && emitter.off("*", addTimelineEvent);
        const _composer = composer;
        _composer[DisableEmitter] && _composer[DisableEmitter]();
        delete target.vnode.el.__VUE_I18N__;
      }
      i18n2.__deleteInstance(target);
    }, target);
  }
  const globalExportProps = [
    "locale",
    "fallbackLocale",
    "availableLocales"
  ];
  const globalExportMethods = ["t", "rt", "d", "n", "tm"];
  function injectGlobalFields(app, composer) {
    const i18n2 = /* @__PURE__ */ Object.create(null);
    globalExportProps.forEach((prop) => {
      const desc = Object.getOwnPropertyDescriptor(composer, prop);
      if (!desc) {
        throw createI18nError(22);
      }
      const wrap = vue.isRef(desc.value) ? {
        get() {
          return desc.value.value;
        },
        set(val) {
          desc.value.value = val;
        }
      } : {
        get() {
          return desc.get && desc.get();
        }
      };
      Object.defineProperty(i18n2, prop, wrap);
    });
    app.config.globalProperties.$i18n = i18n2;
    globalExportMethods.forEach((method2) => {
      const desc = Object.getOwnPropertyDescriptor(composer, method2);
      if (!desc || !desc.value) {
        throw createI18nError(22);
      }
      Object.defineProperty(app.config.globalProperties, `$${method2}`, desc);
    });
  }
  {
    initFeatureFlags();
  }
  {
    const target = getGlobalThis();
    target.__INTLIFY__ = true;
    setDevToolsHook(target.__INTLIFY_DEVTOOLS_GLOBAL_HOOK__);
  }
  let i18nConfig = {
    locale: uni.getLocale(),
    messages
  };
  const i18n = createI18n(i18nConfig);
  function createApp() {
    const app = vue.createVueApp(App);
    app.use(i18n);
    return {
      app
    };
  }
  const { app: __app__, Vuex: __Vuex__, Pinia: __Pinia__ } = createApp();
  uni.Vuex = __Vuex__;
  uni.Pinia = __Pinia__;
  __app__.provide("__globalStyles", __uniConfig.styles);
  __app__._component.mpType = "app";
  __app__._component.render = () => {
  };
  __app__.mount("#app");
})(Vue, uni.VueShared);
